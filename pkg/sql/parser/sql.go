// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24

import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/cockroachdb/cockroach/pkg/sql/coltypes"
	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func purposelyUnimplemented(sqllex sqlLexer, feature string, reason string) int {
	sqllex.(*lexer).PurposelyUnimplemented(feature, reason)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:70

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:585
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONCURRENTLY = lex.CONCURRENTLY
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXCLUDE = lex.EXCLUDE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCLUDE = lex.INCLUDE
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REINDEX = lex.REINDEX
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXCLUDE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCLUDE",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REINDEX",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9263

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 27,
	-2, 997,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 71,
	180, 836,
	197, 836,
	212, 233,
	288, 233,
	296, 688,
	324, 233,
	333, 688,
	370, 688,
	395, 233,
	418, 688,
	-2, 0,
	-1, 77,
	212, 237,
	-2, 0,
	-1, 78,
	107, 997,
	186, 997,
	404, 997,
	405, 997,
	-2, 0,
	-1, 89,
	120, 971,
	135, 971,
	194, 971,
	223, 971,
	254, 971,
	264, 971,
	400, 971,
	-2, 958,
	-1, 118,
	126, 608,
	203, 600,
	211, 608,
	290, 594,
	342, 594,
	388, 608,
	-2, 0,
	-1, 119,
	4, 999,
	21, 999,
	22, 999,
	23, 999,
	24, 999,
	25, 999,
	27, 999,
	32, 999,
	37, 999,
	38, 999,
	39, 999,
	40, 999,
	41, 999,
	42, 999,
	43, 999,
	44, 999,
	45, 999,
	46, 999,
	47, 999,
	49, 999,
	50, 999,
	51, 999,
	52, 999,
	53, 999,
	54, 999,
	57, 999,
	58, 999,
	59, 999,
	60, 999,
	62, 999,
	63, 999,
	67, 999,
	68, 999,
	69, 999,
	70, 999,
	71, 999,
	74, 999,
	75, 999,
	76, 999,
	77, 999,
	79, 999,
	81, 999,
	82, 999,
	83, 999,
	86, 999,
	87, 999,
	95, 999,
	96, 999,
	97, 999,
	98, 999,
	99, 999,
	100, 999,
	101, 999,
	102, 999,
	104, 999,
	106, 999,
	107, 999,
	109, 999,
	112, 999,
	113, 999,
	114, 999,
	116, 999,
	118, 999,
	119, 999,
	121, 999,
	122, 999,
	124, 999,
	125, 999,
	126, 999,
	127, 999,
	128, 999,
	129, 999,
	130, 999,
	131, 999,
	132, 999,
	134, 999,
	140, 999,
	141, 999,
	142, 999,
	143, 999,
	144, 999,
	145, 999,
	147, 999,
	149, 999,
	153, 999,
	154, 999,
	156, 999,
	157, 999,
	159, 999,
	160, 999,
	162, 999,
	163, 999,
	164, 999,
	165, 999,
	166, 999,
	167, 999,
	168, 999,
	170, 999,
	171, 999,
	173, 999,
	174, 999,
	175, 999,
	176, 999,
	180, 999,
	181, 999,
	182, 999,
	183, 999,
	186, 999,
	187, 999,
	188, 999,
	189, 999,
	190, 999,
	191, 999,
	192, 999,
	193, 999,
	195, 999,
	197, 999,
	199, 999,
	201, 999,
	202, 999,
	203, 999,
	205, 999,
	206, 999,
	209, 999,
	210, 999,
	211, 999,
	212, 999,
	214, 999,
	215, 999,
	217, 999,
	218, 999,
	220, 999,
	221, 999,
	224, 999,
	225, 999,
	228, 999,
	229, 999,
	231, 999,
	232, 999,
	233, 999,
	234, 999,
	235, 999,
	236, 999,
	237, 999,
	238, 999,
	239, 999,
	240, 999,
	242, 999,
	243, 999,
	244, 999,
	245, 999,
	247, 999,
	250, 999,
	251, 999,
	252, 999,
	253, 999,
	255, 999,
	256, 999,
	257, 999,
	259, 999,
	260, 999,
	261, 999,
	262, 999,
	265, 999,
	266, 999,
	268, 999,
	270, 999,
	271, 999,
	272, 999,
	273, 999,
	274, 999,
	275, 999,
	276, 999,
	277, 999,
	278, 999,
	280, 999,
	281, 999,
	282, 999,
	283, 999,
	284, 999,
	285, 999,
	287, 999,
	289, 999,
	290, 999,
	291, 999,
	292, 999,
	293, 999,
	294, 999,
	295, 999,
	296, 999,
	297, 999,
	299, 999,
	300, 999,
	301, 999,
	302, 999,
	303, 999,
	304, 999,
	306, 999,
	307, 999,
	308, 999,
	309, 999,
	310, 999,
	311, 999,
	312, 999,
	313, 999,
	315, 999,
	317, 999,
	318, 999,
	319, 999,
	320, 999,
	321, 999,
	322, 999,
	324, 999,
	325, 999,
	326, 999,
	327, 999,
	328, 999,
	329, 999,
	330, 999,
	331, 999,
	333, 999,
	334, 999,
	335, 999,
	336, 999,
	337, 999,
	338, 999,
	339, 999,
	340, 999,
	341, 999,
	342, 999,
	344, 999,
	345, 999,
	346, 999,
	347, 999,
	349, 999,
	350, 999,
	351, 999,
	352, 999,
	354, 999,
	355, 999,
	356, 999,
	357, 999,
	358, 999,
	359, 999,
	360, 999,
	361, 999,
	362, 999,
	363, 999,
	364, 999,
	365, 999,
	367, 999,
	368, 999,
	369, 999,
	371, 999,
	372, 999,
	373, 999,
	374, 999,
	375, 999,
	376, 999,
	377, 999,
	378, 999,
	379, 999,
	381, 999,
	382, 999,
	383, 999,
	384, 999,
	386, 999,
	388, 999,
	389, 999,
	390, 999,
	391, 999,
	392, 999,
	394, 999,
	395, 999,
	396, 999,
	398, 999,
	399, 999,
	402, 999,
	403, 999,
	404, 999,
	405, 999,
	406, 999,
	408, 999,
	410, 999,
	411, 999,
	412, 999,
	413, 999,
	414, 999,
	415, 999,
	416, 999,
	418, 999,
	419, 999,
	420, 999,
	425, 999,
	426, 999,
	427, 999,
	428, 999,
	429, 999,
	430, 999,
	-2, 0,
	-1, 120,
	1, 889,
	201, 889,
	287, 889,
	294, 889,
	433, 889,
	456, 889,
	-2, 0,
	-1, 122,
	1, 889,
	456, 889,
	-2, 0,
	-1, 123,
	1, 889,
	456, 889,
	-2, 0,
	-1, 124,
	1, 893,
	456, 893,
	-2, 0,
	-1, 148,
	120, 970,
	135, 970,
	194, 970,
	223, 970,
	254, 970,
	264, 970,
	400, 970,
	-2, 967,
	-1, 178,
	4, 1006,
	5, 1006,
	6, 1006,
	7, 1006,
	8, 1006,
	9, 1006,
	10, 1006,
	21, 1006,
	22, 1006,
	23, 1006,
	24, 1006,
	25, 1006,
	27, 1006,
	32, 1006,
	33, 1006,
	37, 1006,
	38, 1006,
	39, 1006,
	40, 1006,
	41, 1006,
	42, 1006,
	43, 1006,
	44, 1006,
	45, 1006,
	46, 1006,
	47, 1006,
	49, 1006,
	50, 1006,
	51, 1006,
	52, 1006,
	53, 1006,
	54, 1006,
	55, 1006,
	56, 1006,
	57, 1006,
	58, 1006,
	59, 1006,
	60, 1006,
	62, 1006,
	63, 1006,
	65, 1006,
	67, 1006,
	68, 1006,
	69, 1006,
	70, 1006,
	71, 1006,
	74, 1006,
	75, 1006,
	76, 1006,
	77, 1006,
	79, 1006,
	81, 1006,
	82, 1006,
	83, 1006,
	85, 1006,
	86, 1006,
	87, 1006,
	88, 1006,
	89, 1006,
	90, 1006,
	91, 1006,
	92, 1006,
	93, 1006,
	94, 1006,
	95, 1006,
	96, 1006,
	97, 1006,
	98, 1006,
	99, 1006,
	100, 1006,
	101, 1006,
	102, 1006,
	103, 1006,
	104, 1006,
	106, 1006,
	107, 1006,
	109, 1006,
	112, 1006,
	113, 1006,
	114, 1006,
	116, 1006,
	118, 1006,
	119, 1006,
	121, 1006,
	122, 1006,
	124, 1006,
	125, 1006,
	126, 1006,
	127, 1006,
	128, 1006,
	129, 1006,
	130, 1006,
	131, 1006,
	132, 1006,
	133, 1006,
	134, 1006,
	140, 1006,
	141, 1006,
	142, 1006,
	143, 1006,
	144, 1006,
	145, 1006,
	147, 1006,
	149, 1006,
	152, 1006,
	153, 1006,
	154, 1006,
	156, 1006,
	157, 1006,
	159, 1006,
	160, 1006,
	162, 1006,
	163, 1006,
	164, 1006,
	165, 1006,
	166, 1006,
	167, 1006,
	168, 1006,
	169, 1006,
	170, 1006,
	171, 1006,
	173, 1006,
	174, 1006,
	175, 1006,
	176, 1006,
	180, 1006,
	181, 1006,
	182, 1006,
	183, 1006,
	185, 1006,
	186, 1006,
	187, 1006,
	188, 1006,
	189, 1006,
	190, 1006,
	191, 1006,
	192, 1006,
	193, 1006,
	195, 1006,
	197, 1006,
	198, 1006,
	199, 1006,
	200, 1006,
	201, 1006,
	202, 1006,
	203, 1006,
	204, 1006,
	205, 1006,
	206, 1006,
	209, 1006,
	210, 1006,
	211, 1006,
	212, 1006,
	214, 1006,
	215, 1006,
	217, 1006,
	218, 1006,
	219, 1006,
	220, 1006,
	221, 1006,
	222, 1006,
	224, 1006,
	225, 1006,
	228, 1006,
	229, 1006,
	231, 1006,
	232, 1006,
	233, 1006,
	234, 1006,
	235, 1006,
	236, 1006,
	237, 1006,
	238, 1006,
	239, 1006,
	240, 1006,
	241, 1006,
	242, 1006,
	243, 1006,
	244, 1006,
	245, 1006,
	246, 1006,
	247, 1006,
	248, 1006,
	249, 1006,
	250, 1006,
	251, 1006,
	252, 1006,
	253, 1006,
	255, 1006,
	256, 1006,
	257, 1006,
	260, 1006,
	261, 1006,
	262, 1006,
	265, 1006,
	266, 1006,
	267, 1006,
	268, 1006,
	269, 1006,
	270, 1006,
	271, 1006,
	272, 1006,
	273, 1006,
	274, 1006,
	275, 1006,
	276, 1006,
	277, 1006,
	278, 1006,
	280, 1006,
	281, 1006,
	282, 1006,
	283, 1006,
	284, 1006,
	285, 1006,
	287, 1006,
	289, 1006,
	290, 1006,
	291, 1006,
	292, 1006,
	293, 1006,
	294, 1006,
	295, 1006,
	296, 1006,
	297, 1006,
	299, 1006,
	300, 1006,
	301, 1006,
	302, 1006,
	303, 1006,
	304, 1006,
	306, 1006,
	307, 1006,
	308, 1006,
	309, 1006,
	310, 1006,
	311, 1006,
	312, 1006,
	313, 1006,
	315, 1006,
	316, 1006,
	317, 1006,
	318, 1006,
	319, 1006,
	320, 1006,
	321, 1006,
	322, 1006,
	324, 1006,
	325, 1006,
	326, 1006,
	327, 1006,
	328, 1006,
	329, 1006,
	330, 1006,
	331, 1006,
	333, 1006,
	334, 1006,
	335, 1006,
	336, 1006,
	337, 1006,
	338, 1006,
	339, 1006,
	340, 1006,
	341, 1006,
	342, 1006,
	343, 1006,
	344, 1006,
	345, 1006,
	346, 1006,
	347, 1006,
	348, 1006,
	349, 1006,
	350, 1006,
	351, 1006,
	352, 1006,
	354, 1006,
	355, 1006,
	356, 1006,
	357, 1006,
	358, 1006,
	359, 1006,
	360, 1006,
	361, 1006,
	362, 1006,
	363, 1006,
	364, 1006,
	365, 1006,
	367, 1006,
	368, 1006,
	369, 1006,
	371, 1006,
	372, 1006,
	373, 1006,
	374, 1006,
	375, 1006,
	376, 1006,
	377, 1006,
	378, 1006,
	379, 1006,
	381, 1006,
	382, 1006,
	383, 1006,
	384, 1006,
	386, 1006,
	388, 1006,
	389, 1006,
	390, 1006,
	391, 1006,
	392, 1006,
	393, 1006,
	394, 1006,
	395, 1006,
	396, 1006,
	398, 1006,
	399, 1006,
	401, 1006,
	402, 1006,
	403, 1006,
	404, 1006,
	405, 1006,
	406, 1006,
	407, 1006,
	408, 1006,
	410, 1006,
	411, 1006,
	412, 1006,
	413, 1006,
	414, 1006,
	415, 1006,
	416, 1006,
	418, 1006,
	419, 1006,
	420, 1006,
	425, 1006,
	426, 1006,
	427, 1006,
	428, 1006,
	429, 1006,
	430, 1006,
	431, 1006,
	439, 1006,
	444, 1006,
	445, 1006,
	446, 1006,
	453, 1006,
	458, 1006,
	-2, 0,
	-1, 547,
	151, 1673,
	385, 1673,
	436, 1673,
	455, 1673,
	-2, 0,
	-1, 548,
	151, 1751,
	385, 1751,
	436, 1751,
	455, 1751,
	-2, 0,
	-1, 549,
	151, 1663,
	385, 1663,
	436, 1663,
	455, 1663,
	-2, 0,
	-1, 551,
	151, 1838,
	385, 1838,
	436, 1838,
	455, 1838,
	-2, 0,
	-1, 553,
	151, 1866,
	385, 1866,
	436, 1866,
	455, 1866,
	-2, 0,
	-1, 560,
	151, 1761,
	385, 1761,
	436, 1761,
	455, 1761,
	-2, 472,
	-1, 581,
	455, 1622,
	457, 1622,
	-2, 657,
	-1, 582,
	455, 1624,
	457, 1624,
	-2, 658,
	-1, 583,
	455, 1623,
	457, 1623,
	-2, 659,
	-1, 584,
	457, 1570,
	-2, 660,
	-1, 669,
	4, 834,
	21, 834,
	22, 834,
	23, 834,
	24, 834,
	25, 834,
	27, 834,
	32, 834,
	37, 834,
	38, 834,
	39, 834,
	40, 834,
	41, 834,
	42, 834,
	43, 834,
	44, 834,
	45, 834,
	46, 834,
	47, 834,
	49, 834,
	50, 834,
	51, 834,
	52, 834,
	53, 834,
	54, 834,
	57, 834,
	58, 834,
	59, 834,
	60, 834,
	62, 834,
	63, 834,
	67, 834,
	68, 834,
	69, 834,
	70, 834,
	71, 834,
	74, 834,
	75, 834,
	76, 834,
	77, 834,
	79, 834,
	81, 834,
	82, 834,
	83, 834,
	86, 834,
	87, 834,
	95, 834,
	96, 834,
	97, 834,
	98, 834,
	99, 834,
	100, 834,
	101, 834,
	102, 834,
	104, 834,
	106, 834,
	107, 834,
	109, 834,
	112, 834,
	113, 834,
	114, 834,
	116, 834,
	118, 834,
	119, 834,
	121, 834,
	122, 834,
	124, 834,
	125, 834,
	126, 834,
	127, 834,
	128, 834,
	129, 834,
	130, 834,
	131, 834,
	132, 834,
	134, 834,
	140, 834,
	141, 834,
	142, 834,
	143, 834,
	144, 834,
	145, 834,
	147, 834,
	149, 834,
	153, 834,
	154, 834,
	156, 834,
	157, 834,
	159, 834,
	160, 834,
	162, 834,
	163, 834,
	164, 834,
	165, 834,
	166, 834,
	167, 834,
	168, 834,
	170, 834,
	171, 834,
	173, 834,
	174, 834,
	175, 834,
	176, 834,
	180, 834,
	181, 834,
	182, 834,
	183, 834,
	186, 834,
	187, 834,
	188, 834,
	189, 834,
	190, 834,
	191, 834,
	192, 834,
	193, 834,
	195, 834,
	197, 834,
	199, 834,
	201, 834,
	202, 834,
	203, 834,
	205, 834,
	206, 834,
	209, 834,
	210, 834,
	211, 834,
	212, 834,
	214, 834,
	215, 834,
	217, 834,
	218, 834,
	220, 834,
	221, 834,
	224, 834,
	225, 834,
	228, 834,
	229, 834,
	231, 834,
	232, 834,
	233, 834,
	234, 834,
	235, 834,
	236, 834,
	237, 834,
	238, 834,
	239, 834,
	240, 834,
	242, 834,
	243, 834,
	244, 834,
	245, 834,
	247, 834,
	250, 834,
	251, 834,
	252, 834,
	253, 834,
	255, 834,
	256, 834,
	257, 834,
	260, 834,
	261, 834,
	262, 834,
	265, 834,
	266, 834,
	268, 834,
	270, 834,
	271, 834,
	272, 834,
	273, 834,
	274, 834,
	275, 834,
	276, 834,
	277, 834,
	278, 834,
	280, 834,
	281, 834,
	282, 834,
	283, 834,
	284, 834,
	285, 834,
	287, 834,
	289, 834,
	290, 834,
	291, 834,
	292, 834,
	293, 834,
	294, 834,
	295, 834,
	296, 834,
	297, 834,
	299, 834,
	300, 834,
	301, 834,
	302, 834,
	303, 834,
	304, 834,
	306, 834,
	307, 834,
	308, 834,
	309, 834,
	310, 834,
	311, 834,
	312, 834,
	313, 834,
	315, 834,
	317, 834,
	318, 834,
	319, 834,
	320, 834,
	321, 834,
	322, 834,
	324, 834,
	325, 834,
	326, 834,
	327, 834,
	328, 834,
	329, 834,
	330, 834,
	331, 834,
	333, 834,
	334, 834,
	335, 834,
	336, 834,
	337, 834,
	338, 834,
	339, 834,
	340, 834,
	341, 834,
	342, 834,
	344, 834,
	345, 834,
	346, 834,
	347, 834,
	349, 834,
	350, 834,
	351, 834,
	352, 834,
	354, 834,
	355, 834,
	356, 834,
	357, 834,
	358, 834,
	359, 834,
	360, 834,
	361, 834,
	362, 834,
	363, 834,
	364, 834,
	365, 834,
	367, 834,
	368, 834,
	369, 834,
	371, 834,
	372, 834,
	373, 834,
	374, 834,
	375, 834,
	376, 834,
	377, 834,
	378, 834,
	379, 834,
	381, 834,
	382, 834,
	383, 834,
	384, 834,
	386, 834,
	388, 834,
	389, 834,
	390, 834,
	391, 834,
	392, 834,
	394, 834,
	395, 834,
	396, 834,
	398, 834,
	399, 834,
	402, 834,
	403, 834,
	404, 834,
	405, 834,
	406, 834,
	408, 834,
	410, 834,
	411, 834,
	412, 834,
	413, 834,
	414, 834,
	415, 834,
	416, 834,
	418, 834,
	419, 834,
	420, 834,
	425, 834,
	426, 834,
	427, 834,
	428, 834,
	429, 834,
	430, 834,
	-2, 0,
	-1, 728,
	290, 595,
	342, 595,
	-2, 0,
	-1, 729,
	290, 594,
	342, 594,
	-2, 554,
	-1, 731,
	1, 576,
	452, 576,
	454, 576,
	456, 576,
	-2, 0,
	-1, 732,
	1, 656,
	148, 656,
	452, 656,
	454, 656,
	456, 656,
	-2, 0,
	-1, 741,
	1, 618,
	452, 618,
	454, 618,
	456, 618,
	-2, 0,
	-1, 742,
	1, 620,
	452, 620,
	454, 620,
	456, 620,
	-2, 0,
	-1, 743,
	1, 623,
	452, 623,
	454, 623,
	456, 623,
	-2, 0,
	-1, 747,
	1, 637,
	452, 637,
	454, 637,
	456, 637,
	-2, 0,
	-1, 748,
	1, 639,
	452, 639,
	454, 639,
	456, 639,
	-2, 0,
	-1, 793,
	135, 1010,
	223, 1010,
	254, 1010,
	-2, 967,
	-1, 808,
	135, 1009,
	223, 1009,
	254, 1009,
	-2, 967,
	-1, 832,
	455, 1621,
	-2, 480,
	-1, 861,
	453, 1613,
	-2, 1604,
	-1, 867,
	5, 1144,
	-2, 1654,
	-1, 868,
	5, 1145,
	-2, 1658,
	-1, 869,
	5, 1146,
	-2, 1657,
	-1, 870,
	5, 1147,
	-2, 1864,
	-1, 871,
	5, 1148,
	-2, 1763,
	-1, 872,
	5, 1149,
	-2, 1830,
	-1, 873,
	5, 1150,
	-2, 1832,
	-1, 874,
	5, 1151,
	-2, 1843,
	-1, 875,
	5, 1152,
	-2, 1833,
	-1, 876,
	5, 1153,
	-2, 1834,
	-1, 877,
	5, 1154,
	-2, 1653,
	-1, 878,
	5, 1155,
	-2, 1878,
	-1, 879,
	5, 1156,
	-2, 1726,
	-1, 880,
	5, 1157,
	-2, 1770,
	-1, 881,
	5, 1158,
	-2, 1772,
	-1, 882,
	5, 1159,
	-2, 1730,
	-1, 883,
	5, 1160,
	453, 1631,
	-2, 1622,
	-1, 884,
	5, 1216,
	453, 1216,
	-2, 1913,
	-1, 889,
	453, 1632,
	-2, 1623,
	-1, 891,
	5, 1164,
	-2, 1911,
	-1, 892,
	5, 1165,
	-2, 1912,
	-1, 893,
	5, 1166,
	-2, 1729,
	-1, 894,
	5, 1167,
	-2, 1924,
	-1, 895,
	5, 1168,
	-2, 1731,
	-1, 896,
	5, 1169,
	-2, 1732,
	-1, 897,
	5, 1170,
	-2, 1733,
	-1, 898,
	5, 1171,
	-2, 1893,
	-1, 899,
	5, 1172,
	-2, 1922,
	-1, 900,
	5, 1173,
	-2, 1708,
	-1, 901,
	5, 1174,
	-2, 1709,
	-1, 902,
	5, 1188,
	-2, 1905,
	-1, 904,
	5, 1163,
	-2, 1901,
	-1, 905,
	5, 1163,
	-2, 1900,
	-1, 906,
	5, 1163,
	-2, 1917,
	-1, 907,
	5, 1180,
	-2, 1895,
	-1, 908,
	5, 1181,
	-2, 1655,
	-1, 909,
	5, 1191,
	-2, 1894,
	-1, 910,
	5, 1193,
	-2, 1933,
	-1, 912,
	5, 1204,
	-2, 1683,
	-1, 913,
	5, 1215,
	-2, 1926,
	-1, 914,
	5, 1207,
	-2, 1927,
	-1, 915,
	5, 1215,
	-2, 1928,
	-1, 916,
	5, 1211,
	-2, 1929,
	-1, 917,
	5, 1131,
	-2, 1739,
	-1, 918,
	5, 1132,
	-2, 1740,
	-1, 919,
	455, 1619,
	-2, 1603,
	-1, 920,
	453, 1953,
	-2, 1620,
	-1, 940,
	5, 1199,
	-2, 1853,
	-1, 957,
	5, 1198,
	-2, 1934,
	-1, 967,
	5, 1200,
	419, 1200,
	-2, 1896,
	-1, 968,
	5, 1201,
	419, 1201,
	-2, 1897,
	-1, 1004,
	453, 1631,
	-2, 1622,
	-1, 1033,
	151, 1866,
	385, 1866,
	436, 1866,
	455, 1866,
	-2, 0,
	-1, 1034,
	1, 460,
	456, 460,
	-2, 901,
	-1, 1160,
	306, 1600,
	446, 1600,
	-2, 1599,
	-1, 1183,
	458, 1600,
	-2, 1601,
	-1, 1218,
	296, 688,
	418, 688,
	-2, 232,
	-1, 1238,
	276, 995,
	-2, 807,
	-1, 1247,
	4, 834,
	21, 834,
	22, 834,
	23, 834,
	24, 834,
	25, 834,
	27, 834,
	32, 834,
	37, 834,
	38, 834,
	39, 834,
	40, 834,
	41, 834,
	42, 834,
	43, 834,
	44, 834,
	45, 834,
	46, 834,
	47, 834,
	49, 834,
	50, 834,
	51, 834,
	52, 834,
	53, 834,
	54, 834,
	57, 834,
	58, 834,
	59, 834,
	60, 834,
	62, 834,
	63, 834,
	67, 834,
	68, 834,
	69, 834,
	70, 834,
	71, 834,
	74, 834,
	75, 834,
	76, 834,
	77, 834,
	79, 834,
	81, 834,
	82, 834,
	83, 834,
	86, 834,
	87, 834,
	95, 834,
	96, 834,
	97, 834,
	98, 834,
	99, 834,
	100, 834,
	101, 834,
	102, 834,
	104, 834,
	106, 834,
	107, 834,
	109, 834,
	112, 834,
	113, 834,
	114, 834,
	116, 834,
	118, 834,
	119, 834,
	121, 834,
	122, 834,
	124, 834,
	125, 834,
	126, 834,
	127, 834,
	128, 834,
	129, 834,
	130, 834,
	131, 834,
	132, 834,
	140, 834,
	141, 834,
	142, 834,
	143, 834,
	144, 834,
	145, 834,
	147, 834,
	149, 834,
	153, 834,
	154, 834,
	156, 834,
	157, 834,
	159, 834,
	160, 834,
	162, 834,
	163, 834,
	164, 834,
	165, 834,
	166, 834,
	167, 834,
	168, 834,
	170, 834,
	171, 834,
	173, 834,
	174, 834,
	175, 834,
	176, 834,
	181, 834,
	182, 834,
	183, 834,
	186, 834,
	187, 834,
	188, 834,
	189, 834,
	190, 834,
	191, 834,
	192, 834,
	193, 834,
	195, 834,
	197, 834,
	199, 834,
	201, 834,
	202, 834,
	203, 834,
	205, 834,
	206, 834,
	209, 834,
	210, 834,
	211, 834,
	212, 834,
	214, 834,
	215, 834,
	217, 834,
	218, 834,
	220, 834,
	221, 834,
	224, 834,
	225, 834,
	228, 834,
	229, 834,
	231, 834,
	232, 834,
	233, 834,
	234, 834,
	235, 834,
	236, 834,
	237, 834,
	238, 834,
	239, 834,
	240, 834,
	242, 834,
	243, 834,
	244, 834,
	245, 834,
	250, 834,
	251, 834,
	252, 834,
	253, 834,
	255, 834,
	256, 834,
	257, 834,
	258, 834,
	260, 834,
	261, 834,
	262, 834,
	265, 834,
	266, 834,
	268, 834,
	270, 834,
	271, 834,
	272, 834,
	273, 834,
	274, 834,
	275, 834,
	276, 834,
	277, 834,
	278, 834,
	280, 834,
	281, 834,
	282, 834,
	283, 834,
	284, 834,
	285, 834,
	287, 834,
	289, 834,
	290, 834,
	291, 834,
	292, 834,
	293, 834,
	294, 834,
	295, 834,
	296, 834,
	297, 834,
	299, 834,
	300, 834,
	301, 834,
	302, 834,
	303, 834,
	304, 834,
	306, 834,
	307, 834,
	308, 834,
	309, 834,
	310, 834,
	311, 834,
	312, 834,
	313, 834,
	315, 834,
	317, 834,
	318, 834,
	319, 834,
	320, 834,
	321, 834,
	322, 834,
	324, 834,
	325, 834,
	326, 834,
	327, 834,
	328, 834,
	329, 834,
	330, 834,
	331, 834,
	333, 834,
	334, 834,
	335, 834,
	336, 834,
	337, 834,
	338, 834,
	339, 834,
	340, 834,
	341, 834,
	342, 834,
	344, 834,
	345, 834,
	346, 834,
	347, 834,
	349, 834,
	350, 834,
	351, 834,
	352, 834,
	354, 834,
	355, 834,
	356, 834,
	357, 834,
	358, 834,
	359, 834,
	360, 834,
	361, 834,
	362, 834,
	363, 834,
	364, 834,
	365, 834,
	367, 834,
	368, 834,
	369, 834,
	371, 834,
	372, 834,
	373, 834,
	374, 834,
	375, 834,
	376, 834,
	377, 834,
	378, 834,
	379, 834,
	381, 834,
	382, 834,
	383, 834,
	384, 834,
	386, 834,
	388, 834,
	389, 834,
	390, 834,
	391, 834,
	392, 834,
	394, 834,
	395, 834,
	396, 834,
	398, 834,
	399, 834,
	402, 834,
	403, 834,
	404, 834,
	405, 834,
	406, 834,
	408, 834,
	410, 834,
	411, 834,
	412, 834,
	413, 834,
	414, 834,
	415, 834,
	416, 834,
	418, 834,
	419, 834,
	420, 834,
	425, 834,
	426, 834,
	427, 834,
	428, 834,
	429, 834,
	430, 834,
	-2, 0,
	-1, 1310,
	1, 349,
	452, 349,
	454, 349,
	456, 349,
	-2, 969,
	-1, 1313,
	4, 1932,
	11, 1932,
	12, 1932,
	14, 1932,
	15, 1932,
	16, 1932,
	17, 1932,
	18, 1932,
	19, 1932,
	21, 1932,
	22, 1932,
	23, 1932,
	24, 1932,
	25, 1932,
	27, 1932,
	30, 1932,
	32, 1932,
	34, 1932,
	37, 1932,
	38, 1932,
	39, 1932,
	40, 1932,
	41, 1932,
	42, 1932,
	43, 1932,
	44, 1932,
	45, 1932,
	46, 1932,
	47, 1932,
	49, 1932,
	50, 1932,
	51, 1932,
	52, 1932,
	53, 1932,
	54, 1932,
	57, 1932,
	58, 1932,
	59, 1932,
	60, 1932,
	62, 1932,
	63, 1932,
	64, 1932,
	67, 1932,
	68, 1932,
	69, 1932,
	70, 1932,
	71, 1932,
	72, 1932,
	74, 1932,
	75, 1932,
	76, 1932,
	77, 1932,
	79, 1932,
	80, 1932,
	81, 1932,
	82, 1932,
	83, 1932,
	85, 1932,
	86, 1932,
	87, 1932,
	95, 1932,
	96, 1932,
	97, 1932,
	98, 1932,
	99, 1932,
	100, 1932,
	101, 1932,
	102, 1932,
	104, 1932,
	106, 1932,
	107, 1932,
	109, 1932,
	112, 1932,
	113, 1932,
	114, 1932,
	116, 1932,
	118, 1932,
	119, 1932,
	121, 1932,
	122, 1932,
	124, 1932,
	125, 1932,
	126, 1932,
	127, 1932,
	128, 1932,
	129, 1932,
	130, 1932,
	131, 1932,
	132, 1932,
	136, 1932,
	137, 1932,
	138, 1932,
	139, 1932,
	140, 1932,
	141, 1932,
	142, 1932,
	143, 1932,
	144, 1932,
	145, 1932,
	146, 1932,
	147, 1932,
	149, 1932,
	152, 1932,
	153, 1932,
	154, 1932,
	156, 1932,
	157, 1932,
	159, 1932,
	160, 1932,
	162, 1932,
	163, 1932,
	164, 1932,
	165, 1932,
	166, 1932,
	167, 1932,
	168, 1932,
	169, 1932,
	170, 1932,
	171, 1932,
	172, 1932,
	173, 1932,
	174, 1932,
	175, 1932,
	176, 1932,
	177, 1932,
	178, 1932,
	179, 1932,
	181, 1932,
	182, 1932,
	183, 1932,
	185, 1932,
	186, 1932,
	187, 1932,
	188, 1932,
	189, 1932,
	190, 1932,
	191, 1932,
	192, 1932,
	193, 1932,
	195, 1932,
	197, 1932,
	198, 1932,
	199, 1932,
	200, 1932,
	201, 1932,
	202, 1932,
	203, 1932,
	204, 1932,
	205, 1932,
	206, 1932,
	207, 1932,
	208, 1932,
	209, 1932,
	210, 1932,
	211, 1932,
	212, 1932,
	214, 1932,
	215, 1932,
	217, 1932,
	218, 1932,
	219, 1932,
	220, 1932,
	221, 1932,
	222, 1932,
	224, 1932,
	225, 1932,
	228, 1932,
	229, 1932,
	230, 1932,
	231, 1932,
	232, 1932,
	233, 1932,
	234, 1932,
	235, 1932,
	236, 1932,
	237, 1932,
	238, 1932,
	239, 1932,
	240, 1932,
	241, 1932,
	242, 1932,
	243, 1932,
	244, 1932,
	245, 1932,
	248, 1932,
	250, 1932,
	251, 1932,
	252, 1932,
	253, 1932,
	255, 1932,
	256, 1932,
	257, 1932,
	260, 1932,
	261, 1932,
	262, 1932,
	263, 1932,
	265, 1932,
	266, 1932,
	268, 1932,
	270, 1932,
	271, 1932,
	272, 1932,
	273, 1932,
	274, 1932,
	275, 1932,
	276, 1932,
	277, 1932,
	278, 1932,
	280, 1932,
	281, 1932,
	282, 1932,
	283, 1932,
	284, 1932,
	285, 1932,
	287, 1932,
	289, 1932,
	290, 1932,
	291, 1932,
	292, 1932,
	293, 1932,
	294, 1932,
	295, 1932,
	296, 1932,
	297, 1932,
	299, 1932,
	300, 1932,
	301, 1932,
	302, 1932,
	303, 1932,
	304, 1932,
	305, 1932,
	306, 1932,
	307, 1932,
	308, 1932,
	309, 1932,
	310, 1932,
	311, 1932,
	312, 1932,
	313, 1932,
	315, 1932,
	316, 1932,
	317, 1932,
	318, 1932,
	319, 1932,
	320, 1932,
	321, 1932,
	322, 1932,
	323, 1932,
	324, 1932,
	325, 1932,
	326, 1932,
	327, 1932,
	328, 1932,
	329, 1932,
	330, 1932,
	331, 1932,
	333, 1932,
	334, 1932,
	335, 1932,
	336, 1932,
	337, 1932,
	338, 1932,
	339, 1932,
	340, 1932,
	341, 1932,
	342, 1932,
	344, 1932,
	345, 1932,
	346, 1932,
	347, 1932,
	348, 1932,
	349, 1932,
	350, 1932,
	351, 1932,
	352, 1932,
	354, 1932,
	355, 1932,
	356, 1932,
	357, 1932,
	358, 1932,
	359, 1932,
	360, 1932,
	361, 1932,
	362, 1932,
	363, 1932,
	364, 1932,
	365, 1932,
	367, 1932,
	368, 1932,
	369, 1932,
	371, 1932,
	372, 1932,
	373, 1932,
	374, 1932,
	375, 1932,
	376, 1932,
	377, 1932,
	378, 1932,
	379, 1932,
	381, 1932,
	382, 1932,
	383, 1932,
	384, 1932,
	386, 1932,
	388, 1932,
	389, 1932,
	390, 1932,
	391, 1932,
	392, 1932,
	394, 1932,
	395, 1932,
	396, 1932,
	398, 1932,
	399, 1932,
	402, 1932,
	403, 1932,
	404, 1932,
	405, 1932,
	406, 1932,
	408, 1932,
	410, 1932,
	411, 1932,
	412, 1932,
	413, 1932,
	414, 1932,
	415, 1932,
	416, 1932,
	418, 1932,
	419, 1932,
	420, 1932,
	425, 1932,
	426, 1932,
	427, 1932,
	428, 1932,
	429, 1932,
	430, 1932,
	431, 1932,
	432, 1932,
	434, 1932,
	435, 1932,
	436, 1932,
	437, 1932,
	438, 1932,
	439, 1932,
	441, 1932,
	442, 1932,
	443, 1932,
	444, 1932,
	445, 1932,
	446, 1932,
	447, 1932,
	448, 1932,
	449, 1932,
	451, 1932,
	454, 1932,
	455, 1932,
	457, 1932,
	458, 1932,
	-2, 0,
	-1, 1318,
	151, 1838,
	385, 1838,
	436, 1838,
	455, 1838,
	-2, 0,
	-1, 1344,
	290, 595,
	342, 595,
	-2, 0,
	-1, 1363,
	1, 590,
	452, 590,
	454, 590,
	456, 590,
	-2, 0,
	-1, 1364,
	1, 609,
	452, 609,
	454, 609,
	456, 609,
	-2, 0,
	-1, 1365,
	1, 597,
	452, 597,
	454, 597,
	456, 597,
	-2, 0,
	-1, 1387,
	1, 1885,
	452, 1885,
	454, 1885,
	455, 1885,
	456, 1885,
	-2, 635,
	-1, 1388,
	1, 1836,
	452, 1836,
	454, 1836,
	455, 1836,
	456, 1836,
	-2, 636,
	-1, 1401,
	1, 896,
	456, 896,
	-2, 901,
	-1, 1406,
	135, 1009,
	223, 1009,
	254, 1009,
	-2, 967,
	-1, 1499,
	120, 971,
	135, 971,
	194, 971,
	223, 971,
	254, 971,
	264, 971,
	400, 971,
	-2, 1372,
	-1, 1552,
	454, 1505,
	-2, 0,
	-1, 1587,
	120, 971,
	135, 971,
	194, 971,
	223, 971,
	254, 971,
	264, 971,
	400, 971,
	-2, 1081,
	-1, 1642,
	453, 1203,
	-2, 1191,
	-1, 1681,
	1, 462,
	456, 462,
	-2, 901,
	-1, 1864,
	1, 592,
	452, 592,
	454, 592,
	456, 592,
	-2, 0,
	-1, 1865,
	1, 611,
	452, 611,
	454, 611,
	456, 611,
	-2, 0,
	-1, 1938,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1252,
	-1, 1939,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1253,
	-1, 1940,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1254,
	-1, 1941,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1255,
	-1, 1942,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1256,
	-1, 1943,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1257,
	-1, 1944,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1258,
	-1, 1945,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1259,
	-1, 1957,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1271,
	-1, 1958,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1272,
	-1, 1959,
	14, 0,
	15, 0,
	16, 0,
	80, 0,
	207, 0,
	208, 0,
	434, 0,
	435, 0,
	436, 0,
	437, 0,
	438, 0,
	-2, 1273,
	-1, 1962,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	222, 0,
	348, 0,
	431, 0,
	439, 0,
	-2, 1278,
	-1, 1968,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	222, 0,
	348, 0,
	431, 0,
	439, 0,
	-2, 1282,
	-1, 1970,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	222, 0,
	348, 0,
	431, 0,
	439, 0,
	-2, 1290,
	-1, 1971,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	222, 0,
	348, 0,
	431, 0,
	439, 0,
	-2, 1291,
	-1, 1972,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	222, 0,
	348, 0,
	431, 0,
	439, 0,
	-2, 1292,
	-1, 1973,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	222, 0,
	348, 0,
	431, 0,
	439, 0,
	-2, 1293,
	-1, 2066,
	5, 1160,
	151, 1516,
	453, 1631,
	-2, 1622,
	-1, 2067,
	151, 1517,
	-2, 1889,
	-1, 2068,
	151, 1518,
	-2, 1760,
	-1, 2069,
	151, 1519,
	-2, 1684,
	-1, 2070,
	151, 1520,
	-2, 1719,
	-1, 2071,
	151, 1521,
	-2, 1758,
	-1, 2072,
	151, 1522,
	-2, 1829,
	-1, 2143,
	1, 1082,
	85, 1082,
	120, 1082,
	135, 1082,
	148, 1082,
	152, 1082,
	158, 1082,
	161, 1082,
	185, 1082,
	194, 1082,
	204, 1082,
	219, 1082,
	223, 1082,
	241, 1082,
	254, 1082,
	258, 1082,
	264, 1082,
	314, 1082,
	316, 1082,
	400, 1082,
	409, 1082,
	422, 1082,
	423, 1082,
	424, 1082,
	433, 1082,
	452, 1082,
	454, 1082,
	456, 1082,
	457, 1082,
	-2, 1081,
	-1, 2148,
	453, 1605,
	-2, 1617,
	-1, 2170,
	453, 1202,
	-2, 1192,
	-1, 2390,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	222, 0,
	348, 0,
	431, 0,
	439, 0,
	-2, 1280,
	-1, 2391,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	222, 0,
	348, 0,
	431, 0,
	439, 0,
	-2, 1284,
	-1, 2397,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	222, 0,
	348, 0,
	431, 0,
	439, 0,
	-2, 1286,
	-1, 2577,
	201, 901,
	287, 901,
	294, 901,
	433, 901,
	-2, 459,
	-1, 2651,
	454, 1575,
	457, 1575,
	-2, 1591,
	-1, 2665,
	276, 995,
	-2, 807,
	-1, 2744,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	222, 0,
	348, 0,
	431, 0,
	439, 0,
	-2, 1288,
	-1, 2751,
	198, 0,
	200, 0,
	248, 0,
	-2, 1307,
	-1, 2814,
	14, 0,
	15, 0,
	16, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1336,
	-1, 2815,
	14, 0,
	15, 0,
	16, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1337,
	-1, 2816,
	14, 0,
	15, 0,
	16, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1338,
	-1, 2820,
	14, 0,
	15, 0,
	16, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1342,
	-1, 2821,
	14, 0,
	15, 0,
	16, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1343,
	-1, 2822,
	14, 0,
	15, 0,
	16, 0,
	434, 0,
	435, 0,
	436, 0,
	-2, 1344,
	-1, 2865,
	453, 1606,
	-2, 1618,
	-1, 2948,
	455, 2037,
	-2, 944,
	-1, 2992,
	198, 0,
	200, 0,
	248, 0,
	-2, 1308,
	-1, 2995,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	222, 0,
	348, 0,
	431, 0,
	439, 0,
	-2, 1311,
	-1, 2996,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	222, 0,
	348, 0,
	431, 0,
	439, 0,
	-2, 1313,
	-1, 3141,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	222, 0,
	348, 0,
	431, 0,
	439, 0,
	-2, 1312,
	-1, 3142,
	17, 0,
	18, 0,
	19, 0,
	41, 0,
	169, 0,
	172, 0,
	222, 0,
	348, 0,
	431, 0,
	439, 0,
	-2, 1314,
	-1, 3152,
	198, 0,
	-2, 1345,
	-1, 3249,
	198, 0,
	-2, 1346,
	-1, 3359,
	41, 0,
	169, 0,
	222, 0,
	348, 0,
	431, 0,
	439, 0,
	-2, 1892,
}

const sqlPrivate = 57344

const sqlLast = 72164

var sqlAct = [...]int{

	889, 3455, 3358, 3206, 3185, 3182, 3368, 2652, 3431, 2978,
	3332, 3329, 3370, 2097, 2307, 3209, 3369, 1005, 3316, 2782,
	3171, 3094, 3253, 2299, 3109, 1845, 3104, 3357, 1164, 1925,
	3132, 1040, 818, 2939, 1302, 3214, 3055, 2135, 2886, 2298,
	210, 2944, 210, 210, 1612, 2682, 210, 210, 210, 210,
	210, 1414, 2418, 210, 809, 1985, 2674, 2649, 2887, 1599,
	2676, 1063, 583, 2687, 3156, 558, 2416, 2594, 2341, 2295,
	2383, 2274, 2271, 1834, 2539, 2526, 1582, 1157, 2199, 2131,
	210, 1580, 3027, 997, 583, 202, 2552, 2977, 2134, 2499,
	1370, 2290, 680, 2340, 861, 2292, 2332, 2308, 2515, 1823,
	1798, 1561, 1797, 2334, 2201, 2498, 1525, 1507, 2255, 1922,
	3254, 2136, 2016, 1998, 2379, 2837, 1918, 1176, 2138, 1725,
	1734, 2686, 1752, 1832, 3207, 1758, 1711, 885, 1173, 1305,
	2115, 1562, 88, 1047, 1590, 817, 141, 2272, 1401, 4,
	1713, 2028, 806, 2233, 1982, 2557, 989, 2232, 2301, 2650,
	1166, 1311, 1794, 1232, 1286, 526, 2094, 2010, 1296, 584,
	510, 1036, 992, 2123, 2191, 534, 971, 1571, 2344, 585,
	2105, 2062, 1999, 210, 210, 1488, 148, 1413, 204, 203,
	542, 149, 1415, 1793, 552, 579, 33, 1262, 624, 655,
	1811, 1186, 1309, 1724, 1520, 845, 529, 969, 994, 723,
	1419, 1400, 808, 537, 738, 1244, 2854, 2414, 1581, 2855,
	1846, 2304, 813, 1044, 141, 1825, 60, 1825, 674, 1044,
	3473, 1427, 1428, 2114, 3461, 2300, 2739, 2114, 61, 2250,
	1761, 2219, 3460, 2013, 1825, 2114, 3444, 2840, 178, 3069,
	588, 591, 65, 1837, 2694, 3442, 3440, 1430, 3069, 1765,
	2575, 2107, 3390, 1427, 1428, 2114, 3388, 813, 3385, 2114,
	2693, 3386, 588, 591, 3382, 3379, 2433, 3383, 1765, 689,
	2114, 2434, 3312, 71, 1429, 1003, 180, 3355, 3354, 1430,
	1765, 1765, 3351, 814, 3350, 1837, 1023, 1837, 3237, 1613,
	3345, 972, 972, 3069, 2159, 1837, 3343, 1207, 2014, 3069,
	2840, 3311, 3302, 77, 2163, 3069, 1429, 2471, 2472, 2106,
	2489, 2490, 2491, 87, 1449, 986, 3301, 78, 794, 3069,
	179, 3295, 3251, 793, 1765, 2163, 2990, 1765, 3236, 3233,
	172, 1765, 3069, 3200, 2471, 2472, 1765, 3199, 173, 3192,
	1765, 846, 1765, 3086, 178, 3191, 178, 801, 3069, 3162,
	3143, 3123, 1765, 2163, 2708, 3091, 1435, 1018, 2114, 150,
	79, 2988, 3085, 3068, 2994, 2114, 3069, 2163, 2486, 2015,
	2012, 973, 2958, 2950, 2860, 2951, 2951, 2861, 1452, 1453,
	1454, 1455, 180, 2850, 180, 1765, 2851, 2843, 1435, 2775,
	2114, 2715, 1765, 2716, 2716, 2512, 2471, 2472, 2114, 2510,
	2509, 2463, 2114, 2114, 2114, 2114, 2446, 2435, 2330, 2447,
	2114, 1841, 2329, 2176, 2162, 1841, 2114, 2163, 2247, 1457,
	1458, 1459, 2156, 1195, 2150, 2114, 179, 1765, 179, 1019,
	1201, 2113, 816, 2190, 2114, 1684, 172, 2708, 172, 2281,
	178, 2382, 2477, 1764, 173, 1840, 173, 2188, 1841, 2161,
	2417, 975, 976, 1557, 1185, 2695, 1372, 977, 974, 178,
	800, 1206, 799, 798, 2017, 150, 80, 150, 3044, 2477,
	2471, 2472, 1450, 1826, 2696, 1826, 797, 796, 180, 792,
	791, 790, 1427, 1428, 789, 1704, 788, 2364, 1470, 1471,
	1472, 787, 1826, 786, 2492, 785, 784, 180, 888, 147,
	83, 783, 84, 782, 781, 721, 720, 719, 1430, 718,
	717, 716, 1476, 715, 714, 210, 713, 712, 711, 710,
	709, 178, 179, 708, 210, 707, 2487, 706, 705, 704,
	703, 2477, 172, 679, 702, 1429, 118, 701, 700, 699,
	173, 179, 698, 1449, 697, 210, 696, 1456, 688, 3006,
	2693, 687, 210, 2487, 646, 3375, 1019, 2106, 645, 180,
	604, 2303, 2011, 603, 2952, 1451, 602, 594, 593, 592,
	569, 564, 210, 1066, 210, 210, 1169, 210, 1066, 210,
	150, 563, 562, 119, 546, 200, 2168, 210, 210, 1046,
	199, 2858, 1019, 1051, 1200, 151, 198, 197, 208, 196,
	195, 194, 193, 179, 192, 2477, 191, 1452, 1453, 1454,
	1455, 190, 210, 172, 189, 2487, 1016, 1435, 2321, 2488,
	1824, 173, 188, 187, 186, 185, 210, 178, 1169, 1169,
	210, 210, 184, 210, 183, 182, 2555, 1898, 181, 1498,
	1467, 2440, 150, 1477, 3356, 210, 2488, 1189, 1457, 1458,
	1459, 2429, 1179, 210, 1431, 1432, 1433, 1434, 1436, 1437,
	1160, 1064, 2259, 2151, 1183, 180, 1177, 210, 210, 210,
	1528, 210, 1169, 1169, 2142, 1709, 1527, 1169, 1583, 1000,
	210, 1169, 210, 1440, 1438, 1439, 1431, 1432, 1433, 1434,
	1436, 1437, 1034, 1465, 1597, 2287, 1528, 1531, 2053, 2051,
	1426, 1450, 1527, 1514, 1191, 1162, 2049, 1306, 2488, 179,
	1848, 2047, 2045, 1053, 1007, 1245, 1245, 1509, 1059, 172,
	1154, 1159, 3283, 1526, 1802, 3244, 3240, 173, 1169, 3181,
	2483, 2484, 2485, 3238, 3124, 3048, 1031, 2482, 2480, 2481,
	2473, 2474, 2475, 2476, 2478, 2479, 1188, 210, 150, 3117,
	832, 3026, 3025, 178, 911, 3013, 1187, 1238, 1241, 3012,
	178, 1249, 178, 210, 3011, 588, 591, 2473, 2474, 2475,
	2476, 2478, 2479, 3010, 3004, 3003, 1456, 1847, 210, 3002,
	3001, 2922, 2875, 2874, 1194, 2872, 1199, 2864, 1205, 2834,
	2833, 180, 2471, 2472, 1451, 2832, 2759, 2755, 180, 1299,
	180, 2719, 2550, 2506, 2497, 2470, 2467, 2466, 2464, 814,
	1320, 2453, 2452, 141, 141, 1427, 1428, 1314, 1316, 1468,
	2451, 2448, 1290, 1293, 2445, 2423, 2422, 1312, 2481, 2473,
	2474, 2475, 2476, 2478, 2479, 179, 1246, 1427, 1428, 985,
	2415, 1430, 179, 2331, 179, 172, 1406, 1510, 1407, 1508,
	2471, 2472, 172, 173, 172, 2143, 2021, 1338, 1426, 1770,
	173, 1768, 173, 1430, 1496, 1425, 3469, 3439, 1429, 2288,
	3438, 3397, 1323, 3395, 150, 3391, 1449, 1006, 2784, 1326,
	3278, 150, 1509, 150, 3275, 3274, 3273, 3269, 3263, 3232,
	1429, 3231, 1988, 3220, 3217, 3177, 3154, 3129, 1449, 3128,
	1427, 1428, 1466, 2473, 2474, 2475, 2476, 2478, 2479, 1399,
	1469, 3098, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436,
	1437, 1705, 2234, 2748, 1331, 3043, 1430, 2477, 3024, 2973,
	2378, 2970, 2903, 2902, 1345, 2890, 1405, 2889, 2846, 2750,
	1452, 1453, 1454, 1455, 3116, 2743, 2709, 2668, 2639, 2619,
	1435, 1412, 2597, 1429, 2596, 2571, 2569, 2511, 1404, 2444,
	2443, 2428, 1452, 1453, 1454, 1455, 2406, 2268, 1532, 1529,
	1402, 210, 1435, 1521, 1518, 2172, 2171, 2146, 2128, 2112,
	2043, 1457, 1458, 1459, 1492, 2477, 814, 1596, 2471, 2472,
	1559, 2489, 2490, 2491, 794, 1560, 887, 210, 1568, 793,
	1427, 1428, 1408, 1457, 1458, 1459, 1556, 210, 1066, 210,
	210, 210, 1422, 1423, 1994, 1555, 1554, 1169, 583, 210,
	210, 1553, 1530, 583, 210, 1552, 1430, 1606, 843, 210,
	2286, 1551, 1550, 1549, 1450, 1435, 1548, 1546, 1427, 1428,
	1545, 1544, 1543, 1542, 1679, 1541, 1540, 1539, 1538, 2486,
	1537, 1536, 1535, 1429, 1066, 1534, 1450, 1511, 1493, 1491,
	1486, 1030, 1021, 1497, 1430, 1013, 1457, 1458, 1459, 2487,
	3256, 1591, 3103, 2165, 2597, 3045, 2998, 2871, 1609, 1849,
	1707, 1565, 1566, 1676, 2853, 2532, 1003, 2849, 1003, 972,
	2432, 1429, 2129, 3166, 1678, 3047, 1600, 2471, 2472, 2870,
	1522, 1523, 1510, 2567, 1489, 1604, 828, 1704, 1592, 1456,
	1704, 1682, 1048, 3276, 1704, 2622, 1050, 2677, 3122, 1450,
	3087, 2856, 2711, 2477, 141, 2710, 814, 1451, 1579, 1041,
	1583, 1456, 3215, 1397, 1528, 1435, 2930, 1601, 1603, 1729,
	1527, 2901, 1710, 1803, 1044, 1044, 1607, 2450, 2236, 1451,
	2052, 2050, 1344, 3241, 2449, 832, 1588, 1690, 2048, 832,
	3239, 779, 2488, 2046, 2044, 2388, 2221, 1049, 1558, 1045,
	1516, 1152, 1681, 1846, 3210, 2492, 1152, 999, 1372, 1044,
	3180, 2654, 1799, 2653, 1719, 1169, 210, 2725, 2634, 1703,
	1585, 1541, 1066, 1541, 1747, 1035, 588, 591, 3157, 780,
	1371, 588, 591, 1608, 3456, 2300, 2786, 2487, 1675, 1001,
	2438, 2029, 1451, 2170, 1547, 1042, 1610, 1524, 2647, 3376,
	1790, 1222, 1043, 3387, 3384, 2689, 2882, 2475, 2476, 2478,
	2479, 210, 210, 3105, 3326, 1335, 2600, 844, 210, 2338,
	3415, 1696, 3414, 2013, 3079, 1440, 1438, 1439, 1431, 1432,
	1433, 1434, 1436, 1437, 1210, 2177, 1220, 210, 2579, 210,
	3466, 210, 1886, 2471, 2472, 210, 1368, 1440, 1438, 1439,
	1431, 1432, 1433, 1434, 1436, 1437, 3377, 210, 773, 771,
	1766, 2480, 2481, 2473, 2474, 2475, 2476, 2478, 2479, 3294,
	984, 3205, 641, 1749, 775, 1733, 1751, 210, 769, 1755,
	2488, 1884, 1695, 1694, 1759, 766, 1704, 1701, 2014, 1786,
	1041, 2194, 1495, 2296, 1762, 757, 1169, 1789, 1169, 210,
	1169, 3201, 2916, 2192, 2486, 1169, 1691, 1221, 210, 2913,
	210, 210, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 2912,
	1169, 1169, 2879, 210, 2878, 1188, 1050, 1817, 210, 1369,
	1808, 1367, 2427, 583, 210, 1187, 210, 2426, 210, 1850,
	210, 1044, 210, 1619, 588, 591, 2203, 1778, 636, 812,
	210, 642, 2425, 1754, 210, 2424, 210, 1763, 2392, 2015,
	2012, 1333, 1183, 1815, 2252, 210, 2246, 1700, 2243, 1726,
	1828, 1050, 2224, 1830, 1041, 2158, 1042, 1049, 2477, 1835,
	2568, 1698, 1969, 1043, 210, 1403, 1805, 1779, 1860, 1780,
	210, 2483, 2484, 2485, 1184, 2621, 2581, 1723, 2482, 2480,
	2481, 2473, 2474, 2475, 2476, 2478, 2479, 2039, 2207, 2038,
	1066, 1927, 1255, 3138, 1254, 1433, 1434, 1436, 1437, 635,
	1727, 1728, 1049, 811, 1810, 1253, 3293, 1252, 814, 1844,
	814, 1813, 2194, 1011, 2223, 2206, 1274, 1216, 1852, 1233,
	1895, 763, 2726, 1896, 2192, 2184, 1312, 1905, 1312, 1858,
	1859, 1856, 2471, 2472, 2017, 1902, 1437, 1714, 1984, 1735,
	1042, 1715, 2487, 2149, 567, 1328, 1984, 1043, 3075, 2214,
	1000, 2166, 1000, 1645, 3348, 2213, 1231, 1739, 1897, 812,
	1410, 1814, 2893, 1031, 3187, 1863, 2000, 2001, 1842, 1592,
	1843, 1851, 1382, 813, 2728, 1066, 2029, 1010, 1926, 1343,
	1346, 2727, 2361, 1699, 2000, 2026, 2240, 807, 1366, 3373,
	1714, 588, 591, 1230, 1715, 2479, 2017, 3414, 1872, 694,
	1736, 822, 1044, 1705, 2234, 2769, 1705, 2234, 1008, 1900,
	1705, 2234, 2380, 2381, 2766, 3406, 1903, 1729, 210, 1864,
	2061, 1396, 2065, 2065, 2078, 2155, 2000, 566, 1716, 2098,
	2100, 1029, 2011, 811, 2104, 2488, 1363, 2684, 2080, 2685,
	1329, 1718, 1066, 210, 1899, 1901, 634, 2578, 633, 644,
	643, 2205, 210, 3453, 3189, 210, 794, 1904, 1066, 794,
	794, 1914, 1825, 2030, 1915, 1916, 1152, 2477, 1218, 1992,
	2147, 1865, 2631, 2626, 1990, 522, 1746, 637, 2025, 1740,
	1731, 1716, 1372, 3137, 814, 2767, 1044, 3270, 1364, 2144,
	2904, 3073, 1233, 2157, 1718, 2684, 1720, 814, 1721, 517,
	2017, 814, 1334, 813, 2222, 2180, 832, 2403, 1885, 810,
	1894, 3374, 1152, 2580, 673, 3434, 3405, 2130, 2182, 1519,
	2565, 2140, 2141, 1996, 2610, 767, 767, 1003, 1714, 2642,
	2401, 3134, 1715, 2914, 2283, 2244, 972, 777, 210, 1741,
	1742, 776, 1729, 2023, 1003, 768, 2148, 1883, 1737, 1720,
	2183, 2487, 767, 2482, 2480, 2481, 2473, 2474, 2475, 2476,
	2478, 2479, 2119, 2181, 1721, 2609, 2204, 2120, 2979, 3148,
	1066, 1379, 2612, 3421, 3337, 210, 1738, 1923, 1924, 3280,
	2017, 2073, 814, 210, 2102, 2089, 3372, 595, 2442, 1721,
	1273, 1215, 2894, 210, 1485, 2614, 2110, 2111, 2020, 2125,
	2126, 2121, 1705, 1702, 2124, 2139, 210, 141, 3074, 1169,
	813, 2160, 1588, 3102, 2974, 568, 1721, 565, 2867, 1716,
	2616, 210, 1066, 1024, 2982, 210, 210, 2924, 570, 1619,
	1619, 2193, 1718, 3133, 1530, 2398, 1644, 2167, 3371, 810,
	2613, 3413, 1721, 2195, 2488, 3188, 2399, 1757, 3411, 2404,
	1152, 210, 3404, 210, 2256, 3066, 210, 1380, 2189, 3290,
	1351, 1743, 2269, 3219, 2937, 2670, 210, 1756, 2394, 1792,
	1567, 695, 2175, 2584, 1022, 210, 1983, 210, 2367, 210,
	1017, 1009, 3063, 2241, 509, 210, 1418, 1720, 210, 764,
	210, 1160, 210, 2174, 2253, 1753, 2980, 210, 1169, 1169,
	1169, 2254, 1169, 1409, 3432, 2178, 1183, 210, 210, 1862,
	210, 3454, 2278, 1330, 2226, 1522, 1523, 210, 1727, 1728,
	1826, 2823, 1342, 576, 3064, 1744, 1717, 1730, 1381, 2216,
	210, 3135, 210, 2325, 2326, 1570, 2350, 2352, 2245, 2225,
	2208, 2210, 2351, 2198, 2256, 1574, 2256, 3022, 2235, 2237,
	2238, 2239, 2242, 2311, 518, 210, 210, 210, 1980, 210,
	3309, 2370, 2482, 2480, 2481, 2473, 2474, 2475, 2476, 2478,
	2479, 2218, 1750, 3433, 1028, 1966, 1417, 1692, 1577, 1717,
	1721, 1978, 210, 3448, 1188, 3194, 3193, 596, 597, 2359,
	2400, 2360, 2320, 2266, 2257, 2313, 1991, 2122, 3175, 2402,
	2337, 2249, 1574, 588, 591, 3435, 578, 519, 2282, 3260,
	3078, 1712, 1575, 2938, 2541, 2881, 2261, 3077, 2263, 2558,
	1501, 2353, 2306, 2354, 1506, 2323, 2294, 2324, 2671, 2372,
	2592, 3281, 1689, 1485, 2588, 1577, 141, 1332, 2365, 752,
	2327, 1183, 2317, 2273, 2318, 520, 2319, 521, 999, 2270,
	999, 1809, 1312, 2328, 1572, 1801, 2369, 2824, 2302, 2339,
	2302, 805, 1800, 2825, 1416, 1774, 2765, 3059, 2228, 1575,
	3060, 3317, 1910, 2366, 1891, 599, 598, 1685, 2420, 2421,
	1001, 210, 1001, 2395, 3110, 2227, 1974, 2542, 1152, 3023,
	2940, 1573, 3307, 2430, 1975, 1418, 1417, 1976, 1687, 2267,
	1981, 572, 1276, 1964, 2375, 2374, 1967, 3062, 2528, 1576,
	3176, 2599, 1578, 2377, 1688, 919, 1352, 1717, 577, 3065,
	2598, 2116, 3308, 1857, 2386, 2848, 600, 601, 2540, 3447,
	1570, 1000, 753, 693, 1365, 686, 2525, 1619, 2154, 2153,
	2431, 2524, 2152, 2280, 811, 3183, 3265, 3095, 1000, 1261,
	1247, 2368, 2720, 2644, 752, 206, 1963, 512, 513, 574,
	3076, 530, 512, 530, 540, 545, 1576, 1248, 561, 1066,
	2508, 2393, 1911, 1152, 1807, 3418, 805, 206, 3282, 3208,
	1259, 814, 3320, 524, 1416, 3173, 2522, 2118, 210, 3028,
	2838, 210, 2117, 3420, 2034, 683, 571, 1574, 210, 206,
	3389, 210, 210, 1066, 1394, 2513, 3277, 2229, 2230, 3153,
	2520, 2521, 1066, 1376, 1374, 3266, 2545, 3174, 1362, 210,
	3021, 1360, 3061, 2543, 3184, 2918, 2500, 2501, 2536, 2437,
	1577, 1358, 2749, 575, 210, 1356, 1354, 2562, 2546, 2547,
	1152, 1977, 1644, 1644, 573, 1348, 3321, 753, 1257, 1572,
	1979, 2465, 210, 210, 210, 2405, 1152, 2519, 210, 2527,
	807, 210, 1003, 2559, 1575, 2277, 2535, 2251, 2576, 210,
	210, 210, 210, 210, 2554, 754, 2220, 1003, 2563, 3267,
	2549, 2582, 1965, 210, 210, 210, 1573, 2173, 512, 512,
	2553, 2548, 210, 2574, 1598, 1595, 206, 1395, 2514, 2531,
	2556, 1003, 2517, 1324, 210, 1169, 1882, 210, 2503, 2504,
	2505, 2363, 2529, 1066, 2362, 2356, 2544, 2530, 1893, 1616,
	1066, 1869, 1677, 1533, 1327, 210, 2589, 1237, 210, 210,
	2585, 2586, 2033, 691, 692, 684, 685, 2602, 210, 2606,
	2607, 1169, 210, 1260, 1169, 1169, 1169, 2601, 3367, 2604,
	3225, 3314, 2657, 1393, 2777, 210, 2625, 2624, 210, 2560,
	2561, 1576, 1375, 1373, 210, 2661, 210, 1361, 1152, 1183,
	1359, 3108, 3052, 210, 1258, 1719, 2577, 523, 755, 2936,
	1357, 2632, 210, 210, 1355, 1353, 1604, 2899, 2897, 1789,
	754, 2583, 2640, 2880, 1347, 2656, 765, 1256, 1169, 1169,
	2655, 1719, 2322, 2615, 2297, 2285, 210, 210, 2556, 2284,
	210, 2680, 2691, 2679, 2264, 2620, 756, 2707, 1839, 2627,
	1152, 1838, 1836, 1831, 1829, 210, 1827, 1066, 210, 210,
	1066, 210, 1759, 2636, 2633, 2635, 2641, 2723, 1759, 2630,
	1818, 1771, 2688, 1769, 2628, 1760, 2672, 210, 2629, 1748,
	1745, 2688, 1881, 2226, 1732, 2702, 1722, 2675, 981, 1420,
	2384, 1605, 3415, 3340, 2617, 3126, 2618, 1183, 1183, 3125,
	2662, 1708, 1212, 2664, 2665, 2666, 2194, 2699, 2700, 2701,
	2194, 3227, 982, 2704, 2690, 803, 2678, 752, 2192, 2212,
	1066, 2733, 2211, 755, 2697, 2637, 814, 2638, 2718, 2949,
	2194, 1066, 1729, 210, 2734, 2722, 2703, 1866, 1806, 805,
	1298, 2752, 2209, 2566, 1297, 1177, 1183, 1888, 1064, 770,
	772, 1391, 1392, 3272, 3246, 141, 141, 2713, 2714, 2705,
	2706, 756, 2248, 2385, 1427, 1428, 3029, 1427, 1428, 2231,
	2215, 1424, 2217, 1421, 2730, 804, 2761, 2762, 2763, 2593,
	1644, 2735, 3313, 3284, 2928, 525, 2731, 2787, 2923, 2737,
	1430, 2863, 2305, 2103, 1680, 1619, 983, 1611, 3430, 2564,
	3446, 2471, 2472, 1427, 1428, 2186, 2185, 3286, 2774, 1298,
	753, 2835, 1498, 2869, 2772, 1298, 1337, 1429, 2757, 2780,
	1429, 2186, 1336, 2570, 2187, 2040, 210, 2035, 2768, 2770,
	2771, 1619, 2776, 536, 2008, 1378, 2999, 2256, 1377, 2868,
	210, 2764, 1496, 2783, 1494, 2789, 1066, 3462, 3257, 2790,
	3167, 3165, 2857, 3120, 3097, 2792, 3046, 2969, 2957, 999,
	1014, 2934, 2921, 2852, 2800, 2920, 210, 2919, 2896, 683,
	2891, 2802, 2698, 2669, 2667, 2036, 999, 2358, 2827, 2357,
	2037, 2315, 1993, 2289, 2265, 2041, 2042, 1995, 1880, 1879,
	1025, 1001, 1878, 1821, 1820, 2828, 1000, 561, 1819, 1804,
	1782, 1501, 1781, 1777, 1776, 1775, 1773, 1772, 1001, 1003,
	1003, 1000, 210, 1411, 2839, 1390, 1389, 206, 1349, 206,
	206, 1285, 1174, 2905, 206, 2876, 2841, 2842, 1284, 1283,
	1282, 1281, 206, 1190, 2865, 1000, 1280, 141, 1279, 1278,
	1277, 2836, 1275, 2915, 1270, 210, 210, 210, 2085, 2844,
	2845, 2859, 1269, 754, 1268, 1616, 1616, 1214, 1267, 2917,
	1266, 210, 1229, 1228, 1227, 1226, 1225, 1169, 1224, 1223,
	1217, 1236, 1211, 1209, 1208, 206, 206, 2909, 1174, 1057,
	2931, 1056, 1055, 1054, 210, 1027, 1026, 956, 866, 2884,
	206, 1683, 778, 628, 2898, 2942, 2900, 1152, 1272, 210,
	210, 1169, 1169, 1169, 762, 210, 210, 210, 3186, 1384,
	210, 210, 206, 206, 206, 76, 1174, 210, 1219, 2946,
	615, 2945, 2953, 70, 2927, 561, 2941, 206, 2895, 2965,
	1066, 1152, 1789, 2910, 2911, 1923, 2793, 3325, 1619, 2866,
	1152, 2226, 750, 2608, 1868, 1350, 1870, 2533, 2127, 3306,
	3007, 1923, 2803, 2441, 802, 3252, 755, 3147, 2933, 2032,
	2997, 1515, 2311, 72, 832, 854, 939, 3053, 2883, 2943,
	2343, 2342, 821, 1069, 1693, 210, 2947, 832, 860, 1003,
	1706, 2954, 2831, 2955, 2169, 2993, 2064, 1619, 1619, 1615,
	863, 1617, 206, 2959, 756, 865, 2961, 2966, 2967, 2984,
	2968, 2971, 2960, 1619, 1619, 864, 2972, 1618, 206, 2985,
	2976, 1517, 2981, 862, 1614, 2279, 2309, 1264, 739, 2517,
	740, 1697, 1989, 545, 2027, 2436, 1512, 834, 856, 2024,
	2962, 2963, 2964, 1020, 1619, 833, 2538, 210, 2683, 2862,
	3115, 1152, 1909, 2376, 1906, 631, 2468, 1066, 1152, 1066,
	2009, 1012, 2086, 2079, 2075, 1398, 1487, 2310, 1052, 837,
	1987, 1503, 2410, 2551, 2692, 2164, 1917, 1791, 980, 210,
	210, 210, 979, 978, 3331, 3328, 1686, 2179, 1479, 2658,
	3020, 210, 850, 1182, 2518, 2721, 1234, 3271, 210, 1478,
	210, 774, 3262, 210, 210, 210, 3034, 1039, 1038, 1037,
	2591, 3452, 2892, 210, 210, 1169, 177, 1066, 1644, 1169,
	174, 3033, 176, 175, 3031, 3032, 2907, 2643, 3071, 3038,
	18, 3036, 92, 38, 37, 1003, 3039, 1066, 210, 36,
	17, 117, 1169, 1003, 3099, 2553, 116, 3041, 3042, 3051,
	3072, 115, 210, 3093, 1644, 114, 1003, 3049, 3050, 3070,
	1913, 113, 3082, 3083, 112, 1152, 111, 3081, 1152, 110,
	3112, 109, 108, 1616, 210, 3030, 3080, 107, 106, 105,
	1066, 104, 103, 3035, 3088, 102, 101, 100, 99, 98,
	3114, 3089, 97, 96, 95, 94, 3092, 93, 35, 1789,
	3100, 3111, 557, 554, 51, 50, 2680, 1066, 3121, 3127,
	91, 90, 16, 3113, 34, 3119, 3106, 14, 55, 56,
	13, 30, 31, 1000, 1000, 82, 512, 81, 1152, 29,
	2688, 15, 28, 3130, 26, 27, 11, 8, 7, 1152,
	10, 3136, 12, 3159, 3090, 1066, 25, 206, 146, 206,
	145, 75, 206, 210, 144, 210, 3139, 1066, 210, 74,
	143, 142, 1190, 73, 1174, 206, 210, 3144, 1064, 3155,
	1569, 24, 9, 206, 1190, 530, 23, 138, 206, 1190,
	3213, 2929, 69, 140, 561, 139, 3170, 210, 66, 2085,
	2085, 137, 1619, 2081, 136, 3145, 3160, 3161, 67, 210,
	135, 134, 68, 133, 999, 22, 210, 3212, 5, 1066,
	3096, 54, 1169, 3163, 6, 3101, 3131, 210, 2724, 999,
	3204, 3168, 3169, 85, 86, 32, 64, 63, 3190, 62,
	21, 53, 20, 3145, 3216, 168, 1001, 3118, 210, 210,
	3223, 167, 166, 999, 165, 1926, 161, 160, 164, 162,
	3230, 1001, 3202, 163, 1152, 159, 3211, 132, 210, 170,
	169, 1644, 157, 3228, 210, 154, 153, 3234, 3235, 156,
	3224, 3222, 158, 2945, 210, 1001, 3226, 155, 3229, 152,
	3197, 3198, 171, 131, 59, 130, 129, 128, 3221, 2085,
	2085, 2085, 2534, 1000, 3259, 127, 2537, 126, 58, 3250,
	2680, 3255, 3245, 19, 2, 1, 3258, 3268, 0, 0,
	1644, 1644, 3243, 0, 3279, 0, 0, 0, 0, 0,
	210, 0, 820, 1169, 1183, 0, 1644, 1644, 210, 0,
	0, 0, 1169, 1169, 0, 2572, 2573, 0, 3300, 0,
	210, 206, 210, 0, 0, 3216, 0, 0, 0, 3285,
	0, 3291, 0, 0, 0, 0, 3287, 1644, 3292, 3289,
	3310, 0, 0, 0, 210, 0, 3298, 3299, 3303, 0,
	210, 210, 3322, 1066, 3297, 0, 0, 0, 0, 0,
	0, 210, 0, 3330, 3333, 0, 206, 206, 0, 3334,
	0, 210, 3338, 206, 0, 3296, 0, 0, 0, 3304,
	0, 3305, 3327, 0, 0, 3341, 3353, 0, 0, 3335,
	0, 0, 206, 210, 206, 3344, 206, 3347, 0, 3349,
	512, 0, 3352, 0, 0, 0, 0, 0, 3378, 3323,
	0, 0, 1822, 3366, 0, 3365, 3363, 3364, 1152, 1000,
	0, 0, 3380, 0, 0, 3392, 0, 1000, 3394, 210,
	3396, 0, 206, 0, 0, 0, 3401, 0, 3393, 0,
	1000, 1926, 3403, 3398, 0, 0, 1619, 0, 210, 3196,
	0, 0, 0, 0, 561, 3402, 3399, 3400, 0, 0,
	0, 0, 3410, 206, 0, 1174, 206, 3412, 3409, 0,
	0, 0, 210, 3330, 0, 3417, 3333, 3419, 561, 3416,
	3423, 1616, 0, 206, 0, 0, 3429, 0, 206, 206,
	0, 206, 0, 206, 0, 206, 3424, 206, 3426, 0,
	0, 1619, 0, 3437, 3436, 1887, 0, 2311, 3441, 1889,
	3443, 1890, 0, 3445, 3425, 0, 3427, 1616, 3428, 0,
	206, 0, 0, 3449, 0, 3458, 0, 3457, 0, 3459,
	0, 3422, 3450, 3451, 0, 1152, 0, 1152, 0, 545,
	0, 0, 0, 0, 3465, 561, 0, 3467, 3468, 3470,
	3471, 3342, 0, 0, 0, 0, 0, 3474, 0, 3463,
	0, 3464, 0, 3472, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1619, 0, 0, 0,
	2085, 2085, 0, 0, 0, 1644, 0, 0, 0, 0,
	0, 2788, 0, 0, 0, 1152, 0, 0, 0, 0,
	0, 999, 999, 0, 2081, 2081, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1152, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 1428,
	0, 0, 0, 1001, 1001, 0, 0, 0, 0, 0,
	0, 2407, 2408, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1430, 0, 0, 0, 1152, 0,
	2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085,
	2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085, 0,
	2085, 1429, 0, 0, 0, 1152, 0, 0, 0, 1449,
	0, 0, 0, 512, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2081, 2081, 2081, 820, 206, 0,
	0, 820, 0, 0, 0, 2873, 0, 0, 512, 0,
	0, 0, 0, 1152, 1616, 206, 0, 512, 0, 0,
	206, 0, 0, 0, 0, 1152, 2742, 0, 0, 1427,
	1428, 2494, 2495, 2496, 0, 0, 0, 1192, 0, 1196,
	0, 1202, 0, 1452, 1453, 1454, 1455, 0, 0, 0,
	0, 0, 0, 1435, 0, 1430, 832, 0, 0, 0,
	0, 999, 0, 1616, 1616, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3066, 0, 0, 1152, 0, 1616,
	1616, 0, 1429, 0, 1457, 1458, 1459, 0, 0, 0,
	1449, 0, 0, 1001, 2932, 0, 0, 0, 0, 0,
	0, 3063, 0, 530, 3056, 0, 0, 0, 0, 0,
	1616, 0, 0, 0, 0, 0, 0, 0, 3054, 0,
	0, 0, 0, 0, 3058, 1322, 0, 0, 0, 0,
	0, 0, 1325, 0, 0, 0, 0, 1450, 0, 0,
	2202, 1427, 1428, 3064, 0, 0, 0, 0, 206, 1644,
	0, 0, 0, 0, 1452, 1453, 1454, 1455, 206, 0,
	0, 0, 0, 0, 1435, 0, 0, 1430, 0, 0,
	0, 206, 0, 0, 3057, 0, 675, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	206, 2258, 0, 0, 1429, 1457, 1458, 1459, 0, 0,
	0, 60, 678, 677, 1644, 0, 0, 999, 0, 0,
	0, 0, 1456, 61, 0, 999, 206, 0, 1190, 0,
	0, 206, 0, 0, 0, 0, 0, 65, 999, 0,
	1451, 2293, 0, 0, 0, 0, 0, 0, 0, 1001,
	2202, 1152, 512, 0, 2314, 832, 0, 1001, 1450, 0,
	206, 0, 0, 206, 0, 206, 0, 206, 71, 0,
	1001, 0, 1174, 0, 1480, 1481, 1482, 1483, 1484, 0,
	0, 0, 2335, 683, 0, 2202, 1435, 1427, 1428, 1644,
	0, 0, 206, 0, 0, 3037, 3059, 0, 77, 3060,
	0, 0, 0, 0, 1500, 1190, 0, 1190, 87, 0,
	1513, 0, 78, 1430, 0, 2081, 2081, 1457, 1458, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	206, 206, 206, 1456, 206, 0, 3062, 0, 0, 0,
	1429, 0, 0, 0, 0, 0, 0, 0, 3065, 0,
	0, 1451, 2745, 2746, 0, 79, 0, 206, 1440, 1438,
	1439, 1431, 1432, 1433, 1434, 1436, 1437, 0, 1616, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2081, 2081, 2081, 2081, 2081,
	2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081, 2081,
	2081, 2081, 2081, 2081, 0, 2081, 0, 0, 0, 0,
	2471, 2472, 1435, 2489, 2490, 2491, 0, 0, 0, 1563,
	1563, 1563, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811,
	2812, 2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821,
	2822, 3061, 2826, 1457, 1458, 1459, 1190, 0, 0, 0,
	0, 80, 0, 1451, 0, 0, 0, 0, 0, 1440,
	1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 0, 0,
	0, 2486, 0, 0, 3164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 83, 0, 84, 820, 0,
	0, 0, 0, 0, 0, 0, 1450, 0, 2085, 0,
	0, 0, 0, 0, 0, 0, 178, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 679, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	0, 2085, 0, 0, 180, 2477, 0, 0, 206, 0,
	0, 0, 0, 512, 0, 0, 512, 0, 0, 0,
	0, 0, 0, 512, 0, 0, 512, 512, 119, 0,
	0, 2493, 206, 0, 1431, 1432, 1433, 1434, 1436, 1437,
	151, 0, 0, 0, 1190, 0, 0, 0, 179, 1451,
	0, 0, 0, 0, 0, 0, 0, 2492, 172, 1190,
	0, 0, 0, 0, 0, 0, 173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2202, 2202, 206,
	0, 0, 0, 2202, 0, 0, 2595, 676, 0, 2487,
	2085, 0, 1616, 0, 2202, 2595, 2202, 2595, 2595, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 206, 206,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 206,
	0, 0, 1174, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1616, 0, 0,
	2646, 0, 0, 2648, 2651, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 206, 1438, 1439,
	1431, 1432, 1433, 1434, 1436, 1437, 0, 0, 0, 0,
	2293, 0, 2488, 1174, 0, 0, 0, 0, 0, 2202,
	0, 512, 0, 0, 0, 0, 0, 0, 2202, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 206, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1616, 0, 0, 0, 0, 0, 0, 0,
	0, 206, 2293, 0, 0, 2293, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2729, 0, 0, 1174, 206, 0, 206, 0, 0, 0,
	0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471, 1472,
	0, 0, 206, 0, 0, 0, 0, 0, 0, 0,
	1463, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	0, 1476, 0, 2483, 2484, 2485, 0, 0, 0, 0,
	2482, 2480, 2481, 2473, 2474, 2475, 2476, 2478, 2479, 0,
	0, 0, 0, 0, 1429, 0, 0, 1907, 0, 1912,
	0, 0, 1449, 0, 0, 1919, 0, 0, 2785, 0,
	1446, 0, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955,
	1956, 1957, 1958, 1959, 1960, 1961, 1962, 0, 1968, 0,
	1970, 1971, 1972, 1973, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 1453, 1454, 1455,
	1997, 0, 0, 2081, 0, 0, 1435, 0, 0, 0,
	0, 0, 0, 0, 0, 1500, 0, 0, 0, 2022,
	206, 206, 0, 0, 0, 0, 0, 0, 0, 1467,
	0, 512, 1477, 0, 0, 920, 0, 1457, 1458, 1459,
	3152, 0, 0, 0, 0, 512, 2081, 0, 0, 0,
	2054, 2055, 2056, 2057, 2058, 2059, 2060, 0, 1473, 0,
	1474, 2077, 0, 2088, 2090, 2095, 0, 1444, 1445, 0,
	0, 1190, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 0, 1465, 3178, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 561, 0, 207,
	0, 0, 0, 1464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2081, 0, 0, 125, 0,
	0, 0, 0, 0, 60, 0, 0, 0, 0, 0,
	2925, 206, 206, 0, 0, 0, 61, 120, 0, 0,
	0, 0, 0, 0, 0, 1456, 206, 0, 0, 0,
	65, 0, 3249, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1451, 0, 40, 122, 0, 0, 2202,
	206, 0, 0, 0, 0, 0, 0, 0, 0, 39,
	886, 71, 0, 0, 2335, 2335, 0, 0, 1468, 0,
	683, 683, 2202, 0, 0, 2293, 2293, 0, 0, 0,
	0, 42, 206, 0, 0, 0, 43, 0, 0, 0,
	0, 77, 0, 0, 123, 0, 0, 0, 0, 41,
	205, 87, 0, 0, 0, 78, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1427, 1428, 0,
	0, 0, 589, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 0, 0, 0, 2260,
	3008, 2262, 0, 1430, 589, 0, 0, 0, 79, 0,
	0, 1466, 0, 0, 1441, 1442, 1448, 1447, 1443, 1469,
	0, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437,
	1429, 0, 0, 0, 3016, 0, 0, 3015, 1449, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 206, 0, 0, 0,
	0, 0, 1190, 0, 206, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 0,
	0, 0, 0, 0, 0, 2396, 0, 0, 0, 0,
	0, 0, 0, 0, 2202, 2202, 2202, 0, 0, 0,
	0, 1002, 1452, 1453, 1454, 1455, 1190, 0, 0, 0,
	0, 0, 1435, 2202, 80, 2595, 0, 0, 1190, 1190,
	206, 0, 46, 0, 0, 0, 0, 0, 206, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 57, 0, 1457, 1458, 1459, 49, 147, 83, 0,
	84, 0, 47, 206, 0, 0, 124, 0, 0, 0,
	0, 0, 48, 0, 0, 0, 0, 2202, 0, 178,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 0, 0, 118, 0, 0, 0, 0, 1190,
	0, 0, 0, 121, 2390, 2391, 1450, 0, 0, 0,
	2397, 0, 0, 0, 0, 0, 0, 180, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2411,
	2412, 0, 0, 0, 0, 2022, 0, 0, 0, 0,
	0, 119, 0, 0, 2419, 1498, 0, 0, 60, 0,
	0, 0, 0, 151, 0, 0, 0, 0, 0, 0,
	61, 179, 0, 0, 60, 0, 0, 0, 0, 0,
	2439, 172, 0, 0, 65, 0, 61, 0, 2202, 173,
	2595, 1456, 0, 3172, 2454, 0, 0, 0, 0, 0,
	65, 206, 2471, 2472, 0, 2489, 2490, 2491, 0, 1451,
	150, 0, 0, 3, 0, 71, 0, 0, 0, 0,
	0, 2989, 561, 0, 0, 0, 0, 0, 0, 0,
	0, 71, 0, 0, 2651, 0, 0, 0, 0, 0,
	0, 3218, 2095, 2095, 2095, 77, 0, 207, 1071, 207,
	207, 1071, 1190, 1071, 207, 87, 0, 1563, 0, 78,
	0, 77, 207, 2486, 0, 2523, 0, 0, 0, 0,
	0, 87, 0, 206, 206, 78, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2785, 0, 0, 995, 0, 0, 512,
	0, 0, 79, 1071, 1071, 207, 207, 0, 0, 3172,
	0, 0, 0, 0, 0, 0, 0, 0, 79, 0,
	207, 0, 0, 0, 0, 0, 820, 1440, 1438, 1439,
	1431, 1432, 1433, 1434, 1436, 1437, 201, 2477, 0, 820,
	0, 0, 207, 207, 207, 0, 0, 1071, 1071, 0,
	0, 0, 1071, 0, 0, 206, 1071, 207, 0, 0,
	0, 0, 0, 2595, 0, 2611, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1190, 0, 1190, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2492,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3318,
	0, 0, 0, 1071, 0, 1190, 206, 0, 80, 0,
	0, 0, 205, 0, 205, 205, 206, 0, 0, 205,
	0, 2487, 207, 0, 80, 0, 206, 589, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 147, 83, 0, 84, 0, 0, 0, 2785, 0,
	0, 2681, 0, 0, 0, 0, 0, 147, 83, 0,
	84, 0, 0, 178, 0, 0, 0, 0, 0, 0,
	205, 205, 0, 0, 0, 679, 0, 0, 118, 178,
	0, 0, 0, 0, 2202, 205, 0, 0, 0, 0,
	0, 679, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 180, 0, 3172, 0, 0, 0, 205, 205, 205,
	0, 0, 0, 0, 2488, 0, 0, 180, 0, 0,
	0, 0, 205, 0, 0, 119, 0, 1190, 0, 2736,
	0, 0, 0, 1919, 0, 0, 0, 151, 0, 2740,
	2741, 119, 0, 2744, 0, 179, 0, 2747, 0, 0,
	0, 0, 0, 151, 0, 172, 2751, 0, 0, 0,
	0, 179, 0, 173, 0, 2758, 0, 0, 2523, 0,
	0, 172, 0, 0, 0, 0, 0, 0, 0, 173,
	0, 0, 0, 0, 150, 0, 0, 205, 0, 2778,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 0, 0, 205, 0, 211, 0, 0, 2794, 2795,
	0, 2796, 2797, 2798, 0, 0, 2799, 0, 0, 0,
	2801, 0, 0, 0, 0, 2483, 2484, 2485, 0, 0,
	0, 0, 2482, 2480, 2481, 2473, 2474, 2475, 2476, 2478,
	2479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2829, 2830, 0, 1427, 1428, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 582, 0, 60,
	0, 0, 207, 0, 0, 0, 0, 0, 0, 2847,
	1430, 61, 0, 1071, 0, 207, 207, 0, 0, 582,
	0, 0, 1071, 207, 0, 65, 0, 0, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 1429, 0, 0,
	0, 0, 1427, 1428, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 60, 0, 1071,
	0, 0, 2877, 0, 0, 0, 0, 0, 1430, 61,
	0, 0, 0, 0, 0, 0, 0, 2885, 2888, 0,
	0, 0, 0, 65, 0, 0, 77, 0, 0, 0,
	0, 0, 2389, 0, 0, 1429, 87, 0, 0, 0,
	78, 2906, 0, 0, 0, 0, 0, 0, 0, 1452,
	1453, 1454, 1455, 0, 71, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 77, 0, 0, 0, 0, 0,
	1457, 1458, 1459, 0, 87, 0, 0, 0, 78, 0,
	0, 0, 1586, 0, 1002, 1563, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 2956, 1435, 0, 0,
	205, 1586, 0, 0, 0, 0, 0, 0, 589, 0,
	1071, 207, 0, 589, 0, 0, 0, 1071, 1061, 0,
	0, 79, 0, 1450, 0, 1181, 0, 0, 1457, 1458,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2986, 2987, 0, 0, 0, 0, 2991,
	2992, 0, 0, 0, 2995, 2996, 207, 207, 0, 0,
	0, 3000, 0, 207, 0, 0, 0, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3005, 1450, 207, 0, 207, 0, 207, 3009, 0, 0,
	0, 1265, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 147, 83, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 1289, 1289, 1289, 1451, 0, 0, 0,
	0, 0, 207, 0, 178, 0, 0, 80, 1321, 0,
	0, 0, 0, 0, 0, 0, 679, 0, 0, 118,
	0, 1071, 0, 1071, 0, 1071, 0, 0, 0, 0,
	1071, 0, 0, 207, 0, 0, 207, 0, 0, 0,
	147, 83, 180, 84, 0, 1071, 1071, 0, 0, 0,
	0, 0, 0, 207, 1451, 0, 589, 0, 207, 207,
	0, 207, 178, 207, 0, 207, 119, 207, 0, 0,
	2888, 0, 0, 1383, 679, 0, 0, 118, 151, 2471,
	2472, 0, 2489, 2490, 2491, 0, 179, 0, 0, 0,
	207, 0, 0, 0, 0, 0, 172, 0, 2754, 0,
	180, 205, 205, 0, 173, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 1440, 1438, 1439, 1431, 1432, 1433,
	1434, 1436, 1437, 0, 119, 1317, 0, 205, 0, 205,
	0, 205, 0, 0, 0, 1071, 151, 0, 0, 0,
	2486, 0, 0, 0, 179, 0, 0, 0, 0, 0,
	0, 2888, 0, 0, 172, 0, 0, 0, 0, 0,
	0, 0, 173, 0, 0, 0, 0, 205, 0, 3140,
	3141, 3142, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436,
	1437, 0, 0, 1315, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3150, 3151, 0, 205, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 1067, 3158,
	0, 1170, 0, 1067, 2477, 0, 0, 0, 205, 0,
	1071, 0, 0, 589, 205, 0, 205, 0, 205, 0,
	205, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2888, 0, 0, 0, 0, 205, 0, 0, 3195, 0,
	0, 0, 0, 1170, 1170, 0, 2492, 0, 820, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1071, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2487, 0,
	207, 2471, 2472, 1071, 2489, 2490, 2491, 1170, 1170, 2888,
	2888, 0, 1170, 0, 0, 0, 1170, 0, 0, 0,
	0, 0, 0, 1593, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1602, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2471, 2472, 0,
	2489, 2490, 2491, 0, 0, 0, 0, 0, 3261, 0,
	0, 3264, 2486, 1170, 0, 0, 2753, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	890, 2488, 0, 0, 0, 0, 0, 0, 2888, 0,
	0, 2888, 0, 0, 0, 0, 0, 0, 2486, 0,
	0, 0, 0, 0, 0, 1071, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 0, 0, 0, 0, 0, 2477, 0, 207, 0,
	0, 0, 0, 1002, 0, 0, 0, 0, 855, 89,
	0, 207, 0, 0, 1071, 0, 0, 820, 0, 0,
	1002, 0, 0, 0, 0, 205, 207, 1071, 0, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2477, 0, 0, 0, 0, 0, 3362, 3362,
	3362, 0, 0, 0, 0, 0, 207, 0, 0, 0,
	0, 207, 2483, 2484, 2485, 0, 0, 3381, 0, 2482,
	2480, 2481, 2473, 2474, 2475, 2476, 2478, 2479, 0, 0,
	2487, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	207, 0, 0, 207, 2492, 207, 0, 207, 0, 0,
	3362, 0, 0, 1071, 1071, 1071, 0, 1071, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1784, 0, 0,
	0, 0, 207, 0, 1796, 665, 2487, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2888, 0, 2888, 0,
	0, 0, 0, 1265, 0, 1812, 0, 1812, 647, 0,
	795, 0, 0, 205, 0, 0, 0, 0, 0, 815,
	207, 207, 207, 205, 207, 0, 0, 0, 0, 0,
	0, 3362, 0, 2488, 0, 0, 205, 0, 0, 648,
	0, 0, 0, 1181, 0, 0, 0, 207, 649, 990,
	0, 205, 0, 0, 0, 589, 0, 0, 0, 0,
	0, 0, 0, 1067, 650, 0, 0, 0, 0, 0,
	0, 0, 1170, 582, 1796, 0, 0, 1854, 582, 2488,
	670, 205, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 1867, 651, 0, 0, 0, 0,
	1873, 0, 1874, 0, 1875, 0, 1876, 0, 1877, 1067,
	0, 0, 0, 652, 0, 205, 0, 0, 205, 0,
	205, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 1892, 0, 653, 0, 0, 654, 0, 0, 0,
	0, 0, 0, 0, 2483, 2484, 2485, 205, 0, 0,
	0, 2482, 2480, 2481, 2473, 2474, 2475, 2476, 2478, 2479,
	0, 0, 0, 669, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 205, 205, 205, 0, 205,
	2483, 2484, 2485, 0, 0, 0, 0, 2482, 2480, 2481,
	2473, 2474, 2475, 2476, 2478, 2479, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1071, 0, 0, 0, 0, 0,
	1170, 0, 0, 0, 0, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 656, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1071, 0,
	0, 673, 657, 0, 0, 0, 0, 1071, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	672, 0, 0, 0, 0, 0, 0, 658, 0, 0,
	659, 0, 0, 0, 0, 0, 667, 0, 0, 207,
	0, 0, 0, 660, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2145, 0, 0, 0, 0, 0, 0, 207, 207,
	207, 0, 661, 668, 0, 0, 0, 207, 0, 0,
	0, 0, 662, 0, 0, 0, 0, 0, 0, 207,
	1071, 1170, 0, 1170, 664, 1170, 0, 0, 1071, 663,
	1170, 0, 0, 1068, 0, 1071, 1171, 0, 1068, 0,
	671, 0, 0, 0, 0, 1170, 1170, 0, 1002, 0,
	0, 666, 0, 207, 0, 0, 1071, 207, 582, 1071,
	1071, 1071, 0, 1002, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1586, 1171, 1171,
	0, 0, 0, 0, 0, 0, 0, 207, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1071, 1071, 0, 89, 0, 89, 0,
	89, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1171, 1171, 205, 1067, 0, 1171, 0, 0,
	0, 1171, 1071, 0, 207, 1071, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1181, 0, 0,
	0, 0, 207, 205, 205, 205, 0, 0, 0, 0,
	0, 0, 1586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 2276, 1171, 0,
	0, 0, 1796, 0, 0, 815, 89, 89, 0, 0,
	0, 722, 0, 752, 89, 1071, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 1071, 0, 205, 0,
	1067, 2316, 205, 0, 1289, 729, 1289, 0, 1289, 0,
	0, 0, 0, 0, 0, 0, 0, 758, 727, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2355, 0, 0, 0, 0, 0, 0,
	0, 728, 205, 205, 0, 0, 730, 0, 0, 0,
	759, 0, 0, 0, 0, 0, 0, 736, 737, 0,
	0, 0, 0, 746, 0, 0, 205, 1067, 0, 0,
	0, 2371, 1181, 2373, 0, 0, 753, 731, 0, 0,
	0, 0, 0, 1067, 0, 0, 0, 0, 0, 205,
	0, 205, 0, 0, 0, 0, 0, 0, 2387, 0,
	0, 0, 0, 0, 751, 0, 0, 205, 0, 0,
	0, 1071, 0, 0, 0, 0, 795, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1490, 732, 0, 0, 0, 0,
	0, 0, 0, 726, 0, 0, 0, 0, 0, 0,
	0, 0, 1499, 0, 0, 0, 1505, 0, 0, 733,
	734, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 735,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 757, 0, 0, 0, 0, 0,
	0, 207, 207, 0, 0, 0, 0, 0, 0, 754,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 0,
	0, 0, 1071, 0, 1170, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1002, 1002, 1067, 1068, 0,
	0, 0, 0, 0, 0, 0, 0, 1171, 0, 0,
	0, 0, 0, 0, 0, 0, 1071, 1071, 1071, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 0, 0, 0, 89, 0, 0,
	1584, 0, 1587, 0, 1068, 1071, 0, 748, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 742, 0, 0,
	0, 0, 0, 743, 0, 0, 0, 0, 0, 0,
	724, 0, 755, 1170, 1170, 1170, 0, 1170, 0, 0,
	0, 0, 0, 0, 0, 0, 725, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 744, 0, 0, 0,
	741, 0, 0, 0, 760, 761, 0, 0, 0, 0,
	756, 0, 0, 0, 0, 0, 0, 0, 745, 0,
	2587, 0, 0, 0, 0, 0, 205, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 747, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 2623,
	1181, 2276, 0, 0, 0, 0, 0, 0, 0, 749,
	0, 0, 1071, 0, 1071, 1002, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1171, 0, 0, 0, 0,
	0, 0, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 2659, 0, 0, 0, 2663, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 207, 207,
	1071, 0, 1071, 0, 1071, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1071, 207, 0, 0, 0, 1071, 1181, 1181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2717, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1071, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2732, 0, 1181, 0, 0,
	0, 0, 0, 0, 0, 0, 1171, 0, 1171, 0,
	1171, 1002, 1071, 2738, 0, 1171, 0, 0, 0, 1002,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1171, 1171, 1586, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1067, 0, 0, 0, 0, 0,
	1071, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1071, 0, 815, 0, 815, 0, 0, 0,
	0, 207, 0, 0, 0, 205, 0, 0, 1067, 0,
	0, 0, 0, 205, 205, 0, 0, 1067, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 205, 0,
	0, 0, 0, 0, 1071, 0, 0, 1071, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	606, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 207, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 607, 626, 0, 0, 0, 0, 0, 795, 0,
	0, 795, 795, 0, 0, 0, 0, 0, 0, 0,
	1170, 0, 0, 608, 0, 0, 609, 0, 1067, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 632, 0, 0, 1068, 0, 0, 610, 0,
	0, 0, 0, 0, 0, 0, 1170, 630, 0, 1170,
	1170, 1170, 0, 0, 0, 207, 1986, 0, 1071, 0,
	0, 0, 0, 0, 0, 611, 205, 1071, 1071, 0,
	815, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1499, 0, 612, 0, 1499, 613, 636,
	0, 0, 0, 639, 0, 0, 0, 0, 0, 0,
	0, 0, 1068, 1170, 1170, 0, 207, 0, 1071, 0,
	0, 0, 2926, 0, 0, 0, 207, 0, 1068, 0,
	0, 0, 0, 0, 0, 0, 207, 2935, 0, 0,
	0, 0, 1067, 0, 0, 1067, 0, 0, 205, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 990, 0, 0, 0, 0, 0, 0, 0, 0,
	635, 0, 0, 0, 0, 0, 0, 616, 1587, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2975, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 1067, 0, 0, 614, 0,
	0, 0, 0, 0, 0, 0, 1067, 617, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 618, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 619, 0, 0, 0, 0, 0, 0, 1171,
	0, 205, 0, 0, 0, 620, 0, 0, 0, 0,
	0, 205, 1068, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 625, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 621, 0, 0, 634, 0, 633,
	0, 0, 0, 0, 622, 0, 0, 0, 0, 0,
	0, 1067, 0, 0, 0, 0, 623, 0, 0, 0,
	0, 629, 0, 89, 0, 0, 640, 0, 637, 0,
	0, 0, 627, 0, 0, 0, 0, 0, 89, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 1171, 1171,
	1171, 3084, 1171, 0, 0, 0, 0, 0, 0, 2276,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 89, 0, 3107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1170, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1170, 1170, 1170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1067, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3179, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471,
	1472, 0, 0, 0, 0, 0, 1986, 0, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 1430, 0,
	0, 0, 1476, 0, 0, 0, 0, 1499, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1429, 0, 0, 0, 0,
	0, 0, 0, 1449, 3242, 1181, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1067, 0, 1067, 0, 0, 0, 0, 1068,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 1453, 1454,
	1455, 0, 0, 1068, 0, 0, 0, 1435, 0, 0,
	0, 0, 1068, 0, 0, 0, 3288, 0, 0, 0,
	1170, 0, 1067, 0, 1170, 0, 990, 0, 0, 0,
	1467, 0, 0, 1477, 0, 0, 0, 0, 1457, 1458,
	1459, 990, 1067, 0, 0, 0, 0, 1170, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 1474, 0, 0, 0, 0, 0, 3324, 1444, 1445,
	0, 0, 0, 0, 0, 0, 0, 3339, 0, 0,
	0, 0, 0, 1465, 0, 1067, 0, 3346, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1171, 0, 0, 0, 1475,
	0, 0, 1067, 1068, 0, 0, 0, 0, 0, 0,
	1068, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 0, 89, 0,
	0, 1171, 0, 0, 1171, 1171, 1171, 0, 0, 0,
	1067, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1067, 0, 0, 0, 1456, 89, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1171, 1171,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1468,
	0, 0, 0, 0, 1067, 0, 0, 1170, 0, 0,
	0, 0, 815, 0, 0, 0, 0, 1068, 0, 0,
	1068, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1068, 0, 1466, 0, 0, 1441, 1442, 1448, 1447, 1443,
	1469, 1068, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436,
	1437, 0, 0, 0, 0, 2459, 0, 0, 2460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1170, 0,
	0, 0, 0, 0, 0, 0, 0, 1170, 1170, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 1428,
	0, 1460, 1461, 1462, 1470, 1471, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1463, 1067, 0,
	0, 0, 0, 0, 1430, 0, 0, 0, 1476, 0,
	0, 0, 0, 0, 0, 1427, 1428, 0, 1460, 1461,
	1462, 1470, 1471, 1472, 0, 0, 0, 0, 0, 0,
	0, 1429, 0, 0, 1463, 0, 1068, 0, 0, 1449,
	0, 1430, 0, 0, 0, 1476, 0, 1446, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 990, 990, 0, 0, 0, 1429, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 1452, 1453, 1454, 1455, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 1477,
	1452, 1453, 1454, 1455, 1457, 1458, 1459, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 1171, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 1474, 0, 0,
	0, 0, 0, 1467, 1444, 1445, 1477, 0, 0, 0,
	0, 1457, 1458, 1459, 0, 0, 0, 0, 0, 1465,
	0, 1171, 1171, 1171, 0, 0, 0, 1450, 0, 0,
	0, 0, 1473, 0, 1474, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 1475, 0, 0, 0, 0,
	1068, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	1464, 0, 0, 990, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 1468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 0, 1068,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 990,
	0, 0, 0, 0, 0, 0, 0, 990, 0, 0,
	0, 0, 0, 0, 0, 1171, 0, 1068, 1466, 1171,
	0, 1441, 1442, 1448, 1447, 1443, 1469, 0, 1440, 1438,
	1439, 1431, 1432, 1433, 1434, 1436, 1437, 1068, 0, 0,
	0, 2018, 1171, 0, 2019, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 1441, 1442,
	1448, 1447, 1443, 1469, 0, 1440, 1438, 1439, 1431, 1432,
	1433, 1434, 1436, 1437, 0, 0, 0, 0, 0, 0,
	1068, 3014, 89, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1068, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1068, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1068,
	0, 0, 1171, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1986, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1171, 0, 0, 0, 0, 0, 0,
	0, 0, 1171, 1171, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 1068, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 1072,
	220, 1073, 1074, 1075, 1076, 463, 1077, 1078, 1079, 1080,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 1081, 228, 229, 230, 231, 232, 233, 1082, 1083,
	234, 468, 469, 470, 1084, 235, 471, 1085, 1070, 1086,
	236, 237, 238, 239, 240, 0, 1087, 242, 243, 244,
	241, 1088, 245, 89, 246, 247, 248, 1089, 941, 249,
	250, 1090, 1091, 1093, 1092, 1094, 1095, 1096, 251, 252,
	253, 254, 255, 256, 472, 473, 1097, 257, 1098, 259,
	258, 1099, 260, 1100, 1101, 261, 262, 263, 1102, 264,
	1103, 265, 266, 1104, 474, 267, 1105, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 1106, 212, 1107, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 1108, 283, 1109, 1110, 942, 284, 285, 1111, 286,
	478, 1112, 479, 287, 1113, 288, 289, 290, 291, 480,
	481, 482, 944, 292, 293, 1114, 294, 295, 296, 298,
	0, 0, 0, 213, 297, 299, 306, 1115, 943, 300,
	483, 302, 301, 303, 304, 305, 484, 1116, 485, 1117,
	307, 945, 486, 946, 308, 309, 310, 947, 311, 312,
	0, 0, 313, 314, 315, 316, 1118, 318, 317, 1119,
	319, 487, 948, 320, 321, 949, 1120, 322, 323, 1121,
	1122, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 950, 336, 337, 339, 338, 1123,
	214, 951, 1124, 488, 489, 340, 341, 1125, 342, 343,
	344, 1126, 1127, 346, 347, 348, 1128, 1129, 349, 490,
	952, 350, 953, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 1130, 358, 359, 492, 360, 493, 361, 1131,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 1132, 371, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 1133, 385, 954,
	386, 387, 388, 389, 495, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 1134, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 1135, 412, 392, 393,
	413, 955, 414, 496, 415, 416, 1136, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 497, 1137,
	428, 429, 427, 1138, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 1139, 498, 499, 500, 501, 1140, 443,
	1141, 437, 438, 502, 439, 503, 1142, 440, 441, 442,
	0, 444, 445, 1143, 1144, 446, 447, 448, 449, 451,
	1145, 452, 1146, 450, 453, 454, 455, 504, 505, 506,
	1147, 457, 456, 507, 1148, 1149, 1150, 1151, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1065, 0, 0, 0,
	0, 0, 0, 0, 2132, 0, 0, 0, 0, 0,
	0, 0, 2133, 215, 216, 217, 218, 219, 1072, 220,
	1073, 1074, 1075, 1076, 463, 1077, 1078, 1079, 1080, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	1081, 228, 229, 230, 231, 232, 233, 1082, 1083, 234,
	468, 469, 470, 1084, 235, 471, 1085, 1070, 1086, 236,
	237, 238, 239, 240, 0, 1087, 242, 243, 244, 241,
	1088, 245, 0, 246, 247, 248, 1089, 941, 249, 250,
	1090, 1091, 1093, 1092, 1094, 1095, 1096, 251, 252, 253,
	254, 255, 256, 472, 473, 1097, 257, 1098, 259, 258,
	1099, 260, 1100, 1101, 261, 262, 263, 1102, 264, 1103,
	265, 266, 1104, 474, 267, 1105, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 1106, 212, 1107, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	1108, 283, 1109, 1110, 942, 284, 285, 1111, 286, 478,
	1112, 479, 287, 1113, 288, 289, 290, 291, 480, 481,
	482, 944, 292, 293, 1114, 294, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 1115, 943, 300, 483,
	302, 301, 303, 304, 305, 484, 1116, 485, 1117, 307,
	945, 486, 946, 308, 309, 310, 947, 311, 312, 0,
	0, 313, 314, 315, 316, 1118, 318, 317, 1119, 319,
	487, 948, 320, 321, 949, 1120, 322, 323, 1121, 1122,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 950, 336, 337, 339, 338, 1123, 214,
	951, 1124, 488, 489, 340, 341, 1125, 342, 343, 344,
	1126, 1127, 346, 347, 348, 1128, 1129, 349, 490, 952,
	350, 953, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 1130, 358, 359, 492, 360, 493, 361, 1131, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	1132, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 1133, 385, 954, 386,
	387, 388, 389, 495, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 1134, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 1135, 412, 392, 393, 413,
	955, 414, 496, 415, 416, 1136, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 497, 1137, 428,
	429, 427, 1138, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 1139, 498, 499, 500, 501, 1140, 443, 1141,
	437, 438, 502, 439, 503, 1142, 440, 441, 442, 0,
	444, 445, 1143, 1144, 446, 447, 448, 449, 451, 1145,
	452, 1146, 450, 453, 454, 455, 504, 505, 506, 1147,
	457, 456, 507, 1148, 1149, 1150, 1151, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 3040, 215, 216, 217, 218, 219, 1072,
	220, 1073, 1074, 1075, 1076, 463, 1077, 1078, 1079, 1080,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 1081, 228, 229, 230, 231, 232, 233, 1082, 1083,
	234, 468, 469, 470, 1084, 235, 471, 1085, 1070, 1086,
	236, 237, 238, 239, 240, 0, 1087, 242, 243, 244,
	241, 1088, 245, 0, 246, 247, 248, 1089, 941, 249,
	250, 1090, 1091, 1093, 1092, 1094, 1095, 1096, 251, 252,
	253, 254, 255, 256, 472, 473, 1097, 257, 1098, 259,
	258, 1099, 260, 1100, 1101, 261, 262, 263, 1102, 264,
	1103, 265, 266, 1104, 474, 267, 1105, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 1106, 212, 1107, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 1108, 283, 1109, 1110, 942, 284, 285, 1111, 286,
	478, 1112, 479, 287, 1113, 288, 289, 290, 291, 480,
	481, 482, 944, 292, 293, 1114, 294, 295, 296, 298,
	0, 0, 0, 213, 297, 299, 306, 1115, 943, 300,
	483, 302, 301, 303, 304, 305, 484, 1116, 485, 1117,
	307, 945, 486, 946, 308, 309, 310, 947, 311, 312,
	0, 0, 313, 314, 315, 316, 1118, 318, 317, 1119,
	319, 487, 948, 320, 321, 949, 1120, 322, 323, 1121,
	1122, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 950, 336, 337, 339, 338, 1123,
	214, 951, 1124, 488, 489, 340, 341, 1125, 342, 343,
	344, 1126, 1127, 346, 347, 348, 1128, 1129, 349, 490,
	952, 350, 953, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 1130, 358, 359, 492, 360, 493, 361, 1131,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 1132, 371, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 1133, 385, 954,
	386, 387, 388, 389, 495, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 1134, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 1135, 412, 392, 393,
	413, 955, 414, 496, 415, 416, 1136, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 497, 1137,
	428, 429, 427, 1138, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 1139, 498, 499, 500, 501, 1140, 443,
	1141, 437, 438, 502, 439, 503, 1142, 440, 441, 442,
	0, 444, 445, 1143, 1144, 446, 447, 448, 449, 451,
	1145, 452, 1146, 450, 453, 454, 455, 504, 505, 506,
	1147, 457, 456, 507, 1148, 1149, 1150, 1151, 458, 459,
	508, 460, 461, 462, 1065, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3146,
	0, 215, 216, 217, 218, 219, 1072, 220, 1073, 1074,
	1075, 1076, 463, 1077, 1078, 1079, 1080, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 1081, 228,
	229, 230, 231, 232, 233, 1082, 1083, 234, 468, 469,
	470, 1084, 235, 471, 1085, 1070, 1086, 236, 237, 238,
	239, 240, 0, 1087, 242, 243, 244, 241, 1088, 245,
	0, 246, 247, 248, 1089, 941, 249, 250, 1090, 1091,
	1093, 1092, 1094, 1095, 1096, 251, 252, 253, 254, 255,
	256, 472, 473, 1097, 257, 1098, 259, 258, 1099, 260,
	1100, 1101, 261, 262, 263, 1102, 264, 1103, 265, 266,
	1104, 474, 267, 1105, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 1106, 212, 1107, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 1108, 283,
	1109, 1110, 942, 284, 285, 1111, 286, 478, 1112, 479,
	287, 1113, 288, 289, 290, 291, 480, 481, 482, 944,
	292, 293, 1114, 294, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 1115, 943, 300, 483, 302, 301,
	303, 304, 305, 484, 1116, 485, 1117, 307, 945, 486,
	946, 308, 309, 310, 947, 311, 312, 0, 0, 313,
	314, 315, 316, 1118, 318, 317, 1119, 319, 487, 948,
	320, 321, 949, 1120, 322, 323, 1121, 1122, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 950, 336, 337, 339, 338, 1123, 214, 951, 1124,
	488, 489, 340, 341, 1125, 342, 343, 344, 1126, 1127,
	346, 347, 348, 1128, 1129, 349, 490, 952, 350, 953,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 1130,
	358, 359, 492, 360, 493, 361, 1131, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 1132, 371,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 1133, 385, 954, 386, 387, 388,
	389, 495, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 1134, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 1135, 412, 392, 393, 413, 955, 414,
	496, 415, 416, 1136, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 497, 1137, 428, 429, 427,
	1138, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	1139, 498, 499, 500, 501, 1140, 443, 1141, 437, 438,
	502, 439, 503, 1142, 440, 441, 442, 0, 444, 445,
	1143, 1144, 446, 447, 448, 449, 451, 1145, 452, 1146,
	450, 453, 454, 455, 504, 505, 506, 1147, 457, 456,
	507, 1148, 1149, 1150, 1151, 458, 459, 508, 460, 461,
	462, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2781, 0, 215, 216,
	217, 218, 219, 1072, 220, 1073, 1074, 1075, 1076, 463,
	1077, 1078, 1079, 1080, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 1081, 228, 229, 230, 231,
	232, 233, 1082, 1083, 234, 468, 469, 470, 1084, 235,
	471, 1085, 1070, 1086, 236, 237, 238, 239, 240, 0,
	1087, 242, 243, 244, 241, 1088, 245, 0, 246, 247,
	248, 1089, 941, 249, 250, 1090, 1091, 1093, 1092, 1094,
	1095, 1096, 251, 252, 253, 254, 255, 256, 472, 473,
	1097, 257, 1098, 259, 258, 1099, 260, 1100, 1101, 261,
	262, 263, 1102, 264, 1103, 265, 266, 1104, 474, 267,
	1105, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	1106, 212, 1107, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 1108, 283, 1109, 1110, 942,
	284, 285, 1111, 286, 478, 1112, 479, 287, 1113, 288,
	289, 290, 291, 480, 481, 482, 944, 292, 293, 1114,
	294, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 1115, 943, 300, 483, 302, 301, 303, 304, 305,
	484, 1116, 485, 1117, 307, 945, 486, 946, 308, 309,
	310, 947, 311, 312, 0, 0, 313, 314, 315, 316,
	1118, 318, 317, 1119, 319, 487, 948, 320, 321, 949,
	1120, 322, 323, 1121, 1122, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 950, 336,
	337, 339, 338, 1123, 214, 951, 1124, 488, 489, 340,
	341, 1125, 342, 343, 344, 1126, 1127, 346, 347, 348,
	1128, 1129, 349, 490, 952, 350, 953, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 1130, 358, 359, 492,
	360, 493, 361, 1131, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 1132, 371, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 1133, 385, 954, 386, 387, 388, 389, 495, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 1134,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	1135, 412, 392, 393, 413, 955, 414, 496, 415, 416,
	1136, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 497, 1137, 428, 429, 427, 1138, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 1139, 498, 499,
	500, 501, 1140, 443, 1141, 437, 438, 502, 439, 503,
	1142, 440, 441, 442, 0, 444, 445, 1143, 1144, 446,
	447, 448, 449, 451, 1145, 452, 1146, 450, 453, 454,
	455, 504, 505, 506, 1147, 457, 456, 507, 1148, 1149,
	1150, 1151, 458, 459, 508, 460, 461, 462, 1065, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2773, 0, 215, 216, 217, 218, 219,
	1072, 220, 1073, 1074, 1075, 1076, 463, 1077, 1078, 1079,
	1080, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 1081, 228, 229, 230, 231, 232, 233, 1082,
	1083, 234, 468, 469, 470, 1084, 235, 471, 1085, 1070,
	1086, 236, 237, 238, 239, 240, 0, 1087, 242, 243,
	244, 241, 1088, 245, 0, 246, 247, 248, 1089, 941,
	249, 250, 1090, 1091, 1093, 1092, 1094, 1095, 1096, 251,
	252, 253, 254, 255, 256, 472, 473, 1097, 257, 1098,
	259, 258, 1099, 260, 1100, 1101, 261, 262, 263, 1102,
	264, 1103, 265, 266, 1104, 474, 267, 1105, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 1106, 212, 1107,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 1108, 283, 1109, 1110, 942, 284, 285, 1111,
	286, 478, 1112, 479, 287, 1113, 288, 289, 290, 291,
	480, 481, 482, 944, 292, 293, 1114, 294, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 1115, 943,
	300, 483, 302, 301, 303, 304, 305, 484, 1116, 485,
	1117, 307, 945, 486, 946, 308, 309, 310, 947, 311,
	312, 0, 0, 313, 314, 315, 316, 1118, 318, 317,
	1119, 319, 487, 948, 320, 321, 949, 1120, 322, 323,
	1121, 1122, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 950, 336, 337, 339, 338,
	1123, 214, 951, 1124, 488, 489, 340, 341, 1125, 342,
	343, 344, 1126, 1127, 346, 347, 348, 1128, 1129, 349,
	490, 952, 350, 953, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 1130, 358, 359, 492, 360, 493, 361,
	1131, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 1132, 371, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 1133, 385,
	954, 386, 387, 388, 389, 495, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 1134, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 1135, 412, 392,
	393, 413, 955, 414, 496, 415, 416, 1136, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 497,
	1137, 428, 429, 427, 1138, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 1139, 498, 499, 500, 501, 1140,
	443, 1141, 437, 438, 502, 439, 503, 1142, 440, 441,
	442, 0, 444, 445, 1143, 1144, 446, 447, 448, 449,
	451, 1145, 452, 1146, 450, 453, 454, 455, 504, 505,
	506, 1147, 457, 456, 507, 1148, 1149, 1150, 1151, 458,
	459, 508, 460, 461, 462, 1065, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2645, 0, 215, 216, 217, 218, 219, 1072, 220, 1073,
	1074, 1075, 1076, 463, 1077, 1078, 1079, 1080, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 1081,
	228, 229, 230, 231, 232, 233, 1082, 1083, 234, 468,
	469, 470, 1084, 235, 471, 1085, 1070, 1086, 236, 237,
	238, 239, 240, 0, 1087, 242, 243, 244, 241, 1088,
	245, 0, 246, 247, 248, 1089, 941, 249, 250, 1090,
	1091, 1093, 1092, 1094, 1095, 1096, 251, 252, 253, 254,
	255, 256, 472, 473, 1097, 257, 1098, 259, 258, 1099,
	260, 1100, 1101, 261, 262, 263, 1102, 264, 1103, 265,
	266, 1104, 474, 267, 1105, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 1106, 212, 1107, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 1108,
	283, 1109, 1110, 942, 284, 285, 1111, 286, 478, 1112,
	479, 287, 1113, 288, 289, 290, 291, 480, 481, 482,
	944, 292, 293, 1114, 294, 295, 296, 298, 0, 0,
	0, 213, 297, 299, 306, 1115, 943, 300, 483, 302,
	301, 303, 304, 305, 484, 1116, 485, 1117, 307, 945,
	486, 946, 308, 309, 310, 947, 311, 312, 0, 0,
	313, 314, 315, 316, 1118, 318, 317, 1119, 319, 487,
	948, 320, 321, 949, 1120, 322, 323, 1121, 1122, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 950, 336, 337, 339, 338, 1123, 214, 951,
	1124, 488, 489, 340, 341, 1125, 342, 343, 344, 1126,
	1127, 346, 347, 348, 1128, 1129, 349, 490, 952, 350,
	953, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	1130, 358, 359, 492, 360, 493, 361, 1131, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 1132,
	371, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 1133, 385, 954, 386, 387,
	388, 389, 495, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 1134, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 1135, 412, 392, 393, 413, 955,
	414, 496, 415, 416, 1136, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 497, 1137, 428, 429,
	427, 1138, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 1139, 498, 499, 500, 501, 1140, 443, 1141, 437,
	438, 502, 439, 503, 1142, 440, 441, 442, 0, 444,
	445, 1143, 1144, 446, 447, 448, 449, 451, 1145, 452,
	1146, 450, 453, 454, 455, 504, 505, 506, 1147, 457,
	456, 507, 1148, 1149, 1150, 1151, 458, 459, 508, 460,
	461, 462, 1065, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2031, 0, 215,
	216, 217, 218, 219, 1072, 220, 1073, 1074, 1075, 1076,
	463, 1077, 1078, 1079, 1080, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 1081, 228, 229, 230,
	231, 232, 233, 1082, 1083, 234, 468, 469, 470, 1084,
	235, 471, 1085, 1070, 1086, 236, 237, 238, 239, 240,
	0, 1087, 242, 243, 244, 241, 1088, 245, 0, 246,
	247, 248, 1089, 941, 249, 250, 1090, 1091, 1093, 1092,
	1094, 1095, 1096, 251, 252, 253, 254, 255, 256, 472,
	473, 1097, 257, 1098, 259, 258, 1099, 260, 1100, 1101,
	261, 262, 263, 1102, 264, 1103, 265, 266, 1104, 474,
	267, 1105, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 1106, 212, 1107, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 1108, 283, 1109, 1110,
	942, 284, 285, 1111, 286, 478, 1112, 479, 287, 1113,
	288, 289, 290, 291, 480, 481, 482, 944, 292, 293,
	1114, 294, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 1115, 943, 300, 483, 302, 301, 303, 304,
	305, 484, 1116, 485, 1117, 307, 945, 486, 946, 308,
	309, 310, 947, 311, 312, 0, 0, 313, 314, 315,
	316, 1118, 318, 317, 1119, 319, 487, 948, 320, 321,
	949, 1120, 322, 323, 1121, 1122, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 950,
	336, 337, 339, 338, 1123, 214, 951, 1124, 488, 489,
	340, 341, 1125, 342, 343, 344, 1126, 1127, 346, 347,
	348, 1128, 1129, 349, 490, 952, 350, 953, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 1130, 358, 359,
	492, 360, 493, 361, 1131, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 1132, 371, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 1133, 385, 954, 386, 387, 388, 389, 495,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	1134, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 1135, 412, 392, 393, 413, 955, 414, 496, 415,
	416, 1136, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 497, 1137, 428, 429, 427, 1138, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 1139, 498,
	499, 500, 501, 1140, 443, 1141, 437, 438, 502, 439,
	503, 1142, 440, 441, 442, 0, 444, 445, 1143, 1144,
	446, 447, 448, 449, 451, 1145, 452, 1146, 450, 453,
	454, 455, 504, 505, 506, 1147, 457, 456, 507, 1148,
	1149, 1150, 1151, 458, 459, 508, 460, 461, 462, 1175,
	0, 1065, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1767, 0, 0, 0, 215, 216,
	217, 218, 219, 1072, 220, 1073, 1074, 1075, 1076, 463,
	1077, 1078, 1079, 1080, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 1081, 228, 229, 230, 231,
	232, 233, 1082, 1083, 234, 468, 469, 470, 1084, 235,
	471, 1085, 1070, 1086, 236, 237, 238, 239, 240, 0,
	1087, 242, 243, 244, 241, 1088, 245, 0, 246, 247,
	248, 1089, 941, 249, 250, 1090, 1091, 1093, 1092, 1094,
	1095, 1096, 251, 252, 253, 254, 255, 256, 472, 473,
	1097, 257, 1098, 259, 258, 1099, 260, 1100, 1101, 261,
	262, 263, 1102, 264, 1103, 265, 266, 1104, 474, 267,
	1105, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	1106, 212, 1107, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 1108, 283, 1109, 1110, 942,
	284, 285, 1111, 286, 478, 1112, 479, 287, 1113, 288,
	289, 290, 291, 480, 481, 482, 944, 292, 293, 1114,
	294, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 1115, 943, 300, 483, 302, 301, 303, 304, 305,
	484, 1116, 485, 1117, 307, 945, 486, 946, 308, 309,
	310, 947, 311, 312, 0, 0, 313, 314, 315, 316,
	1118, 318, 317, 1119, 319, 487, 948, 320, 321, 949,
	1120, 322, 323, 1121, 1122, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 950, 336,
	337, 339, 338, 1123, 214, 951, 1124, 488, 489, 340,
	341, 1125, 342, 343, 344, 1126, 1127, 346, 347, 348,
	1128, 1129, 349, 490, 952, 350, 953, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 1130, 358, 359, 492,
	360, 493, 361, 1131, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 1132, 371, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 1133, 385, 954, 386, 387, 388, 389, 495, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 1134,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	1135, 412, 392, 393, 413, 955, 414, 496, 415, 416,
	1136, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 497, 1137, 428, 429, 427, 1138, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 1139, 498, 499,
	500, 501, 1140, 443, 1141, 437, 438, 502, 439, 503,
	1142, 440, 441, 442, 0, 444, 445, 1143, 1144, 446,
	447, 448, 449, 451, 1145, 452, 1146, 450, 453, 454,
	455, 504, 505, 506, 1147, 457, 456, 507, 1148, 1149,
	1150, 1151, 458, 459, 508, 460, 461, 462, 1062, 0,
	1065, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 1072, 220, 1073, 1074, 1075, 1076, 463, 1077,
	1078, 1079, 1080, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 1081, 228, 229, 230, 231, 232,
	233, 1082, 1083, 234, 468, 469, 470, 1084, 235, 471,
	1085, 1070, 1086, 236, 237, 238, 239, 240, 0, 1087,
	242, 243, 244, 241, 1088, 245, 0, 246, 247, 248,
	1089, 941, 249, 250, 1090, 1091, 1093, 1092, 1094, 1095,
	1096, 251, 252, 253, 254, 255, 256, 472, 473, 1097,
	257, 1098, 259, 258, 1099, 260, 1100, 1101, 261, 262,
	263, 1102, 264, 1103, 265, 266, 1104, 474, 267, 1105,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 1106,
	212, 1107, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 1108, 283, 1109, 1110, 942, 284,
	285, 1111, 286, 478, 1112, 479, 287, 1113, 288, 289,
	290, 291, 480, 481, 482, 944, 292, 293, 1114, 294,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	1115, 943, 300, 483, 302, 301, 303, 304, 305, 484,
	1116, 485, 1117, 307, 945, 486, 946, 308, 309, 310,
	947, 311, 312, 0, 0, 313, 314, 315, 316, 1118,
	318, 317, 1119, 319, 487, 948, 320, 321, 949, 1120,
	322, 323, 1121, 1122, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 950, 336, 337,
	339, 338, 1123, 214, 951, 1124, 488, 489, 340, 341,
	1125, 342, 343, 344, 1126, 1127, 346, 347, 348, 1128,
	1129, 349, 490, 952, 350, 953, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 1130, 358, 359, 492, 360,
	493, 361, 1131, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 1132, 371, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	1133, 385, 954, 386, 387, 388, 389, 495, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 1134, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 1135,
	412, 392, 393, 413, 955, 414, 496, 415, 416, 1136,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 497, 1137, 428, 429, 427, 1138, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 1139, 498, 499, 500,
	501, 1140, 443, 1141, 437, 438, 502, 439, 503, 1142,
	440, 441, 442, 0, 444, 445, 1143, 1144, 446, 447,
	448, 449, 451, 1145, 452, 1146, 450, 453, 454, 455,
	504, 505, 506, 1147, 457, 456, 507, 1148, 1149, 1150,
	1151, 458, 459, 508, 460, 461, 462, 1065, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 1072,
	220, 1073, 1074, 1075, 1076, 463, 1077, 1078, 1079, 1080,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 1081, 228, 229, 230, 231, 232, 233, 1082, 1083,
	234, 468, 469, 470, 1084, 235, 471, 1085, 1070, 1086,
	236, 237, 238, 239, 240, 0, 1087, 242, 243, 244,
	241, 1088, 245, 0, 246, 247, 248, 1089, 941, 249,
	250, 1090, 1091, 1093, 1092, 1094, 1095, 1096, 251, 252,
	253, 254, 255, 256, 472, 473, 1097, 257, 1098, 259,
	258, 1099, 260, 1100, 1101, 261, 262, 263, 1102, 264,
	1103, 265, 266, 1104, 474, 267, 1105, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 1106, 212, 1107, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 1108, 283, 1109, 1110, 942, 284, 285, 1111, 286,
	478, 1112, 479, 287, 1113, 288, 289, 290, 291, 480,
	481, 482, 944, 292, 293, 1114, 294, 295, 296, 298,
	0, 0, 0, 213, 297, 299, 306, 1115, 943, 300,
	483, 302, 301, 303, 304, 305, 484, 1116, 485, 1117,
	307, 945, 486, 946, 308, 309, 310, 947, 311, 312,
	0, 0, 313, 314, 315, 316, 1118, 318, 317, 1119,
	319, 487, 948, 320, 321, 949, 1120, 322, 323, 1121,
	1122, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 950, 336, 337, 339, 338, 1123,
	214, 951, 1124, 488, 489, 340, 341, 1125, 342, 343,
	344, 1126, 1127, 346, 347, 348, 1128, 1129, 349, 490,
	952, 350, 953, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 1130, 358, 359, 492, 360, 493, 361, 1131,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 1132, 371, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 1133, 385, 954,
	386, 387, 388, 389, 495, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 1134, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 1135, 412, 392, 393,
	413, 955, 414, 496, 415, 416, 1136, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 497, 1137,
	428, 429, 427, 1138, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 1139, 498, 499, 500, 501, 1140, 443,
	1141, 437, 438, 502, 439, 503, 1142, 440, 441, 442,
	0, 444, 445, 1143, 1144, 446, 447, 448, 449, 451,
	1145, 452, 1146, 450, 453, 454, 455, 504, 505, 506,
	1147, 457, 456, 507, 1148, 1149, 1150, 1151, 458, 459,
	508, 460, 461, 462, 2007, 0, 883, 840, 841, 842,
	838, 839, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 2004, 220,
	0, 0, 0, 0, 932, 857, 0, 0, 0, 221,
	222, 223, 224, 464, 898, 877, 909, 867, 908, 907,
	0, 228, 869, 868, 231, 232, 233, 859, 931, 234,
	967, 968, 470, 0, 235, 938, 0, 921, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 941, 249, 250,
	924, 922, 923, 928, 926, 925, 927, 251, 252, 253,
	254, 912, 256, 905, 904, 829, 257, 0, 259, 258,
	0, 260, 2005, 0, 261, 903, 263, 0, 264, 0,
	265, 266, 0, 835, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 958, 959, 848, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 902, 900, 901, 0, 282,
	0, 283, 0, 0, 942, 284, 285, 0, 286, 965,
	0, 858, 287, 0, 288, 289, 290, 291, 933, 934,
	937, 944, 292, 293, 0, 294, 295, 296, 879, 0,
	0, 0, 213, 297, 299, 306, 0, 943, 300, 891,
	882, 893, 895, 896, 897, 892, 0, 884, 0, 307,
	945, 935, 946, 308, 309, 310, 947, 917, 918, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	966, 948, 320, 321, 949, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 871, 333, 950, 336, 337, 339, 338, 826, 214,
	951, 849, 936, 906, 340, 341, 0, 880, 343, 881,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 952,
	350, 953, 960, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 961, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 899, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 954, 386,
	387, 388, 389, 836, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 872, 873, 875,
	876, 403, 407, 410, 411, 929, 412, 392, 393, 413,
	955, 414, 894, 874, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 940, 421, 422, 423, 962, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 870, 0, 913, 914, 915, 916, 0, 443, 0,
	437, 438, 963, 439, 964, 847, 440, 441, 442, 0,
	444, 445, 0, 830, 446, 447, 448, 449, 451, 930,
	452, 0, 878, 453, 454, 455, 504, 910, 957, 2003,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 827, 0, 0, 0, 0, 0, 0,
	0, 825, 0, 0, 0, 0, 823, 824, 2006, 0,
	0, 0, 0, 0, 0, 853, 2002, 0, 0, 816,
	851, 883, 840, 841, 842, 838, 839, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 932,
	857, 0, 0, 0, 221, 222, 223, 224, 464, 898,
	877, 909, 867, 908, 907, 0, 228, 869, 868, 231,
	232, 233, 859, 931, 234, 967, 968, 470, 0, 235,
	938, 0, 921, 0, 236, 237, 238, 239, 240, 0,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 941, 249, 250, 924, 922, 923, 928, 926,
	925, 927, 251, 252, 253, 254, 912, 256, 905, 904,
	829, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	903, 263, 0, 264, 0, 265, 266, 0, 835, 267,
	0, 268, 270, 273, 269, 274, 275, 276, 958, 959,
	848, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	902, 900, 901, 0, 282, 0, 283, 0, 0, 942,
	284, 285, 0, 286, 965, 0, 858, 287, 0, 288,
	289, 290, 291, 933, 934, 937, 944, 292, 293, 0,
	294, 295, 296, 879, 0, 0, 0, 213, 297, 299,
	306, 0, 943, 300, 891, 882, 893, 895, 896, 897,
	892, 0, 884, 0, 307, 945, 935, 946, 308, 309,
	310, 947, 917, 918, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 966, 948, 320, 321, 949,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 871, 333, 950, 336,
	337, 339, 338, 826, 214, 951, 849, 936, 906, 340,
	341, 0, 880, 343, 881, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 952, 350, 953, 960, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 961,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 899, 369, 370, 0, 371, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 954, 386, 387, 388, 389, 836, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 178,
	408, 409, 872, 873, 875, 876, 403, 407, 410, 411,
	929, 412, 392, 393, 413, 955, 414, 894, 874, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 940, 421,
	422, 423, 962, 0, 428, 429, 427, 180, 430, 431,
	432, 433, 434, 271, 435, 272, 870, 0, 913, 914,
	915, 916, 0, 443, 0, 437, 438, 963, 439, 964,
	847, 440, 441, 442, 0, 444, 445, 0, 830, 446,
	447, 448, 449, 451, 930, 452, 0, 878, 453, 454,
	455, 1313, 910, 957, 0, 457, 456, 507, 0, 0,
	0, 172, 458, 459, 508, 460, 461, 462, 827, 173,
	0, 0, 0, 0, 0, 0, 825, 0, 0, 0,
	0, 823, 824, 883, 840, 841, 842, 838, 839, 852,
	1504, 1502, 0, 0, 0, 851, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 932, 857, 0, 0, 0, 221, 222, 223, 224,
	464, 898, 877, 909, 867, 908, 907, 0, 228, 869,
	868, 231, 232, 233, 859, 931, 234, 967, 968, 470,
	0, 235, 938, 0, 921, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 941, 249, 250, 924, 922, 923,
	928, 926, 925, 927, 251, 252, 253, 254, 912, 256,
	905, 904, 829, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 903, 263, 0, 264, 0, 265, 266, 0,
	835, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	958, 959, 848, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 902, 900, 901, 0, 282, 0, 283, 0,
	0, 942, 284, 285, 0, 286, 965, 0, 858, 287,
	0, 288, 289, 290, 291, 933, 934, 937, 944, 292,
	293, 0, 294, 295, 296, 879, 0, 0, 0, 213,
	297, 299, 306, 0, 943, 300, 891, 882, 893, 895,
	896, 897, 892, 0, 884, 0, 307, 945, 935, 946,
	308, 309, 310, 947, 917, 918, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 966, 948, 320,
	321, 949, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 871, 333,
	950, 336, 337, 339, 338, 826, 214, 951, 849, 936,
	906, 340, 341, 0, 880, 343, 881, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 952, 350, 953, 960,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 961, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 899, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 954, 386, 387, 388, 389,
	836, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 178, 408, 409, 872, 873, 875, 876, 403, 407,
	410, 411, 929, 412, 392, 393, 413, 955, 414, 894,
	874, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	940, 421, 422, 423, 962, 0, 428, 429, 427, 180,
	430, 431, 432, 433, 434, 271, 435, 272, 870, 0,
	913, 914, 915, 916, 0, 443, 0, 437, 438, 963,
	439, 964, 847, 440, 441, 442, 0, 444, 445, 0,
	830, 446, 447, 448, 449, 451, 930, 452, 0, 878,
	453, 454, 455, 1313, 910, 957, 0, 457, 456, 507,
	0, 0, 0, 172, 458, 459, 508, 460, 461, 462,
	827, 173, 0, 0, 0, 0, 0, 0, 825, 0,
	0, 0, 0, 823, 824, 883, 840, 841, 842, 838,
	839, 852, 1504, 2409, 0, 0, 0, 851, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 932, 857, 0, 0, 0, 221, 222,
	223, 224, 464, 898, 877, 909, 867, 908, 907, 0,
	228, 869, 868, 231, 232, 233, 859, 931, 234, 967,
	968, 470, 0, 235, 938, 0, 921, 0, 236, 237,
	238, 239, 240, 0, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 941, 249, 250, 924,
	922, 923, 928, 926, 925, 927, 251, 252, 253, 254,
	912, 256, 905, 904, 829, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 903, 263, 0, 264, 0, 265,
	266, 0, 835, 267, 0, 268, 270, 273, 269, 274,
	275, 276, 958, 959, 848, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 902, 900, 901, 0, 282, 0,
	283, 0, 0, 942, 284, 285, 0, 286, 965, 0,
	858, 287, 0, 288, 289, 290, 291, 933, 934, 937,
	944, 292, 293, 0, 294, 295, 296, 879, 0, 0,
	0, 213, 297, 299, 306, 0, 943, 300, 891, 882,
	893, 895, 896, 897, 892, 0, 884, 0, 307, 945,
	935, 946, 308, 309, 310, 947, 917, 918, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 966,
	948, 320, 321, 949, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	871, 333, 950, 336, 337, 339, 338, 826, 214, 951,
	849, 936, 906, 340, 341, 0, 880, 343, 881, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 952, 350,
	953, 960, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 961, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 899, 369, 370, 0,
	371, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 954, 386, 387,
	388, 389, 836, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 178, 408, 409, 872, 873, 875, 876,
	403, 407, 410, 411, 929, 412, 392, 393, 413, 955,
	414, 894, 874, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 940, 421, 422, 423, 962, 0, 428, 429,
	427, 180, 430, 431, 432, 433, 434, 271, 435, 272,
	870, 0, 913, 914, 915, 916, 0, 443, 0, 437,
	438, 963, 439, 964, 847, 440, 441, 442, 0, 444,
	445, 0, 830, 446, 447, 448, 449, 451, 930, 452,
	0, 878, 453, 454, 455, 1313, 910, 957, 0, 457,
	456, 507, 0, 0, 0, 172, 458, 459, 508, 460,
	461, 462, 827, 173, 0, 0, 0, 0, 0, 0,
	825, 0, 0, 0, 0, 823, 824, 883, 840, 841,
	842, 838, 839, 852, 1504, 1502, 0, 0, 0, 851,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 932, 857, 0, 0, 0,
	221, 222, 223, 224, 464, 898, 877, 909, 867, 908,
	907, 2091, 228, 869, 868, 231, 232, 233, 859, 931,
	234, 967, 968, 470, 0, 235, 938, 0, 921, 0,
	236, 237, 238, 239, 240, 0, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 941, 249,
	250, 924, 922, 923, 928, 926, 925, 927, 251, 252,
	253, 254, 912, 256, 905, 904, 829, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 903, 263, 0, 264,
	0, 265, 266, 0, 835, 267, 0, 268, 270, 273,
	269, 274, 275, 276, 958, 959, 848, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 902, 900, 901, 0,
	282, 0, 283, 0, 2096, 942, 284, 285, 0, 286,
	965, 0, 858, 287, 0, 288, 289, 290, 291, 933,
	934, 937, 944, 292, 293, 0, 294, 295, 296, 879,
	0, 0, 0, 213, 297, 299, 306, 0, 943, 300,
	891, 882, 893, 895, 896, 897, 892, 0, 884, 0,
	307, 945, 935, 946, 308, 309, 310, 947, 917, 918,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 2092,
	319, 966, 948, 320, 321, 949, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 871, 333, 950, 336, 337, 339, 338, 826,
	214, 951, 849, 936, 906, 340, 341, 0, 880, 343,
	881, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	952, 350, 953, 960, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 961, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 899, 369,
	370, 0, 371, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 954,
	386, 387, 388, 389, 836, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 872, 873,
	875, 876, 403, 407, 410, 411, 929, 412, 392, 393,
	413, 955, 414, 894, 874, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 940, 421, 422, 423, 962, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 870, 0, 913, 914, 915, 916, 0, 443,
	2093, 437, 438, 963, 439, 964, 847, 440, 441, 442,
	0, 444, 445, 0, 830, 446, 447, 448, 449, 451,
	930, 452, 0, 878, 453, 454, 455, 504, 910, 957,
	0, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 827, 0, 0, 0, 0, 0,
	0, 0, 825, 0, 0, 0, 0, 823, 824, 0,
	0, 0, 0, 0, 0, 0, 853, 0, 0, 0,
	819, 851, 883, 840, 841, 842, 838, 839, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	932, 857, 0, 0, 0, 221, 222, 223, 224, 464,
	898, 877, 909, 867, 908, 907, 0, 228, 869, 868,
	231, 232, 233, 859, 931, 234, 967, 968, 470, 0,
	235, 938, 0, 921, 0, 236, 237, 238, 239, 240,
	0, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 941, 249, 250, 924, 922, 923, 928,
	926, 925, 927, 251, 252, 253, 254, 912, 256, 905,
	904, 829, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 903, 263, 0, 264, 0, 265, 266, 0, 835,
	267, 0, 268, 270, 273, 269, 274, 275, 276, 958,
	959, 848, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 902, 900, 901, 0, 282, 0, 283, 0, 0,
	942, 284, 285, 0, 286, 965, 0, 858, 287, 0,
	288, 289, 290, 291, 933, 934, 937, 944, 292, 293,
	0, 294, 295, 296, 879, 0, 0, 0, 213, 297,
	299, 306, 0, 943, 300, 891, 882, 893, 895, 896,
	897, 892, 0, 884, 0, 307, 945, 935, 946, 308,
	309, 310, 947, 917, 918, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 966, 948, 320, 321,
	949, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 871, 333, 950,
	336, 337, 339, 338, 826, 214, 951, 849, 936, 906,
	340, 341, 0, 880, 343, 881, 831, 0, 346, 347,
	348, 0, 0, 349, 490, 952, 350, 953, 960, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	961, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 899, 369, 370, 0, 371, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 954, 386, 387, 388, 389, 836,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 872, 873, 875, 876, 403, 407, 410,
	411, 929, 412, 392, 393, 413, 955, 414, 894, 874,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 940,
	421, 422, 423, 962, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 870, 0, 913,
	914, 915, 916, 0, 443, 0, 437, 438, 963, 439,
	964, 847, 440, 441, 442, 0, 444, 445, 0, 830,
	446, 447, 448, 449, 451, 930, 452, 0, 878, 453,
	454, 455, 504, 910, 957, 0, 457, 456, 507, 0,
	0, 0, 0, 458, 459, 508, 460, 461, 462, 827,
	0, 0, 0, 0, 0, 0, 0, 825, 0, 0,
	0, 0, 823, 824, 883, 840, 841, 842, 838, 839,
	852, 853, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 932, 857, 0, 0, 0, 221, 222, 223,
	224, 464, 898, 877, 909, 867, 908, 907, 0, 228,
	869, 868, 231, 232, 233, 859, 931, 234, 967, 968,
	470, 0, 235, 938, 0, 921, 0, 236, 237, 238,
	239, 240, 0, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 3336, 248, 0, 941, 249, 250, 924, 922,
	923, 928, 926, 925, 927, 251, 252, 253, 254, 912,
	256, 905, 904, 829, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 903, 263, 0, 264, 0, 265, 266,
	0, 835, 267, 0, 268, 270, 273, 269, 274, 275,
	276, 958, 959, 848, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 902, 900, 901, 0, 282, 0, 283,
	0, 0, 942, 284, 285, 0, 286, 965, 0, 858,
	287, 0, 288, 289, 290, 291, 933, 934, 937, 944,
	292, 293, 0, 294, 295, 296, 879, 0, 0, 0,
	213, 297, 299, 306, 0, 943, 300, 891, 882, 893,
	895, 896, 897, 892, 0, 884, 0, 307, 945, 935,
	946, 308, 309, 310, 947, 917, 918, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 966, 948,
	320, 321, 949, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 871,
	333, 950, 336, 337, 339, 338, 826, 214, 951, 849,
	936, 906, 340, 341, 0, 880, 343, 881, 831, 0,
	346, 347, 348, 0, 0, 349, 490, 952, 350, 953,
	960, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 961, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 899, 369, 370, 0, 371,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 954, 386, 387, 388,
	389, 836, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 872, 873, 875, 876, 403,
	407, 410, 411, 929, 412, 392, 393, 413, 955, 414,
	894, 874, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 940, 421, 422, 423, 962, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 870,
	0, 913, 914, 915, 916, 0, 443, 0, 437, 438,
	963, 439, 964, 847, 440, 441, 442, 0, 444, 445,
	0, 830, 446, 447, 448, 449, 451, 930, 452, 0,
	878, 453, 454, 455, 504, 910, 957, 0, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 827, 0, 0, 0, 0, 0, 0, 0, 825,
	0, 0, 0, 0, 823, 824, 883, 840, 841, 842,
	838, 839, 852, 853, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 932, 857, 0, 0, 0, 221,
	222, 223, 224, 464, 898, 877, 909, 867, 908, 907,
	0, 228, 869, 868, 231, 232, 233, 859, 931, 234,
	967, 968, 470, 0, 235, 938, 0, 921, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 3203, 248, 0, 941, 249, 250,
	924, 922, 923, 928, 926, 925, 927, 251, 252, 253,
	254, 912, 256, 905, 904, 829, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 903, 263, 0, 264, 0,
	265, 266, 0, 835, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 958, 959, 848, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 902, 900, 901, 0, 282,
	0, 283, 0, 0, 942, 284, 285, 0, 286, 965,
	0, 858, 287, 0, 288, 289, 290, 291, 933, 934,
	937, 944, 292, 293, 0, 294, 295, 296, 879, 0,
	0, 0, 213, 297, 299, 306, 0, 943, 300, 891,
	882, 893, 895, 896, 897, 892, 0, 884, 0, 307,
	945, 935, 946, 308, 309, 310, 947, 917, 918, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	966, 948, 320, 321, 949, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 871, 333, 950, 336, 337, 339, 338, 826, 214,
	951, 849, 936, 906, 340, 341, 0, 880, 343, 881,
	831, 0, 346, 347, 348, 0, 0, 349, 490, 952,
	350, 953, 960, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 961, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 899, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 954, 386,
	387, 388, 389, 836, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 872, 873, 875,
	876, 403, 407, 410, 411, 929, 412, 392, 393, 413,
	955, 414, 894, 874, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 940, 421, 422, 423, 962, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 870, 0, 913, 914, 915, 916, 0, 443, 0,
	437, 438, 963, 439, 964, 847, 440, 441, 442, 0,
	444, 445, 0, 830, 446, 447, 448, 449, 451, 930,
	452, 0, 878, 453, 454, 455, 504, 910, 957, 0,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 827, 0, 0, 0, 0, 0, 0,
	0, 825, 0, 0, 0, 0, 823, 824, 883, 840,
	841, 842, 838, 839, 852, 853, 0, 0, 0, 0,
	851, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 932, 857, 0, 0,
	0, 221, 222, 223, 224, 464, 898, 877, 909, 867,
	908, 907, 0, 228, 869, 868, 231, 232, 233, 859,
	931, 234, 967, 968, 470, 0, 235, 938, 0, 921,
	0, 236, 237, 238, 239, 240, 0, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 941,
	249, 250, 924, 922, 923, 928, 926, 925, 927, 251,
	252, 253, 254, 912, 256, 905, 904, 829, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 903, 263, 0,
	264, 0, 265, 266, 0, 835, 267, 0, 268, 270,
	273, 269, 274, 275, 276, 958, 959, 848, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 902, 900, 901,
	0, 282, 0, 283, 0, 0, 942, 284, 285, 0,
	286, 965, 0, 858, 287, 0, 288, 289, 290, 291,
	933, 934, 937, 944, 292, 293, 0, 294, 295, 296,
	879, 0, 0, 0, 213, 297, 299, 306, 0, 943,
	300, 891, 882, 893, 895, 896, 897, 892, 0, 884,
	0, 307, 945, 935, 946, 308, 309, 310, 947, 917,
	918, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 966, 948, 320, 321, 949, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 871, 333, 950, 336, 337, 339, 338,
	826, 2948, 951, 849, 936, 906, 340, 341, 0, 880,
	343, 881, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 952, 350, 953, 960, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 961, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 899,
	369, 370, 0, 371, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	954, 386, 387, 388, 389, 836, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 872,
	873, 875, 876, 403, 407, 410, 411, 929, 412, 392,
	393, 413, 955, 414, 894, 874, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 940, 421, 422, 423, 962,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 870, 0, 913, 914, 915, 916, 0,
	443, 0, 437, 438, 963, 439, 964, 847, 440, 441,
	442, 0, 444, 445, 0, 830, 446, 447, 448, 449,
	451, 930, 452, 0, 878, 453, 454, 455, 504, 910,
	957, 0, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 827, 0, 0, 0, 0,
	0, 0, 0, 825, 0, 0, 0, 0, 823, 824,
	1564, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 0, 851, 883, 840, 841, 842, 838, 839, 852,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 932, 857, 0, 0, 0, 221, 222, 223, 224,
	464, 898, 877, 909, 867, 908, 907, 0, 228, 869,
	868, 231, 232, 233, 859, 931, 234, 967, 968, 470,
	0, 235, 938, 0, 921, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 941, 249, 250, 924, 922, 923,
	928, 926, 925, 927, 251, 252, 253, 254, 912, 256,
	905, 904, 829, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 903, 263, 0, 264, 0, 265, 266, 0,
	835, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	958, 959, 848, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 902, 900, 901, 0, 282, 0, 283, 0,
	0, 942, 284, 285, 0, 286, 965, 0, 858, 287,
	0, 288, 289, 290, 291, 933, 934, 937, 944, 292,
	293, 0, 294, 295, 296, 879, 0, 0, 0, 213,
	297, 299, 306, 0, 943, 300, 891, 882, 893, 895,
	896, 897, 892, 0, 884, 0, 307, 945, 935, 946,
	308, 309, 310, 947, 917, 918, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 966, 948, 320,
	321, 949, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 871, 333,
	950, 336, 337, 339, 338, 826, 214, 951, 849, 936,
	906, 340, 341, 0, 880, 343, 881, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 952, 350, 953, 960,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 961, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 899, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 954, 386, 387, 388, 389,
	836, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 872, 873, 875, 876, 403, 407,
	410, 411, 929, 412, 392, 393, 413, 955, 414, 894,
	874, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	940, 421, 422, 423, 962, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 870, 0,
	913, 914, 915, 916, 0, 443, 0, 437, 438, 963,
	439, 964, 847, 440, 441, 442, 0, 444, 445, 0,
	830, 446, 447, 448, 449, 451, 930, 452, 0, 878,
	453, 454, 455, 504, 910, 957, 2760, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	827, 0, 0, 0, 0, 0, 0, 0, 825, 0,
	0, 0, 0, 823, 824, 883, 840, 841, 842, 838,
	839, 852, 853, 0, 0, 0, 0, 851, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 932, 857, 0, 0, 0, 221, 222,
	223, 224, 464, 898, 877, 909, 867, 908, 907, 0,
	228, 869, 868, 231, 232, 233, 859, 931, 234, 967,
	968, 470, 0, 235, 938, 0, 921, 0, 236, 237,
	238, 239, 240, 0, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 941, 249, 250, 924,
	922, 923, 928, 926, 925, 927, 251, 252, 253, 254,
	912, 256, 905, 904, 829, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 903, 263, 0, 264, 0, 265,
	266, 0, 835, 267, 0, 268, 270, 273, 269, 274,
	275, 276, 958, 959, 848, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 902, 900, 901, 0, 282, 0,
	283, 0, 0, 942, 284, 285, 0, 286, 965, 0,
	858, 287, 0, 288, 289, 290, 291, 933, 934, 937,
	944, 292, 293, 0, 294, 295, 296, 879, 0, 0,
	0, 1921, 297, 299, 306, 0, 943, 300, 891, 882,
	893, 895, 896, 897, 892, 0, 884, 0, 307, 945,
	935, 946, 308, 309, 310, 947, 917, 918, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 966,
	948, 320, 321, 949, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	871, 333, 950, 336, 337, 339, 338, 826, 214, 951,
	849, 936, 906, 340, 341, 0, 880, 343, 881, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 952, 350,
	953, 960, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 961, 360, 493, 361, 1920, 362, 0,
	363, 364, 365, 366, 367, 368, 899, 369, 370, 0,
	371, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 954, 386, 387,
	388, 389, 836, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 872, 873, 875, 876,
	403, 407, 410, 411, 929, 412, 392, 393, 413, 955,
	414, 894, 874, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 940, 421, 422, 423, 962, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	870, 0, 913, 914, 915, 916, 0, 443, 0, 437,
	438, 963, 439, 964, 847, 440, 441, 442, 0, 444,
	445, 0, 830, 446, 447, 448, 449, 451, 930, 452,
	0, 878, 453, 454, 455, 504, 910, 957, 0, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 827, 0, 0, 0, 0, 0, 0, 0,
	825, 0, 0, 0, 0, 823, 824, 883, 840, 841,
	842, 838, 839, 852, 853, 0, 0, 0, 0, 851,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 932, 857, 0, 0, 0,
	221, 222, 223, 224, 464, 898, 877, 909, 867, 908,
	907, 0, 228, 869, 868, 231, 232, 233, 859, 931,
	234, 967, 968, 470, 0, 235, 938, 0, 921, 0,
	236, 237, 238, 239, 240, 0, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 941, 249,
	250, 924, 922, 923, 928, 926, 925, 927, 251, 252,
	253, 254, 912, 256, 905, 904, 829, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 903, 263, 0, 264,
	0, 265, 266, 0, 835, 267, 0, 268, 270, 273,
	269, 274, 275, 276, 958, 959, 848, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 902, 900, 901, 0,
	282, 0, 283, 0, 0, 942, 284, 285, 0, 286,
	965, 0, 858, 287, 0, 288, 289, 290, 291, 933,
	934, 937, 944, 292, 293, 0, 294, 295, 296, 879,
	0, 0, 0, 213, 297, 299, 306, 0, 943, 300,
	891, 882, 893, 895, 896, 897, 892, 0, 884, 0,
	307, 945, 935, 946, 308, 309, 310, 947, 917, 918,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 966, 948, 320, 321, 949, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 871, 333, 950, 336, 337, 339, 338, 826,
	214, 951, 849, 936, 906, 340, 341, 0, 880, 343,
	881, 831, 0, 346, 347, 348, 0, 0, 349, 490,
	952, 350, 953, 960, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 961, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 899, 369,
	370, 0, 371, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 954,
	386, 387, 388, 389, 836, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 872, 873,
	875, 876, 403, 407, 410, 411, 929, 412, 392, 393,
	413, 955, 414, 894, 874, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 940, 421, 422, 423, 962, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 870, 0, 913, 914, 915, 916, 0, 443,
	0, 437, 438, 963, 439, 964, 847, 440, 441, 442,
	0, 444, 445, 0, 830, 446, 447, 448, 449, 451,
	930, 452, 0, 878, 453, 454, 455, 504, 910, 957,
	0, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 827, 0, 0, 0, 0, 0,
	0, 0, 825, 0, 0, 0, 0, 823, 824, 883,
	840, 841, 842, 838, 839, 852, 853, 0, 0, 0,
	0, 851, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 932, 857, 0,
	0, 0, 221, 222, 223, 224, 464, 898, 877, 909,
	867, 908, 907, 0, 228, 869, 868, 231, 232, 233,
	859, 931, 234, 967, 968, 470, 0, 235, 938, 0,
	921, 0, 236, 237, 238, 239, 240, 0, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	941, 249, 250, 924, 922, 923, 928, 926, 925, 927,
	251, 252, 253, 254, 912, 256, 905, 904, 829, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 903, 263,
	0, 264, 0, 265, 266, 0, 835, 267, 0, 268,
	270, 273, 269, 274, 275, 276, 958, 959, 848, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 902, 900,
	901, 0, 282, 0, 283, 0, 0, 942, 284, 285,
	0, 286, 965, 0, 858, 287, 0, 288, 289, 290,
	291, 933, 934, 937, 944, 292, 293, 0, 294, 295,
	296, 879, 0, 0, 0, 213, 297, 299, 306, 0,
	943, 300, 891, 882, 893, 895, 896, 897, 892, 0,
	884, 0, 307, 945, 935, 946, 308, 309, 310, 947,
	917, 918, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 966, 948, 320, 321, 949, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 871, 333, 950, 336, 337, 339,
	338, 826, 214, 951, 849, 936, 906, 340, 341, 0,
	880, 343, 881, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 952, 350, 953, 960, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 961, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	899, 369, 370, 0, 371, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 954, 386, 387, 388, 389, 836, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	872, 873, 875, 876, 403, 407, 410, 411, 929, 412,
	392, 393, 413, 955, 414, 894, 874, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 940, 421, 422, 423,
	962, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 870, 0, 913, 914, 915, 916,
	0, 443, 0, 437, 438, 963, 439, 964, 847, 440,
	441, 442, 0, 444, 445, 0, 830, 446, 447, 448,
	449, 451, 930, 452, 0, 878, 453, 454, 455, 504,
	910, 957, 0, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 827, 0, 0, 0,
	0, 0, 0, 0, 825, 0, 0, 0, 0, 823,
	824, 1564, 0, 0, 0, 0, 0, 0, 853, 0,
	0, 0, 0, 851, 883, 840, 841, 842, 838, 839,
	852, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 932, 857, 0, 0, 0, 221, 222, 223,
	224, 464, 898, 877, 909, 867, 908, 907, 0, 228,
	869, 868, 231, 232, 233, 859, 931, 234, 967, 968,
	470, 0, 235, 938, 0, 921, 0, 236, 237, 238,
	239, 240, 0, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 941, 249, 250, 924, 922,
	923, 928, 926, 925, 927, 251, 252, 253, 254, 912,
	256, 905, 904, 829, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 903, 263, 0, 264, 0, 265, 266,
	0, 835, 267, 0, 268, 270, 273, 269, 274, 275,
	276, 958, 959, 848, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 902, 900, 901, 0, 282, 0, 283,
	0, 2096, 942, 284, 285, 0, 286, 965, 0, 858,
	287, 0, 288, 289, 290, 291, 933, 934, 937, 944,
	292, 293, 0, 294, 295, 296, 879, 0, 0, 0,
	213, 297, 299, 306, 0, 943, 300, 891, 882, 893,
	895, 896, 897, 892, 0, 884, 0, 307, 945, 935,
	946, 308, 309, 310, 947, 917, 918, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 966, 948,
	320, 321, 949, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 871,
	333, 950, 336, 337, 339, 338, 826, 214, 951, 849,
	936, 906, 340, 341, 0, 880, 343, 881, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 952, 350, 953,
	960, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 961, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 899, 369, 370, 0, 371,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 954, 386, 387, 388,
	389, 836, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 872, 873, 875, 876, 403,
	407, 410, 411, 929, 412, 392, 393, 413, 955, 414,
	894, 874, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 940, 421, 422, 423, 962, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 870,
	0, 913, 914, 915, 916, 0, 443, 0, 437, 438,
	963, 439, 964, 847, 440, 441, 442, 0, 444, 445,
	0, 830, 446, 447, 448, 449, 451, 930, 452, 0,
	878, 453, 454, 455, 504, 910, 957, 0, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 827, 0, 0, 0, 0, 0, 0, 0, 825,
	0, 0, 0, 0, 823, 824, 883, 840, 841, 842,
	838, 839, 852, 853, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 932, 857, 0, 0, 0, 221,
	222, 223, 224, 464, 898, 877, 909, 867, 908, 907,
	0, 228, 869, 868, 231, 232, 233, 859, 931, 234,
	967, 968, 470, 0, 235, 938, 0, 921, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 941, 249, 250,
	924, 922, 923, 928, 926, 925, 927, 251, 252, 253,
	254, 912, 256, 905, 904, 829, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 903, 263, 0, 264, 0,
	265, 266, 0, 835, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 958, 959, 848, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 902, 900, 901, 0, 282,
	0, 283, 0, 0, 942, 284, 285, 0, 286, 965,
	0, 858, 287, 0, 288, 289, 290, 291, 933, 934,
	937, 944, 292, 293, 0, 294, 295, 296, 879, 0,
	0, 0, 213, 297, 299, 306, 0, 943, 300, 891,
	882, 893, 895, 896, 897, 892, 0, 884, 0, 307,
	945, 935, 946, 308, 309, 310, 947, 917, 918, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	966, 948, 320, 321, 949, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 871, 333, 950, 336, 337, 339, 338, 826, 214,
	951, 849, 936, 906, 340, 341, 0, 880, 343, 881,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 952,
	350, 953, 960, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 961, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 899, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 954, 386,
	387, 388, 389, 836, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 872, 873, 875,
	876, 403, 407, 410, 411, 929, 412, 392, 393, 413,
	955, 414, 894, 874, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 940, 421, 422, 423, 962, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 870, 0, 913, 914, 915, 916, 0, 443, 0,
	437, 438, 963, 439, 964, 847, 440, 441, 442, 0,
	444, 445, 0, 830, 446, 447, 448, 449, 451, 930,
	452, 0, 878, 453, 454, 455, 504, 910, 957, 0,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 827, 0, 0, 0, 0, 0, 0,
	0, 825, 0, 0, 0, 0, 823, 824, 0, 0,
	0, 0, 0, 0, 0, 853, 1502, 0, 0, 2101,
	851, 883, 840, 841, 842, 838, 839, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 932,
	857, 0, 0, 0, 221, 222, 223, 224, 464, 898,
	877, 909, 867, 908, 907, 0, 228, 869, 868, 231,
	232, 233, 859, 931, 234, 967, 968, 470, 0, 235,
	938, 0, 921, 0, 236, 237, 238, 239, 240, 0,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 941, 249, 250, 924, 922, 923, 928, 926,
	925, 927, 251, 252, 253, 254, 912, 256, 905, 904,
	829, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	903, 263, 0, 264, 0, 265, 266, 0, 835, 267,
	0, 268, 270, 273, 269, 274, 275, 276, 958, 959,
	848, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	902, 900, 901, 0, 282, 0, 283, 0, 0, 942,
	284, 285, 0, 286, 965, 0, 858, 287, 0, 288,
	289, 290, 291, 933, 934, 937, 944, 292, 293, 0,
	294, 295, 296, 879, 0, 0, 0, 213, 297, 299,
	306, 0, 943, 300, 891, 882, 893, 895, 896, 897,
	892, 0, 884, 0, 307, 945, 935, 946, 308, 309,
	310, 947, 917, 918, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 966, 948, 320, 321, 949,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 871, 333, 950, 336,
	337, 339, 338, 826, 214, 951, 849, 936, 906, 340,
	341, 0, 880, 343, 881, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 952, 350, 953, 960, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 961,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 899, 369, 370, 0, 371, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 954, 386, 387, 388, 389, 836, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 872, 873, 875, 876, 403, 407, 410, 411,
	929, 412, 392, 393, 413, 955, 414, 894, 874, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 940, 421,
	422, 423, 962, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 870, 0, 913, 914,
	915, 916, 0, 443, 0, 437, 438, 963, 439, 964,
	847, 440, 441, 442, 0, 444, 445, 0, 830, 446,
	447, 448, 449, 451, 930, 452, 0, 878, 453, 454,
	455, 504, 910, 957, 0, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 827, 0,
	0, 0, 0, 0, 0, 0, 825, 0, 0, 0,
	0, 823, 824, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 2099, 851, 883, 840, 841, 842,
	838, 839, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 932, 857, 0, 0, 0, 221,
	222, 223, 224, 464, 898, 877, 909, 867, 908, 907,
	0, 228, 869, 868, 231, 232, 233, 859, 931, 234,
	967, 968, 470, 0, 235, 938, 0, 921, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 941, 249, 250,
	924, 922, 923, 928, 926, 925, 927, 251, 252, 253,
	254, 912, 256, 905, 904, 829, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 903, 263, 0, 264, 0,
	265, 266, 0, 835, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 958, 959, 848, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 902, 900, 901, 0, 282,
	0, 283, 0, 0, 942, 284, 285, 0, 286, 965,
	0, 858, 287, 0, 288, 289, 290, 291, 933, 934,
	937, 944, 292, 293, 0, 294, 295, 296, 879, 0,
	0, 0, 213, 297, 299, 306, 0, 943, 300, 891,
	882, 893, 895, 896, 897, 892, 0, 884, 0, 307,
	945, 935, 946, 308, 309, 310, 947, 917, 918, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	966, 948, 320, 321, 949, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 871, 333, 950, 336, 337, 339, 338, 826, 214,
	951, 849, 936, 906, 340, 341, 0, 880, 343, 881,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 952,
	350, 953, 960, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 961, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 899, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 954, 386,
	387, 388, 389, 836, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 872, 873, 875,
	876, 403, 407, 410, 411, 929, 412, 392, 393, 413,
	955, 414, 894, 874, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 940, 421, 422, 423, 962, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 870, 0, 913, 914, 915, 916, 0, 443, 0,
	437, 438, 963, 439, 964, 847, 440, 441, 442, 0,
	444, 445, 0, 830, 446, 447, 448, 449, 451, 930,
	452, 0, 878, 453, 454, 455, 504, 910, 957, 0,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 827, 0, 0, 0, 0, 0, 0,
	0, 825, 0, 0, 0, 0, 823, 824, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 2087,
	851, 883, 840, 841, 842, 838, 839, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 932,
	857, 0, 0, 0, 221, 222, 223, 224, 464, 898,
	877, 909, 867, 908, 907, 0, 228, 869, 868, 231,
	232, 233, 859, 931, 234, 967, 968, 470, 0, 235,
	938, 0, 921, 0, 236, 237, 238, 239, 240, 0,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 941, 249, 250, 924, 922, 923, 928, 926,
	925, 927, 251, 252, 253, 254, 912, 256, 905, 904,
	829, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	903, 263, 0, 264, 0, 265, 266, 0, 835, 267,
	0, 268, 270, 273, 269, 274, 275, 276, 958, 959,
	848, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	902, 900, 901, 0, 282, 0, 283, 0, 0, 942,
	284, 285, 0, 286, 965, 0, 858, 287, 0, 288,
	289, 290, 291, 933, 934, 937, 944, 292, 293, 0,
	294, 295, 296, 879, 0, 0, 0, 213, 297, 299,
	306, 0, 943, 300, 891, 882, 893, 895, 896, 897,
	892, 0, 884, 0, 307, 945, 935, 946, 308, 309,
	310, 947, 917, 918, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 966, 948, 320, 321, 949,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 871, 333, 950, 336,
	337, 339, 338, 826, 214, 951, 849, 936, 906, 340,
	341, 0, 880, 343, 881, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 952, 350, 953, 960, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 961,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 899, 369, 370, 0, 371, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 954, 386, 387, 388, 389, 836, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 872, 873, 875, 876, 403, 407, 410, 411,
	929, 412, 392, 393, 413, 955, 414, 894, 874, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 940, 421,
	422, 423, 962, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 870, 0, 913, 914,
	915, 916, 0, 443, 0, 437, 438, 963, 439, 964,
	847, 440, 441, 442, 0, 444, 445, 0, 830, 446,
	447, 448, 449, 451, 930, 452, 0, 878, 453, 454,
	455, 504, 910, 957, 0, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 827, 0,
	0, 0, 0, 0, 0, 0, 825, 0, 0, 0,
	0, 823, 824, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 2076, 851, 883, 840, 841, 842,
	838, 839, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 932, 857, 0, 0, 0, 221,
	222, 223, 224, 464, 898, 877, 909, 867, 908, 907,
	0, 228, 869, 868, 231, 232, 233, 859, 931, 234,
	967, 968, 470, 0, 235, 938, 0, 921, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 941, 249, 250,
	924, 922, 923, 928, 926, 925, 927, 251, 252, 253,
	254, 912, 256, 905, 904, 829, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 903, 263, 0, 264, 0,
	265, 266, 0, 835, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 958, 959, 848, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 902, 900, 901, 0, 282,
	0, 283, 0, 0, 942, 284, 285, 0, 286, 965,
	0, 858, 287, 0, 288, 289, 290, 291, 933, 934,
	937, 944, 292, 293, 0, 294, 295, 296, 879, 0,
	0, 0, 213, 297, 299, 306, 0, 943, 300, 891,
	882, 893, 895, 896, 897, 892, 0, 884, 0, 307,
	945, 935, 946, 308, 309, 310, 947, 917, 918, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	966, 948, 320, 321, 949, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 871, 333, 950, 336, 337, 339, 338, 826, 214,
	951, 849, 936, 906, 340, 341, 0, 880, 343, 881,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 952,
	350, 953, 960, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 961, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 899, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 954, 386,
	387, 388, 389, 836, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 872, 873, 875,
	876, 403, 407, 410, 411, 929, 412, 392, 393, 413,
	955, 414, 894, 874, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 940, 421, 422, 423, 962, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 870, 0, 913, 914, 915, 916, 0, 443, 0,
	437, 438, 963, 439, 964, 847, 440, 441, 442, 0,
	444, 445, 0, 830, 446, 447, 448, 449, 451, 930,
	452, 0, 878, 453, 454, 455, 504, 910, 957, 0,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 827, 0, 0, 0, 0, 0, 0,
	0, 825, 0, 0, 0, 0, 823, 824, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 0, 2074,
	851, 2066, 840, 841, 842, 838, 839, 852, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 932,
	857, 0, 0, 0, 221, 222, 223, 224, 464, 898,
	877, 909, 867, 908, 907, 0, 228, 869, 868, 231,
	232, 233, 859, 931, 234, 967, 968, 470, 0, 235,
	938, 0, 921, 0, 236, 237, 238, 239, 240, 0,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 941, 249, 250, 924, 922, 923, 928, 926,
	925, 927, 251, 252, 253, 254, 912, 2069, 905, 904,
	829, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	903, 263, 0, 264, 0, 265, 266, 0, 835, 267,
	0, 268, 270, 273, 269, 274, 275, 276, 958, 959,
	848, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	902, 900, 901, 0, 282, 0, 283, 0, 0, 942,
	284, 285, 0, 286, 965, 0, 858, 287, 0, 288,
	289, 290, 2070, 933, 934, 937, 944, 292, 293, 0,
	294, 295, 296, 879, 0, 0, 0, 213, 297, 299,
	306, 0, 943, 300, 891, 882, 893, 895, 896, 897,
	892, 0, 884, 0, 307, 945, 935, 946, 308, 309,
	310, 947, 917, 918, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 966, 948, 320, 321, 949,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 2071, 2068, 334, 871, 333, 950, 336,
	337, 339, 338, 826, 214, 951, 849, 936, 906, 340,
	341, 0, 880, 343, 881, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 952, 350, 953, 960, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 961,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 899, 369, 370, 0, 371, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 954, 386, 387, 388, 389, 836, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 2072, 0,
	408, 409, 872, 873, 875, 876, 403, 407, 410, 411,
	929, 412, 392, 393, 413, 955, 414, 894, 874, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 940, 421,
	422, 423, 962, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 870, 0, 913, 914,
	915, 916, 0, 443, 0, 437, 438, 963, 439, 964,
	847, 440, 441, 442, 0, 444, 445, 0, 830, 446,
	447, 448, 449, 451, 930, 452, 0, 878, 453, 454,
	455, 504, 910, 957, 0, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 2067, 462, 827, 0,
	0, 0, 0, 0, 0, 0, 825, 0, 0, 0,
	0, 823, 824, 0, 0, 0, 0, 0, 0, 0,
	853, 0, 0, 0, 2063, 851, 2066, 840, 841, 842,
	838, 839, 852, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 932, 857, 0, 0, 0, 221,
	222, 223, 224, 464, 898, 877, 909, 867, 908, 907,
	0, 228, 869, 868, 231, 232, 233, 859, 931, 234,
	967, 968, 470, 0, 235, 938, 0, 921, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 941, 249, 250,
	924, 922, 923, 928, 926, 925, 927, 251, 252, 253,
	254, 912, 2069, 905, 904, 829, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 903, 263, 0, 264, 0,
	265, 266, 0, 835, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 958, 959, 848, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 902, 900, 901, 0, 282,
	0, 283, 0, 0, 942, 284, 285, 0, 286, 965,
	0, 858, 287, 0, 288, 289, 290, 2070, 933, 934,
	937, 944, 292, 293, 0, 294, 295, 296, 879, 0,
	0, 0, 213, 297, 299, 306, 0, 943, 300, 891,
	882, 893, 895, 896, 897, 892, 0, 884, 0, 307,
	945, 935, 946, 308, 309, 310, 947, 917, 918, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	966, 948, 320, 321, 949, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 2071, 2068,
	334, 871, 333, 950, 336, 337, 339, 338, 826, 214,
	951, 849, 936, 906, 340, 341, 0, 880, 343, 881,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 952,
	350, 953, 960, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 961, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 899, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 954, 386,
	387, 388, 389, 836, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 2072, 0, 408, 409, 872, 873, 875,
	876, 403, 407, 410, 411, 929, 412, 392, 393, 413,
	955, 414, 894, 874, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 940, 421, 422, 423, 962, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 870, 0, 913, 914, 915, 916, 0, 443, 0,
	437, 438, 963, 439, 964, 847, 440, 441, 442, 0,
	444, 445, 0, 830, 446, 447, 448, 449, 451, 930,
	452, 0, 878, 453, 454, 455, 504, 910, 957, 0,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 2067, 462, 827, 0, 0, 0, 0, 0, 0,
	0, 825, 0, 0, 0, 0, 823, 824, 883, 840,
	841, 842, 838, 839, 852, 853, 0, 0, 0, 0,
	851, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 932, 857, 0, 0,
	0, 221, 222, 223, 224, 464, 898, 877, 909, 867,
	908, 907, 0, 228, 869, 868, 231, 232, 233, 859,
	931, 234, 967, 968, 470, 0, 235, 938, 0, 921,
	0, 236, 237, 238, 239, 240, 0, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 941,
	249, 250, 924, 922, 923, 928, 926, 925, 927, 251,
	252, 253, 254, 912, 256, 905, 904, 829, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 903, 263, 0,
	264, 0, 265, 266, 0, 835, 267, 0, 268, 270,
	273, 269, 274, 275, 276, 958, 959, 848, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 902, 900, 901,
	0, 282, 0, 283, 0, 0, 942, 284, 285, 0,
	286, 965, 0, 858, 287, 0, 288, 289, 290, 291,
	933, 934, 937, 944, 292, 293, 0, 294, 295, 296,
	879, 0, 0, 0, 213, 297, 299, 306, 0, 943,
	300, 891, 882, 893, 895, 896, 897, 892, 0, 884,
	0, 307, 945, 935, 946, 308, 309, 310, 947, 917,
	918, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 966, 948, 320, 321, 949, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 871, 333, 950, 336, 337, 339, 338,
	826, 214, 951, 849, 936, 906, 340, 341, 0, 880,
	343, 881, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 952, 350, 953, 960, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 961, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 899,
	369, 370, 0, 371, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	954, 386, 387, 388, 389, 836, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 872,
	873, 875, 876, 403, 407, 410, 411, 929, 412, 392,
	393, 413, 955, 414, 894, 874, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 940, 421, 422, 423, 962,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 870, 0, 913, 914, 915, 916, 0,
	443, 0, 437, 438, 963, 439, 964, 847, 440, 441,
	442, 0, 444, 445, 0, 830, 446, 447, 448, 449,
	451, 930, 452, 0, 878, 453, 454, 455, 504, 910,
	957, 0, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 827, 0, 0, 0, 0,
	0, 0, 0, 825, 0, 0, 0, 0, 823, 824,
	0, 0, 0, 0, 0, 1510, 0, 853, 0, 0,
	0, 0, 851, 883, 840, 841, 842, 838, 839, 852,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 1908, 220, 0, 0, 0,
	0, 932, 857, 0, 0, 0, 221, 222, 223, 224,
	464, 898, 877, 909, 867, 908, 907, 0, 228, 869,
	868, 231, 232, 233, 859, 931, 234, 967, 968, 470,
	0, 235, 938, 0, 921, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 941, 249, 250, 924, 922, 923,
	928, 926, 925, 927, 251, 252, 253, 254, 912, 256,
	905, 904, 829, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 903, 263, 0, 264, 0, 265, 266, 0,
	835, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	958, 959, 848, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 902, 900, 901, 0, 282, 0, 283, 0,
	0, 942, 284, 285, 0, 286, 965, 0, 858, 287,
	0, 288, 289, 290, 291, 933, 934, 937, 944, 292,
	293, 0, 294, 295, 296, 879, 0, 0, 0, 213,
	297, 299, 306, 0, 943, 300, 891, 882, 893, 895,
	896, 897, 892, 0, 884, 0, 307, 945, 935, 946,
	308, 309, 310, 947, 917, 918, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 966, 948, 320,
	321, 949, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 871, 333,
	950, 336, 337, 339, 338, 826, 214, 951, 849, 936,
	906, 340, 341, 0, 880, 343, 881, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 952, 350, 953, 960,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 961, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 899, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 954, 386, 387, 388, 389,
	836, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 872, 873, 875, 876, 403, 407,
	410, 411, 929, 412, 392, 393, 413, 955, 414, 894,
	874, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	940, 421, 422, 423, 962, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 870, 0,
	913, 914, 915, 916, 0, 443, 0, 437, 438, 963,
	439, 964, 847, 440, 441, 442, 0, 444, 445, 0,
	830, 446, 447, 448, 449, 451, 930, 452, 0, 878,
	453, 454, 455, 504, 910, 957, 0, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	827, 0, 0, 0, 0, 0, 0, 0, 825, 0,
	0, 0, 0, 823, 824, 0, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 0, 1204, 851, 883, 840,
	841, 842, 838, 839, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 932, 857, 0, 0,
	0, 221, 222, 223, 224, 464, 898, 877, 909, 867,
	908, 907, 0, 228, 869, 868, 231, 232, 233, 859,
	931, 234, 967, 968, 470, 0, 235, 938, 0, 921,
	0, 236, 237, 238, 239, 240, 0, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 941,
	249, 250, 924, 922, 923, 928, 926, 925, 927, 251,
	252, 253, 254, 912, 256, 905, 904, 829, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 903, 263, 0,
	264, 0, 265, 266, 0, 835, 267, 0, 268, 270,
	273, 269, 274, 275, 276, 958, 959, 848, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 902, 900, 901,
	0, 282, 0, 283, 0, 0, 942, 284, 285, 0,
	286, 965, 0, 858, 287, 0, 288, 289, 290, 291,
	1203, 934, 937, 944, 292, 293, 0, 294, 295, 296,
	879, 0, 0, 0, 213, 297, 299, 306, 0, 943,
	300, 891, 882, 893, 895, 896, 897, 892, 0, 884,
	0, 307, 945, 935, 946, 308, 309, 310, 947, 917,
	918, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 966, 948, 320, 321, 949, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 871, 333, 950, 336, 337, 339, 338,
	826, 214, 951, 849, 936, 906, 340, 341, 0, 880,
	343, 881, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 952, 350, 953, 960, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 961, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 899,
	369, 370, 0, 371, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	954, 386, 387, 388, 389, 836, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 872,
	873, 875, 876, 403, 407, 410, 411, 929, 412, 392,
	393, 413, 955, 414, 894, 874, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 940, 421, 422, 423, 962,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 870, 0, 913, 914, 915, 916, 0,
	443, 0, 437, 438, 963, 439, 964, 847, 440, 441,
	442, 0, 444, 445, 0, 830, 446, 447, 448, 449,
	451, 930, 452, 0, 878, 453, 454, 455, 504, 910,
	957, 0, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 827, 0, 0, 0, 0,
	0, 0, 0, 825, 0, 0, 0, 0, 823, 824,
	0, 0, 0, 0, 0, 0, 0, 853, 0, 0,
	0, 1198, 851, 883, 840, 841, 842, 838, 839, 852,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 932, 857, 0, 0, 0, 221, 222, 223, 224,
	464, 898, 877, 909, 867, 908, 907, 0, 228, 869,
	868, 231, 232, 233, 859, 931, 234, 967, 968, 470,
	0, 235, 938, 0, 921, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 941, 249, 250, 924, 922, 923,
	928, 926, 925, 927, 251, 252, 253, 254, 912, 256,
	905, 904, 829, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 903, 263, 0, 264, 0, 265, 266, 0,
	835, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	958, 959, 848, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 902, 900, 901, 0, 282, 0, 283, 0,
	0, 942, 284, 285, 0, 286, 965, 0, 858, 287,
	0, 288, 289, 290, 291, 1197, 934, 937, 944, 292,
	293, 0, 294, 295, 296, 879, 0, 0, 0, 213,
	297, 299, 306, 0, 943, 300, 891, 882, 893, 895,
	896, 897, 892, 0, 884, 0, 307, 945, 935, 946,
	308, 309, 310, 947, 917, 918, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 966, 948, 320,
	321, 949, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 871, 333,
	950, 336, 337, 339, 338, 826, 214, 951, 849, 936,
	906, 340, 341, 0, 880, 343, 881, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 952, 350, 953, 960,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 961, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 899, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 954, 386, 387, 388, 389,
	836, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 872, 873, 875, 876, 403, 407,
	410, 411, 929, 412, 392, 393, 413, 955, 414, 894,
	874, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	940, 421, 422, 423, 962, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 870, 0,
	913, 914, 915, 916, 0, 443, 0, 437, 438, 963,
	439, 964, 847, 440, 441, 442, 0, 444, 445, 0,
	830, 446, 447, 448, 449, 451, 930, 452, 0, 878,
	453, 454, 455, 504, 910, 957, 0, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	827, 0, 0, 0, 0, 0, 0, 0, 825, 0,
	0, 0, 0, 823, 824, 0, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 0, 1193, 851, 883, 840,
	841, 842, 838, 839, 852, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 932, 857, 0, 0,
	0, 221, 222, 223, 224, 464, 898, 877, 909, 867,
	908, 907, 0, 228, 869, 868, 231, 232, 233, 859,
	931, 234, 967, 968, 470, 0, 235, 938, 0, 921,
	0, 236, 237, 238, 239, 240, 0, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 941,
	249, 250, 924, 922, 923, 928, 926, 925, 927, 251,
	252, 253, 254, 912, 256, 905, 904, 829, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 903, 263, 0,
	264, 0, 265, 266, 0, 835, 267, 0, 268, 270,
	273, 269, 274, 275, 276, 958, 959, 848, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 902, 900, 901,
	0, 282, 0, 283, 0, 0, 942, 284, 285, 0,
	286, 965, 0, 858, 287, 0, 288, 289, 290, 291,
	933, 934, 937, 944, 292, 293, 0, 294, 295, 296,
	879, 0, 0, 0, 213, 297, 299, 306, 0, 943,
	300, 891, 882, 893, 895, 896, 897, 892, 0, 884,
	0, 307, 945, 935, 946, 308, 309, 310, 947, 917,
	918, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 966, 948, 320, 321, 949, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 871, 333, 950, 336, 337, 339, 338,
	826, 214, 951, 849, 936, 906, 340, 341, 0, 880,
	343, 881, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 952, 350, 953, 960, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 961, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 899,
	369, 370, 0, 371, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	954, 386, 387, 388, 389, 836, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 872,
	873, 875, 876, 403, 407, 410, 411, 929, 412, 392,
	393, 413, 955, 414, 894, 874, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 940, 421, 422, 423, 962,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 870, 0, 913, 914, 915, 916, 0,
	443, 0, 437, 438, 963, 439, 964, 847, 440, 441,
	442, 0, 444, 445, 0, 830, 446, 447, 448, 449,
	451, 930, 452, 0, 878, 453, 454, 455, 504, 910,
	957, 0, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 827, 0, 0, 0, 0,
	0, 0, 0, 825, 0, 0, 0, 0, 823, 824,
	883, 840, 841, 842, 838, 839, 852, 853, 0, 0,
	0, 0, 851, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 932, 857,
	0, 0, 0, 221, 222, 223, 224, 464, 898, 877,
	909, 867, 908, 907, 0, 228, 869, 868, 231, 232,
	233, 859, 931, 234, 967, 968, 470, 0, 235, 938,
	0, 921, 0, 236, 237, 238, 239, 240, 0, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 941, 249, 250, 924, 922, 923, 928, 926, 925,
	927, 251, 252, 253, 254, 912, 256, 905, 904, 829,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 903,
	263, 0, 264, 0, 265, 266, 0, 835, 267, 0,
	268, 270, 273, 269, 274, 275, 276, 958, 959, 848,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 902,
	900, 901, 0, 282, 0, 283, 0, 0, 942, 284,
	285, 0, 286, 965, 0, 858, 287, 0, 288, 289,
	290, 291, 933, 934, 937, 944, 292, 293, 0, 294,
	295, 296, 879, 0, 0, 0, 213, 297, 299, 306,
	0, 943, 300, 891, 882, 893, 895, 896, 897, 892,
	0, 884, 0, 307, 945, 935, 946, 308, 309, 310,
	947, 917, 918, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 966, 948, 320, 321, 949, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 871, 333, 950, 336, 337,
	339, 338, 826, 214, 951, 849, 936, 906, 340, 341,
	0, 880, 343, 881, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 952, 350, 953, 960, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 961, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 899, 369, 370, 0, 371, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 954, 386, 387, 388, 389, 836, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 872, 873, 875, 876, 403, 407, 410, 411, 929,
	412, 392, 393, 413, 955, 414, 894, 874, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 940, 421, 422,
	423, 962, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 870, 0, 913, 914, 915,
	916, 0, 443, 0, 437, 438, 963, 439, 964, 847,
	440, 441, 442, 0, 444, 445, 0, 830, 446, 447,
	448, 449, 451, 930, 452, 0, 878, 453, 454, 455,
	504, 910, 957, 0, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 827, 0, 0,
	0, 0, 0, 0, 0, 825, 0, 0, 0, 0,
	823, 824, 883, 840, 841, 842, 838, 839, 852, 853,
	0, 0, 0, 0, 851, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	932, 857, 0, 0, 0, 221, 222, 223, 224, 464,
	898, 877, 909, 867, 908, 907, 0, 228, 869, 868,
	231, 232, 233, 859, 931, 234, 967, 968, 470, 0,
	235, 938, 0, 921, 0, 236, 237, 238, 239, 240,
	0, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 941, 249, 3361, 924, 922, 923, 928,
	926, 925, 927, 251, 252, 253, 254, 912, 256, 905,
	904, 829, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 903, 263, 0, 264, 0, 265, 266, 0, 835,
	267, 0, 268, 270, 273, 269, 274, 275, 276, 958,
	959, 848, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 902, 900, 901, 0, 282, 0, 283, 0, 0,
	942, 284, 285, 0, 286, 965, 0, 858, 287, 0,
	288, 289, 290, 291, 933, 934, 937, 944, 292, 293,
	0, 294, 295, 296, 879, 0, 0, 0, 213, 297,
	299, 306, 0, 943, 300, 891, 882, 893, 895, 896,
	897, 892, 0, 884, 0, 307, 945, 935, 946, 308,
	309, 310, 947, 917, 918, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 966, 948, 320, 321,
	949, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 871, 333, 950,
	336, 337, 339, 338, 826, 214, 951, 849, 936, 906,
	340, 341, 0, 880, 343, 881, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 952, 350, 953, 960, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	961, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 899, 369, 370, 0, 371, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 954, 386, 387, 388, 389, 836,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 872, 873, 875, 876, 403, 407, 410,
	411, 929, 412, 392, 393, 413, 955, 414, 894, 874,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 940,
	421, 422, 423, 962, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 870, 0, 913,
	914, 915, 916, 0, 443, 0, 437, 438, 963, 439,
	964, 847, 440, 441, 442, 0, 3360, 445, 0, 830,
	446, 447, 448, 449, 451, 930, 452, 0, 878, 453,
	454, 455, 504, 910, 957, 0, 457, 456, 507, 0,
	0, 0, 0, 458, 459, 508, 460, 461, 462, 827,
	0, 0, 0, 0, 0, 0, 0, 825, 0, 0,
	0, 0, 823, 824, 883, 840, 841, 842, 838, 839,
	852, 853, 0, 0, 0, 0, 851, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 932, 857, 0, 0, 0, 221, 222, 223,
	224, 3359, 898, 877, 909, 867, 908, 907, 0, 228,
	869, 868, 231, 232, 233, 859, 931, 234, 967, 968,
	470, 0, 235, 938, 0, 921, 0, 236, 237, 238,
	239, 240, 0, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 941, 249, 3361, 924, 922,
	923, 928, 926, 925, 927, 251, 252, 253, 254, 912,
	256, 905, 904, 829, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 903, 263, 0, 264, 0, 265, 266,
	0, 835, 267, 0, 268, 270, 273, 269, 274, 275,
	276, 958, 959, 848, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 902, 900, 901, 0, 282, 0, 283,
	0, 0, 942, 284, 285, 0, 286, 965, 0, 858,
	287, 0, 288, 289, 290, 291, 933, 934, 937, 944,
	292, 293, 0, 294, 295, 296, 879, 0, 0, 0,
	213, 297, 299, 306, 0, 943, 300, 891, 882, 893,
	895, 896, 897, 892, 0, 884, 0, 307, 945, 935,
	946, 308, 309, 310, 947, 917, 918, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 966, 948,
	320, 321, 949, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 871,
	333, 950, 336, 337, 339, 338, 826, 214, 951, 849,
	936, 906, 340, 341, 0, 880, 343, 881, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 952, 350, 953,
	960, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 961, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 899, 369, 370, 0, 371,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 954, 386, 387, 388,
	389, 836, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 872, 873, 875, 876, 403,
	407, 410, 411, 929, 412, 392, 393, 413, 955, 414,
	894, 874, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 940, 421, 422, 423, 962, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 870,
	0, 913, 914, 915, 916, 0, 443, 0, 437, 438,
	963, 439, 964, 847, 440, 441, 442, 0, 3360, 445,
	0, 830, 446, 447, 448, 449, 451, 930, 452, 0,
	878, 453, 454, 455, 504, 910, 957, 0, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 827, 0, 0, 0, 0, 0, 0, 0, 825,
	0, 0, 0, 0, 823, 824, 883, 840, 841, 842,
	838, 839, 852, 853, 0, 0, 0, 0, 851, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 932, 857, 0, 0, 0, 221,
	222, 223, 224, 464, 898, 877, 909, 867, 908, 907,
	0, 228, 869, 868, 231, 232, 233, 859, 931, 234,
	967, 968, 470, 0, 235, 938, 0, 921, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 941, 249, 250,
	924, 922, 923, 928, 926, 925, 927, 251, 252, 253,
	254, 912, 256, 905, 904, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 903, 263, 0, 264, 0,
	265, 266, 0, 835, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 958, 959, 848, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 902, 900, 901, 0, 282,
	0, 283, 0, 0, 942, 284, 285, 0, 286, 965,
	0, 858, 287, 0, 288, 289, 290, 291, 933, 934,
	937, 944, 292, 293, 0, 294, 295, 296, 879, 0,
	0, 0, 213, 297, 299, 306, 0, 943, 300, 891,
	882, 893, 895, 896, 897, 892, 0, 884, 0, 307,
	945, 935, 946, 308, 309, 310, 947, 917, 918, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	966, 948, 320, 321, 949, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 871, 333, 950, 336, 337, 339, 338, 0, 214,
	951, 849, 936, 906, 340, 341, 0, 880, 343, 881,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 952,
	350, 953, 960, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 961, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 899, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 954, 386,
	387, 388, 389, 836, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 872, 873, 875,
	876, 403, 407, 410, 411, 929, 412, 392, 393, 413,
	955, 414, 894, 874, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 940, 421, 422, 423, 962, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 870, 0, 913, 914, 915, 916, 0, 443, 0,
	437, 438, 963, 439, 964, 847, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 451, 930,
	452, 0, 878, 453, 454, 455, 504, 910, 957, 0,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 883, 840, 841, 842, 838, 839, 852,
	0, 2084, 0, 0, 0, 0, 2082, 2083, 0, 0,
	215, 216, 217, 218, 219, 853, 220, 0, 0, 0,
	851, 932, 857, 0, 0, 0, 221, 222, 223, 224,
	0, 898, 877, 909, 867, 908, 907, 0, 228, 869,
	868, 231, 232, 233, 859, 931, 234, 967, 968, 470,
	0, 235, 938, 0, 921, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 941, 249, 3361, 924, 922, 923,
	928, 926, 925, 927, 251, 252, 253, 254, 912, 256,
	905, 904, 829, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 903, 263, 0, 264, 0, 265, 266, 0,
	835, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	958, 959, 848, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 902, 900, 901, 0, 282, 0, 283, 0,
	0, 942, 284, 285, 0, 286, 965, 0, 858, 287,
	0, 288, 289, 290, 291, 933, 934, 937, 0, 292,
	293, 0, 294, 295, 296, 879, 0, 0, 0, 213,
	297, 299, 306, 0, 943, 300, 891, 882, 893, 895,
	896, 897, 892, 0, 884, 0, 307, 0, 935, 0,
	308, 309, 310, 947, 917, 918, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 966, 948, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 871, 333,
	950, 336, 337, 339, 338, 826, 214, 0, 849, 936,
	906, 340, 341, 0, 880, 343, 881, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 952, 350, 953, 960,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 961, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 899, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 954, 386, 387, 388, 389,
	836, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 872, 873, 875, 876, 403, 407,
	410, 411, 929, 412, 392, 393, 413, 0, 414, 894,
	874, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	940, 421, 422, 423, 962, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 870, 0,
	913, 914, 915, 916, 0, 443, 0, 437, 438, 963,
	439, 964, 847, 440, 441, 442, 0, 3360, 445, 0,
	830, 446, 447, 448, 449, 451, 930, 452, 0, 878,
	453, 454, 455, 504, 910, 957, 0, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 816,
	0, 1004, 0, 823, 824, 0, 0, 0, 0, 0,
	0, 0, 853, 0, 0, 0, 0, 851, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 931, 234, 468, 469, 470, 0, 235,
	938, 0, 921, 0, 236, 237, 238, 239, 240, 0,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 941, 249, 250, 924, 922, 923, 928, 926,
	925, 927, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	0, 268, 270, 273, 269, 274, 275, 276, 958, 959,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 942,
	284, 285, 0, 286, 965, 0, 479, 287, 0, 288,
	289, 290, 291, 933, 934, 937, 944, 292, 293, 0,
	294, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 0, 943, 300, 483, 302, 301, 303, 304, 305,
	484, 0, 485, 0, 307, 945, 935, 946, 308, 309,
	310, 947, 311, 312, 0, 0, 313, 314, 315, 316,
	991, 318, 317, 0, 319, 966, 948, 320, 321, 949,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 950, 336,
	337, 339, 338, 0, 214, 951, 0, 936, 489, 340,
	341, 0, 342, 343, 344, 0, 996, 346, 347, 348,
	0, 0, 349, 490, 952, 350, 953, 960, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 961,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 954, 386, 387, 388, 389, 495, 998,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 178,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	929, 412, 392, 393, 413, 955, 414, 496, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 962, 0, 428, 429, 427, 180, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 498, 499,
	500, 501, 0, 443, 0, 437, 438, 963, 439, 964,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 451, 930, 452, 0, 450, 453, 454,
	455, 1313, 505, 506, 0, 457, 456, 507, 1004, 0,
	0, 172, 458, 459, 508, 460, 461, 462, 0, 173,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 932, 0, 988, 0,
	1589, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	931, 234, 468, 469, 470, 0, 235, 938, 0, 921,
	0, 236, 237, 238, 239, 240, 0, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 941,
	249, 250, 924, 922, 923, 928, 926, 925, 927, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 0, 268, 270,
	273, 269, 274, 275, 276, 958, 959, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 942, 284, 285, 0,
	286, 965, 0, 479, 287, 0, 288, 289, 290, 291,
	933, 934, 937, 944, 292, 293, 0, 294, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 943,
	300, 483, 302, 301, 303, 304, 305, 484, 0, 485,
	0, 307, 945, 935, 946, 308, 309, 310, 947, 311,
	312, 0, 0, 313, 314, 315, 316, 991, 318, 317,
	0, 319, 966, 948, 320, 321, 949, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 950, 336, 337, 339, 338,
	0, 214, 951, 0, 936, 489, 340, 341, 0, 342,
	343, 344, 0, 996, 346, 347, 348, 0, 0, 349,
	490, 952, 350, 953, 960, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 961, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	954, 386, 387, 388, 389, 495, 998, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 178, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 929, 412, 392,
	393, 413, 955, 414, 496, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 962,
	0, 428, 429, 427, 180, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 498, 499, 500, 501, 0,
	443, 0, 437, 438, 963, 439, 964, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	451, 930, 452, 0, 450, 453, 454, 455, 1313, 505,
	506, 0, 457, 456, 507, 0, 0, 0, 172, 458,
	459, 508, 460, 461, 462, 0, 173, 0, 0, 2516,
	0, 1004, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 988, 0, 1589, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 932,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 931, 234, 468, 469, 470, 0, 235,
	938, 0, 921, 0, 236, 237, 238, 239, 240, 0,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 941, 249, 250, 924, 922, 923, 928, 926,
	925, 927, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	0, 268, 270, 273, 269, 274, 275, 276, 958, 959,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 942,
	284, 285, 0, 286, 965, 0, 479, 287, 0, 288,
	289, 290, 291, 933, 934, 937, 944, 292, 293, 0,
	294, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 0, 943, 300, 483, 302, 301, 303, 304, 305,
	484, 0, 485, 0, 307, 945, 935, 946, 308, 309,
	310, 947, 311, 312, 0, 0, 313, 314, 315, 316,
	991, 318, 317, 0, 319, 966, 948, 320, 321, 949,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 950, 336,
	337, 339, 338, 0, 214, 951, 0, 936, 489, 340,
	341, 0, 342, 343, 344, 0, 996, 346, 347, 348,
	0, 0, 349, 490, 952, 350, 953, 960, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 961,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 954, 386, 387, 388, 389, 495, 998,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	929, 412, 392, 393, 413, 955, 414, 496, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 962, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 498, 499,
	500, 501, 0, 443, 0, 437, 438, 963, 439, 964,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 451, 930, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 0, 987,
	0, 1004, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 988, 932,
	993, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 931, 234, 468, 469, 470, 0, 235,
	938, 0, 921, 0, 236, 237, 238, 239, 240, 0,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 941, 249, 250, 924, 922, 923, 928, 926,
	925, 927, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	0, 268, 270, 273, 269, 274, 275, 276, 958, 959,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 942,
	284, 285, 0, 286, 965, 0, 479, 287, 0, 288,
	289, 290, 291, 933, 934, 937, 944, 292, 293, 0,
	294, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 0, 943, 300, 483, 302, 301, 303, 304, 305,
	484, 0, 485, 0, 307, 945, 935, 946, 308, 309,
	310, 947, 311, 312, 0, 0, 313, 314, 315, 316,
	991, 318, 317, 0, 319, 966, 948, 320, 321, 949,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 950, 336,
	337, 339, 338, 0, 214, 951, 0, 936, 489, 340,
	341, 0, 342, 343, 344, 0, 996, 346, 347, 348,
	0, 0, 349, 490, 952, 350, 953, 960, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 961,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 954, 386, 387, 388, 389, 495, 998,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	929, 412, 392, 393, 413, 955, 414, 496, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 962, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 498, 499,
	500, 501, 0, 443, 0, 437, 438, 963, 439, 964,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 451, 930, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 1004, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 932, 0, 988, 0,
	993, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	931, 234, 468, 469, 470, 0, 235, 938, 0, 921,
	0, 236, 237, 238, 239, 240, 0, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 941,
	249, 250, 924, 922, 923, 928, 926, 925, 927, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 0, 268, 270,
	273, 269, 274, 275, 276, 958, 959, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 942, 284, 285, 0,
	286, 965, 0, 479, 287, 0, 288, 289, 290, 291,
	933, 934, 937, 944, 292, 293, 0, 294, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 943,
	300, 483, 302, 301, 303, 304, 305, 484, 0, 485,
	0, 307, 945, 935, 946, 308, 309, 310, 947, 311,
	312, 0, 0, 313, 314, 315, 316, 991, 318, 317,
	0, 319, 966, 948, 320, 321, 949, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 950, 336, 337, 339, 338,
	0, 214, 951, 0, 936, 489, 340, 341, 0, 342,
	343, 344, 0, 996, 346, 347, 348, 0, 0, 349,
	490, 952, 350, 953, 960, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 961, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	954, 386, 387, 388, 389, 495, 998, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 929, 412, 392,
	393, 413, 955, 414, 496, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 962,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 498, 499, 500, 501, 0,
	443, 0, 437, 438, 963, 439, 964, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	451, 930, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 1004, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 932, 0, 988, 0, 993, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 931, 234, 468,
	469, 470, 0, 235, 938, 0, 921, 0, 236, 237,
	238, 239, 240, 0, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 941, 249, 250, 924,
	922, 923, 928, 926, 925, 927, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 0, 268, 270, 273, 269, 274,
	275, 276, 958, 959, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 942, 284, 285, 0, 286, 965, 0,
	479, 287, 0, 288, 289, 290, 291, 933, 934, 937,
	944, 292, 293, 0, 294, 295, 296, 298, 0, 0,
	0, 213, 297, 299, 306, 0, 943, 300, 483, 302,
	301, 303, 304, 305, 484, 0, 485, 0, 307, 945,
	935, 946, 308, 309, 310, 947, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 966,
	948, 320, 321, 949, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 950, 336, 337, 339, 338, 0, 214, 951,
	0, 936, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 952, 350,
	953, 960, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 961, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 954, 386, 387,
	388, 389, 495, 998, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 929, 412, 392, 393, 413, 955,
	414, 496, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 962, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 498, 499, 500, 501, 0, 443, 0, 437,
	438, 963, 439, 964, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 451, 930, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 816, 0, 1168, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 1491, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 1070, 0, 236, 237, 238,
	239, 240, 0, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 941, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 0, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 942, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 480, 481, 482, 944,
	292, 293, 0, 294, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 943, 300, 483, 302, 301,
	303, 304, 305, 484, 0, 485, 0, 307, 945, 486,
	946, 308, 309, 310, 947, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 487, 948,
	320, 321, 949, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 950, 336, 337, 339, 338, 0, 0, 951, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 952, 350, 953,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 954, 386, 387, 388,
	389, 495, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 178, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 955, 414,
	496, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 497, 0, 428, 429, 427,
	180, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 498, 499, 500, 501, 0, 443, 0, 437, 438,
	502, 439, 503, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 1313, 505, 506, 0, 457, 456,
	507, 1310, 0, 1168, 172, 458, 459, 508, 460, 461,
	462, 0, 173, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 150, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 1070, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 941, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 942, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 944, 292,
	293, 0, 294, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 943, 300, 483, 302, 301, 303,
	304, 305, 484, 0, 485, 0, 307, 945, 486, 946,
	308, 309, 310, 947, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 487, 948, 320,
	321, 949, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	950, 336, 337, 339, 338, 0, 0, 951, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 952, 350, 953, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 954, 386, 387, 388, 389,
	495, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 178, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 955, 414, 496,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 497, 0, 428, 429, 427, 180,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	498, 499, 500, 501, 0, 443, 0, 437, 438, 502,
	439, 503, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 1313, 505, 506, 0, 457, 456, 507,
	0, 0, 0, 172, 458, 459, 508, 460, 461, 462,
	0, 173, 0, 0, 0, 0, 1168, 1167, 0, 0,
	0, 0, 1165, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 1070, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 941, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 942, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 944, 292, 293, 0, 294, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 943, 300, 483,
	302, 301, 303, 304, 305, 484, 0, 485, 0, 307,
	945, 486, 946, 308, 309, 310, 947, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	487, 948, 320, 321, 949, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 950, 336, 337, 339, 338, 0, 0,
	951, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 952,
	350, 953, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 954, 386,
	387, 388, 389, 495, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	955, 414, 496, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 497, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 498, 499, 500, 501, 0, 443, 0,
	437, 438, 502, 439, 503, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 1168, 1167, 0, 0, 0, 0, 1165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 2712, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 1070, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 941, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 942, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 944, 292,
	293, 0, 294, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 943, 300, 483, 302, 301, 303,
	304, 305, 484, 0, 485, 0, 307, 945, 486, 946,
	308, 309, 310, 947, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 487, 948, 320,
	321, 949, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	950, 336, 337, 339, 338, 0, 0, 951, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 952, 350, 953, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 954, 386, 387, 388, 389,
	495, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 955, 414, 496,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 497, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	498, 499, 500, 501, 0, 443, 0, 437, 438, 502,
	439, 503, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	1004, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 932, 0,
	0, 0, 1319, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 931, 234, 468, 469, 470, 0, 235, 938,
	0, 921, 0, 236, 237, 238, 239, 240, 0, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 941, 249, 250, 924, 922, 923, 928, 926, 925,
	927, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 0,
	268, 270, 273, 269, 274, 275, 276, 958, 959, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 942, 284,
	285, 0, 286, 965, 0, 479, 287, 0, 288, 289,
	290, 291, 933, 934, 937, 944, 292, 293, 0, 294,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	0, 943, 300, 483, 302, 301, 303, 304, 305, 484,
	0, 485, 0, 307, 945, 935, 946, 308, 309, 310,
	947, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 966, 948, 320, 321, 949, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 950, 336, 337,
	339, 338, 0, 214, 951, 0, 936, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 952, 350, 953, 960, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 961, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 954, 386, 387, 388, 389, 495, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 929,
	412, 392, 393, 413, 955, 414, 496, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 962, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 498, 499, 500,
	501, 0, 443, 0, 437, 438, 963, 439, 964, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 451, 930, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 816, 0, 209,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 0, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 480, 481, 482, 0, 292, 293, 0, 294, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 483, 302, 301, 303, 304, 305, 484, 0,
	485, 0, 307, 0, 486, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 487, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 495, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 178, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 496, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	497, 0, 428, 429, 427, 180, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 498, 499, 500, 501,
	0, 443, 0, 437, 438, 502, 439, 503, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 1313,
	505, 506, 0, 457, 456, 507, 209, 0, 0, 172,
	458, 459, 508, 460, 461, 462, 0, 173, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 150, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 0, 292, 293, 0, 294, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 0, 0, 300, 483,
	302, 301, 303, 304, 305, 484, 0, 485, 0, 307,
	0, 486, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	487, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 214,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 495, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 496, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 497, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 498, 499, 500, 501, 0, 443, 0,
	437, 438, 502, 439, 503, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 209, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 1594, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 0, 292,
	293, 0, 294, 295, 296, 298, 0, 0, 0, 213,
	297, 299, 306, 0, 0, 300, 483, 302, 301, 303,
	304, 305, 484, 0, 485, 0, 307, 0, 486, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 487, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 214, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	495, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 496,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 497, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	498, 499, 500, 501, 0, 443, 0, 437, 438, 502,
	439, 503, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	209, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	2660, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 0,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 0, 292, 293, 0, 294,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 483, 302, 301, 303, 304, 305, 484,
	0, 485, 0, 307, 0, 486, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 487, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 495, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 496, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 497, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 498, 499, 500,
	501, 0, 443, 0, 437, 438, 502, 439, 503, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 209, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 2312,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 0, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 0, 292, 293, 0, 294, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	483, 302, 301, 303, 304, 305, 484, 0, 485, 0,
	307, 0, 486, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 487, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 495, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 496, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 497, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 498, 499, 500, 501, 0, 443,
	0, 437, 438, 502, 439, 503, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 690, 0, 581, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 2784, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 587,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 0, 292, 293, 0, 294, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 0, 0, 300, 483,
	302, 301, 303, 304, 305, 484, 0, 485, 0, 307,
	0, 486, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	487, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 214,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 495, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 496, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 497, 0, 428,
	429, 427, 586, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 498, 499, 500, 501, 0, 443, 0,
	437, 438, 502, 439, 503, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 0, 580, 0, 581, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 590, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 587,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 0, 292, 293, 0, 294, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 0, 0, 300, 483,
	302, 301, 303, 304, 305, 484, 0, 485, 0, 307,
	0, 486, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	487, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 214,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 495, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 496, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 497, 0, 428,
	429, 427, 586, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 498, 499, 500, 501, 0, 443, 0,
	437, 438, 502, 439, 503, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 581,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 590, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 587, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 0, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 480, 481, 482, 0, 292, 293, 0, 294, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 0,
	0, 300, 483, 302, 301, 303, 304, 305, 484, 0,
	485, 0, 307, 0, 486, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 487, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 214, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 1871, 387, 388, 389, 495, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 496, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	497, 0, 428, 429, 427, 586, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 498, 499, 500, 501,
	0, 443, 0, 437, 438, 502, 439, 503, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 581, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 590, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 587, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 0, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 480, 481, 482, 0, 292, 293,
	0, 294, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 0, 0, 300, 483, 302, 301, 303, 304,
	305, 484, 0, 485, 0, 307, 0, 486, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 487, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 214, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 495,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 496, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 497, 0, 428, 429, 427, 586, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 498,
	499, 500, 501, 0, 443, 0, 437, 438, 502, 439,
	503, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 209, 457, 456, 507, 0,
	0, 0, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 590, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 0, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	0, 292, 293, 0, 294, 295, 296, 298, 0, 0,
	0, 213, 297, 299, 306, 0, 0, 300, 483, 302,
	301, 303, 304, 305, 484, 0, 485, 0, 307, 0,
	486, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 487,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 214, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 495, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 496, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 497, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 498, 499, 500, 501, 0, 443, 0, 437,
	438, 502, 439, 503, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 1341, 0, 1168, 1167, 0, 0, 0, 0,
	1165, 0, 0, 0, 0, 0, 0, 590, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 0, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 1070, 0, 236, 237, 238,
	239, 240, 0, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 941, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 0, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 212, 0, 0, 0, 0, 0,
	1340, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 942, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 480, 481, 482, 944,
	292, 293, 0, 294, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 943, 300, 483, 302, 301,
	303, 304, 305, 484, 0, 485, 0, 307, 945, 486,
	946, 308, 309, 310, 947, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 487, 948,
	320, 321, 949, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 950, 336, 337, 339, 338, 0, 0, 951, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 952, 350, 953,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 1339, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 954, 386, 387, 388,
	389, 495, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 955, 414,
	496, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 497, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 498, 499, 500, 501, 0, 443, 0, 437, 438,
	502, 439, 503, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 0, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 1308, 0, 1168, 1167, 0, 0, 0, 0, 1165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 1070, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 941, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 942, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 1307, 481, 482, 944, 292,
	293, 0, 294, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 943, 300, 483, 302, 301, 303,
	304, 305, 484, 0, 485, 0, 307, 945, 486, 946,
	308, 309, 310, 947, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 487, 948, 320,
	321, 949, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	950, 336, 337, 339, 338, 0, 0, 951, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 952, 350, 953, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 954, 386, 387, 388, 389,
	495, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 955, 414, 496,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 497, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	498, 499, 500, 501, 0, 443, 0, 437, 438, 502,
	439, 503, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	1304, 0, 1168, 1167, 0, 0, 0, 0, 1165, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 1070, 0, 236, 237, 238, 239, 240,
	0, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 941, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 0, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	942, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 1303, 481, 482, 944, 292, 293,
	0, 294, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 943, 300, 483, 302, 301, 303, 304,
	305, 484, 0, 485, 0, 307, 945, 486, 946, 308,
	309, 310, 947, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 487, 948, 320, 321,
	949, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 950,
	336, 337, 339, 338, 0, 0, 951, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 952, 350, 953, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 954, 386, 387, 388, 389, 495,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 955, 414, 496, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 497, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 498,
	499, 500, 501, 0, 443, 0, 437, 438, 502, 439,
	503, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 0, 457, 456, 507, 0,
	0, 0, 0, 458, 459, 508, 460, 461, 462, 1243,
	0, 1168, 1167, 0, 0, 0, 0, 1165, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 1070, 0, 236, 237, 238, 239, 240, 0,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 941, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	0, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 942,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 1242, 481, 482, 944, 292, 293, 0,
	294, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 943, 300, 483, 302, 301, 303, 304, 305,
	484, 0, 485, 0, 307, 945, 486, 946, 308, 309,
	310, 947, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 487, 948, 320, 321, 949,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 950, 336,
	337, 339, 338, 0, 0, 951, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 952, 350, 953, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 954, 386, 387, 388, 389, 495, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 955, 414, 496, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 497, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 498, 499,
	500, 501, 0, 443, 0, 437, 438, 502, 439, 503,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 1240, 0,
	1168, 1167, 0, 0, 0, 0, 1165, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 1070, 0, 236, 237, 238, 239, 240, 0, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 941, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 0,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 942, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 1239, 481, 482, 944, 292, 293, 0, 294,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 943, 300, 483, 302, 301, 303, 304, 305, 484,
	0, 485, 0, 307, 945, 486, 946, 308, 309, 310,
	947, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 487, 948, 320, 321, 949, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 950, 336, 337,
	339, 338, 0, 0, 951, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 952, 350, 953, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 954, 386, 387, 388, 389, 495, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 955, 414, 496, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 497, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 498, 499, 500,
	501, 0, 443, 0, 437, 438, 502, 439, 503, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 1161, 0, 1168,
	1167, 0, 0, 0, 0, 1165, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	1070, 0, 236, 237, 238, 239, 240, 0, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	941, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 0, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 942, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 1163, 481, 482, 944, 292, 293, 0, 294, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	943, 300, 483, 302, 301, 303, 304, 305, 484, 0,
	485, 0, 307, 945, 486, 946, 308, 309, 310, 947,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 487, 948, 320, 321, 949, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 950, 336, 337, 339,
	338, 0, 0, 951, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 952, 350, 953, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 954, 386, 387, 388, 389, 495, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 955, 414, 496, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	497, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 498, 499, 500, 501,
	0, 443, 0, 437, 438, 502, 439, 503, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 0, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 1168, 1167, 0, 0,
	0, 0, 1165, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 1070, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 941, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 942, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 944, 292, 293, 0, 294, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 943, 300, 483,
	302, 301, 303, 304, 305, 484, 0, 485, 0, 307,
	945, 486, 946, 308, 309, 310, 947, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	487, 948, 320, 321, 949, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 950, 336, 337, 339, 338, 0, 0,
	951, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 952,
	350, 953, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 954, 386,
	387, 388, 389, 495, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	955, 414, 496, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 497, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 498, 499, 500, 501, 0, 443, 0,
	437, 438, 502, 439, 503, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 1168, 1167, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 1070, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 941, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 942, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 944, 292,
	293, 0, 294, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 943, 300, 483, 302, 301, 303,
	304, 305, 484, 0, 485, 0, 307, 945, 486, 946,
	308, 309, 310, 947, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 487, 948, 320,
	321, 949, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	950, 336, 337, 339, 338, 0, 0, 951, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 952, 350, 953, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 954, 386, 387, 388, 389,
	495, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 955, 414, 496,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 497, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	498, 499, 500, 501, 0, 443, 0, 437, 438, 502,
	439, 503, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 1168, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 1070, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 941, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 942, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 944, 292, 293, 0, 294, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 943, 300, 483,
	302, 301, 303, 304, 305, 484, 0, 485, 0, 307,
	945, 486, 946, 308, 309, 310, 947, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	487, 948, 320, 321, 949, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 950, 336, 337, 339, 338, 0, 0,
	951, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 952,
	350, 953, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 954, 386,
	387, 388, 389, 495, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	955, 414, 496, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 497, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 498, 499, 500, 501, 0, 443, 0,
	437, 438, 502, 439, 503, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 209,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 2203, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 0, 242,
	243, 244, 241, 2200, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 2207, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 2349,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 2206, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 480, 481, 482, 0, 292, 293, 0, 294, 295,
	296, 298, 0, 0, 0, 2346, 297, 299, 306, 0,
	0, 300, 483, 302, 301, 303, 304, 305, 484, 0,
	485, 0, 2348, 0, 486, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 487, 0, 320, 321, 2345, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 2205, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 495, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 496, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	497, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 498, 499, 500, 501,
	0, 443, 0, 437, 438, 502, 439, 503, 0, 440,
	441, 442, 0, 444, 445, 0, 2347, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 209, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 2203,
	235, 471, 0, 0, 2197, 236, 237, 238, 239, 240,
	0, 0, 242, 243, 244, 241, 2200, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 2207, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 2206, 0,
	0, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 2196, 481, 482, 0, 292, 293,
	0, 294, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 483, 302, 301, 303, 304,
	305, 484, 0, 485, 0, 307, 0, 486, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 487, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 2205, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 495,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 496, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 497, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 498,
	499, 500, 501, 0, 443, 0, 437, 438, 502, 439,
	503, 0, 440, 441, 442, 0, 444, 445, 0, 2204,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 0, 457, 456, 507, 1385,
	0, 209, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	0, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 212, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 480, 481, 482, 0, 292, 293, 0,
	294, 295, 296, 298, 0, 0, 0, 213, 297, 299,
	306, 0, 0, 300, 483, 302, 301, 303, 304, 305,
	484, 0, 485, 0, 307, 0, 486, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 487, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 214, 0, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 0, 350, 0, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 495, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	1388, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 496, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 497, 0, 428, 429, 427, 1386, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 498, 499,
	500, 501, 0, 443, 0, 437, 438, 502, 439, 503,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 1387, 456, 507, 1156, 0,
	209, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 0,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 1158, 481, 482, 0, 292, 293, 0, 294,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	0, 0, 300, 483, 302, 301, 303, 304, 305, 484,
	0, 485, 0, 307, 0, 486, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 487, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 214, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 996, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 495, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 496, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 497, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 498, 499, 500,
	501, 0, 443, 0, 437, 438, 502, 439, 503, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 1153, 0, 209,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 0, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 1155, 481, 482, 0, 292, 293, 0, 294, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 0,
	0, 300, 483, 302, 301, 303, 304, 305, 484, 0,
	485, 0, 307, 0, 486, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 487, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 214, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 996, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 495, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 496, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	497, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 498, 499, 500, 501,
	0, 443, 0, 437, 438, 502, 439, 503, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 0, 457, 456, 507, 1058, 0, 209, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 0, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	1060, 481, 482, 0, 292, 293, 0, 294, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 0,
	300, 483, 302, 301, 303, 304, 305, 484, 0, 485,
	0, 307, 0, 486, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 487, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 214, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 996, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 495, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 496, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 497,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 498, 499, 500, 501, 0,
	443, 0, 437, 438, 502, 439, 503, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 539, 0, 209, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 538, 219, 528,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 531, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 0, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 532, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 0, 292, 293, 0, 294, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	483, 302, 301, 303, 304, 305, 484, 0, 485, 0,
	307, 0, 486, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 487, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 495, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 533, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 496, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 497, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 498, 499, 500, 501, 0, 443,
	0, 437, 438, 502, 439, 503, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 527, 0, 209, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 528, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 531, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 532, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 0, 292, 293, 0, 294, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 483,
	302, 301, 303, 304, 305, 484, 0, 485, 0, 307,
	0, 486, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	487, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 495, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 533, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 496, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 497, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 498, 499, 500, 501, 0, 443, 0,
	437, 438, 502, 439, 503, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 209,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 0, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 480, 481, 482, 0, 292, 293, 0, 294, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 0,
	0, 300, 483, 302, 301, 303, 304, 305, 484, 0,
	485, 0, 307, 0, 486, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 487, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 214, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 996, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 495, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 496, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	497, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 498, 499, 500, 501,
	0, 443, 0, 437, 438, 502, 439, 503, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 0, 457, 456, 507, 2275, 0, 209, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 0, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	480, 481, 482, 0, 292, 293, 0, 294, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 0,
	300, 483, 302, 301, 303, 304, 305, 484, 0, 485,
	0, 307, 0, 486, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 487, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 214, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 495, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 496, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 497,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 498, 499, 500, 501, 0,
	443, 0, 437, 438, 502, 439, 503, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 1855, 0, 209, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 0, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 0, 292, 293, 0, 294, 295, 296, 298,
	0, 0, 0, 213, 297, 299, 306, 0, 0, 300,
	483, 302, 301, 303, 304, 305, 484, 0, 485, 0,
	307, 0, 486, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 487, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	214, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 495, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 496, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 497, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 498, 499, 500, 501, 0, 443,
	0, 437, 438, 502, 439, 503, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	209, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 0,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	212, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 0, 292, 293, 0, 294,
	295, 296, 298, 0, 0, 0, 213, 297, 299, 306,
	0, 0, 300, 483, 302, 301, 303, 304, 305, 484,
	0, 485, 0, 307, 0, 486, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 487, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 214, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 495, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 496, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 497, 0, 428, 429, 427, 1795, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 498, 499, 500,
	501, 0, 443, 0, 437, 438, 502, 439, 503, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 1788, 0, 209,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 0, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 212,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 1787, 481, 482, 0, 292, 293, 0, 294, 295,
	296, 298, 0, 0, 0, 213, 297, 299, 306, 0,
	0, 300, 483, 302, 301, 303, 304, 305, 484, 0,
	485, 0, 307, 0, 486, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 487, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 214, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 495, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 496, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	497, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 498, 499, 500, 501,
	0, 443, 0, 437, 438, 502, 439, 503, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 0, 457, 456, 507, 1783, 0, 209, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 0, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 212, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	1785, 481, 482, 0, 292, 293, 0, 294, 295, 296,
	298, 0, 0, 0, 213, 297, 299, 306, 0, 0,
	300, 483, 302, 301, 303, 304, 305, 484, 0, 485,
	0, 307, 0, 486, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 487, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 214, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 495, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 496, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 497,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 498, 499, 500, 501, 0,
	443, 0, 437, 438, 502, 439, 503, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 1295, 0, 209, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 0, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 212, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 1294,
	481, 482, 0, 292, 293, 0, 294, 295, 296, 298,
	0, 0, 0, 213, 297, 299, 306, 0, 0, 300,
	483, 302, 301, 303, 304, 305, 484, 0, 485, 0,
	307, 0, 486, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 487, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	214, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 495, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 496, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 497, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 498, 499, 500, 501, 0, 443,
	0, 437, 438, 502, 439, 503, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 1292, 0, 209, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 1291, 481,
	482, 0, 292, 293, 0, 294, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 0, 0, 300, 483,
	302, 301, 303, 304, 305, 484, 0, 485, 0, 307,
	0, 486, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	487, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 214,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 495, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 496, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 497, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 498, 499, 500, 501, 0, 443, 0,
	437, 438, 502, 439, 503, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 1288, 0, 209, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 0, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 212, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 1287, 481, 482,
	0, 292, 293, 0, 294, 295, 296, 298, 0, 0,
	0, 213, 297, 299, 306, 0, 0, 300, 483, 302,
	301, 303, 304, 305, 484, 0, 485, 0, 307, 0,
	486, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 487,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 214, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 495, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 496, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 497, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 498, 499, 500, 501, 0, 443, 0, 437,
	438, 502, 439, 503, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 1263, 0, 209, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 0, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 0, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 212, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 480, 481, 482, 0,
	292, 293, 0, 294, 295, 296, 298, 0, 0, 0,
	213, 297, 299, 306, 0, 0, 300, 483, 302, 301,
	303, 304, 305, 484, 0, 485, 0, 307, 0, 486,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 487, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 214, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 495, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	496, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 497, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 498, 499, 500, 501, 0, 443, 0, 437, 438,
	502, 439, 503, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 0, 457, 456,
	507, 1178, 0, 209, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 212, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 1180, 481, 482, 0, 292,
	293, 0, 294, 295, 296, 298, 0, 0, 0, 213,
	297, 299, 306, 0, 0, 300, 483, 302, 301, 303,
	304, 305, 484, 0, 485, 0, 307, 0, 486, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 487, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 214, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	495, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 496,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 497, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	498, 499, 500, 501, 0, 443, 0, 437, 438, 502,
	439, 503, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 209, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 212, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 0, 292, 293, 0, 294, 295, 296, 298, 0,
	0, 0, 213, 297, 299, 306, 0, 0, 300, 483,
	302, 301, 303, 304, 305, 484, 0, 485, 0, 307,
	0, 486, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	487, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 214,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 495, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 496, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 497, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 498, 499, 500, 501, 0, 443, 0,
	437, 438, 502, 439, 503, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 209,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 531,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 0, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	532, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 480, 481, 482, 0, 292, 293, 0, 294, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 483, 302, 301, 303, 304, 305, 484, 0,
	485, 0, 307, 0, 486, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 487, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 495, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 533, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 496, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	497, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 498, 499, 500, 501,
	0, 443, 0, 437, 438, 502, 439, 503, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 209, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 0, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 212, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 1833, 481, 482, 0, 292, 293,
	0, 294, 295, 296, 298, 0, 0, 0, 213, 297,
	299, 306, 0, 0, 300, 483, 302, 301, 303, 304,
	305, 484, 0, 485, 0, 307, 0, 486, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 487, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 214, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 495,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 496, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 497, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 498,
	499, 500, 501, 0, 443, 0, 437, 438, 502, 439,
	503, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 0, 457, 456, 507, 682,
	0, 209, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	0, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 480, 481, 482, 0, 292, 293, 0,
	294, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 483, 302, 301, 303, 304, 305,
	484, 0, 485, 0, 307, 0, 486, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 487, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 0, 350, 0, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 495, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 496, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 497, 0, 428, 429, 427, 681, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 498, 499,
	500, 501, 0, 443, 0, 437, 438, 502, 439, 503,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 516, 0,
	209, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 515, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 0,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 0, 292, 293, 0, 294,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 483, 302, 301, 303, 304, 305, 484,
	0, 485, 0, 307, 0, 486, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 487, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 514, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 495, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 496, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 497, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 498, 499, 500,
	501, 0, 443, 0, 437, 438, 502, 439, 503, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 209, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 2137, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 0, 292,
	293, 0, 294, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 483, 302, 301, 303,
	304, 305, 484, 0, 485, 0, 307, 0, 486, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 487, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	495, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 496,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 497, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	498, 499, 500, 501, 0, 443, 0, 437, 438, 502,
	439, 503, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	209, 2336, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 0,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 0, 292, 293, 0, 294,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 483, 302, 301, 303, 304, 305, 484,
	0, 485, 0, 307, 0, 486, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 487, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 495, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 496, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 497, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 498, 499, 500,
	501, 0, 443, 0, 437, 438, 502, 439, 503, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 209, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 2908, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 0, 292,
	293, 0, 294, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 483, 302, 301, 303,
	304, 305, 484, 0, 485, 0, 307, 0, 486, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 487, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	495, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 496,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 497, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	498, 499, 500, 501, 0, 443, 0, 437, 438, 502,
	439, 503, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	209, 2336, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 0,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 0, 292, 293, 0, 294,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 483, 302, 301, 303, 304, 305, 484,
	0, 485, 0, 307, 0, 486, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 487, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 2333, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 495, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 496, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 497, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 498, 499, 500,
	501, 0, 443, 0, 437, 438, 502, 439, 503, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 209, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	215, 216, 217, 218, 219, 1861, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 0, 292,
	293, 0, 294, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 483, 302, 301, 303,
	304, 305, 484, 0, 485, 0, 307, 0, 486, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 487, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	495, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 496,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 497, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	498, 499, 500, 501, 0, 443, 0, 437, 438, 502,
	439, 503, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 0, 457, 456, 507,
	1853, 0, 209, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 0, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 480, 481, 482, 0, 292, 293,
	0, 294, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 483, 302, 301, 303, 304,
	305, 484, 0, 485, 0, 307, 0, 486, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 487, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 495,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 496, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 497, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 498,
	499, 500, 501, 0, 443, 0, 437, 438, 502, 439,
	503, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 0, 457, 456, 507, 559,
	0, 209, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 1032, 0, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	0, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 480, 481, 482, 0, 292, 293, 0,
	294, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 483, 302, 301, 303, 304, 305,
	484, 0, 485, 0, 307, 0, 486, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 487, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 560, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 0, 350, 0, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 495, 390,
	0, 391, 395, 396, 556, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 496, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 497, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 555, 499,
	500, 501, 0, 443, 0, 437, 438, 502, 439, 503,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 0, 457, 456, 507, 559, 0,
	209, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 549, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 0,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 480, 481, 482, 0, 292, 293, 0, 294,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 483, 302, 301, 303, 304, 305, 484,
	0, 485, 0, 307, 0, 486, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 487, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 560, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 495, 390, 0,
	391, 395, 396, 556, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 1318, 411, 0,
	412, 392, 393, 413, 0, 414, 496, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 497, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 555, 499, 500,
	501, 0, 443, 0, 437, 438, 502, 439, 503, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 0, 457, 456, 507, 1301, 0, 209,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 0, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 1300, 481, 482, 0, 292, 293, 0, 294, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 483, 302, 301, 303, 304, 305, 484, 0,
	485, 0, 307, 0, 486, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 487, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 495, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 496, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	497, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 498, 499, 500, 501,
	0, 443, 0, 437, 438, 502, 439, 503, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 0, 457, 456, 507, 1251, 0, 209, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 0, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	1250, 481, 482, 0, 292, 293, 0, 294, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 483, 302, 301, 303, 304, 305, 484, 0, 485,
	0, 307, 0, 486, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 487, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 495, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 496, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 497,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 498, 499, 500, 501, 0,
	443, 0, 437, 438, 502, 439, 503, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 1235, 0, 209, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 0, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 0, 292, 293, 0, 294, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	483, 302, 301, 303, 304, 305, 484, 0, 485, 0,
	307, 0, 486, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 487, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 495, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 412, 392, 393,
	413, 0, 414, 496, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 497, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 498, 499, 500, 501, 0, 443,
	0, 437, 438, 502, 439, 503, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 1172, 0, 209, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 0, 292, 293, 0, 294, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 483,
	302, 301, 303, 304, 305, 484, 0, 485, 0, 307,
	0, 486, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	487, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 495, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 496, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 497, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 498, 499, 500, 501, 0, 443, 0,
	437, 438, 502, 439, 503, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 559, 0, 209, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 1032, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 0, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	0, 292, 293, 0, 294, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 483, 302,
	301, 303, 304, 305, 484, 0, 485, 0, 307, 0,
	486, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 487,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 560, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 495, 390, 0, 391, 395, 396, 556, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 496, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 497, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 555, 499, 500, 501, 0, 443, 0, 437,
	1033, 502, 439, 503, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 209, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 215, 216, 217, 218, 219,
	1015, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 0, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	480, 481, 482, 0, 292, 293, 0, 294, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 483, 302, 301, 303, 304, 305, 484, 0, 485,
	0, 307, 0, 486, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 487, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 495, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 496, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 497,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 498, 499, 500, 501, 0,
	443, 0, 437, 438, 502, 439, 503, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 0, 457, 456, 507, 559, 0, 209, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 0, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 549, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 0, 242, 243, 244,
	241, 0, 547, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 0, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 0, 292, 293, 0, 294, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	483, 302, 301, 303, 304, 305, 484, 0, 485, 0,
	307, 0, 486, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 487, 0, 320, 321, 0, 0, 322, 548, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 560, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 550, 390, 0, 391, 395, 396,
	556, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 551, 411, 0, 412, 392, 393,
	413, 0, 414, 496, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 497, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 555, 499, 500, 501, 0, 443,
	0, 437, 553, 502, 439, 503, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	0, 457, 456, 507, 543, 0, 209, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 0, 292, 293, 0, 294, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 483,
	302, 301, 303, 304, 305, 484, 0, 485, 0, 307,
	0, 486, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	487, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 495, 390, 0, 391, 544, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 496, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 497, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 498, 499, 500, 501, 0, 443, 0,
	437, 438, 502, 439, 503, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 0,
	457, 456, 507, 541, 0, 209, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 0, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 480, 481, 482,
	0, 292, 293, 0, 294, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 483, 302,
	301, 303, 304, 305, 484, 0, 485, 0, 307, 0,
	486, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 487,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 495, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 496, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 497, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 498, 499, 500, 501, 0, 443, 0, 437,
	438, 502, 439, 503, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 0, 457,
	456, 507, 535, 0, 209, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 0, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 0, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 480, 481, 482, 0,
	292, 293, 0, 294, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 483, 302, 301,
	303, 304, 305, 484, 0, 485, 0, 307, 0, 486,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 487, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 495, 390, 0, 391, 395, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	496, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 497, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 498, 499, 500, 501, 0, 443, 0, 437, 438,
	502, 439, 503, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 0, 457, 456,
	507, 511, 0, 209, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 480, 481, 482, 0, 292,
	293, 0, 294, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 483, 302, 301, 303,
	304, 305, 484, 0, 485, 0, 307, 0, 486, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 487, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	495, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 496,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 497, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	498, 499, 500, 501, 0, 443, 0, 437, 438, 502,
	439, 503, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 209, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 0, 292, 293, 0, 294, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 483,
	302, 301, 303, 304, 305, 484, 0, 485, 0, 307,
	0, 486, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	487, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 369, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 495, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 496, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 497, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 498, 499, 500, 501, 0, 443, 0,
	437, 438, 502, 439, 503, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 209,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 0, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 287, 0, 288, 289, 290,
	291, 2673, 481, 482, 0, 292, 293, 0, 294, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 483, 302, 301, 303, 304, 305, 484, 0,
	485, 0, 307, 0, 486, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 487, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	354, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 366, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 495, 390, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 496, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	497, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 498, 499, 500, 501,
	0, 443, 0, 437, 438, 502, 439, 503, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 209, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 0, 0, 0, 215,
	216, 217, 218, 219, 0, 220, 0, 0, 0, 0,
	463, 0, 0, 0, 0, 221, 222, 223, 224, 464,
	465, 225, 466, 226, 227, 467, 0, 228, 229, 230,
	231, 232, 233, 0, 0, 234, 468, 469, 470, 0,
	235, 471, 0, 0, 0, 236, 237, 238, 239, 240,
	0, 0, 242, 243, 244, 241, 0, 245, 0, 246,
	247, 248, 0, 0, 249, 250, 0, 0, 0, 0,
	0, 0, 0, 251, 252, 253, 254, 255, 256, 472,
	473, 0, 257, 0, 259, 258, 0, 260, 0, 0,
	261, 262, 263, 0, 264, 0, 265, 266, 0, 474,
	267, 0, 268, 270, 273, 269, 274, 275, 276, 475,
	476, 0, 0, 0, 0, 0, 0, 0, 277, 278,
	279, 477, 280, 281, 0, 282, 0, 283, 0, 0,
	0, 284, 285, 0, 286, 478, 0, 479, 287, 0,
	288, 289, 290, 291, 2605, 481, 482, 0, 292, 293,
	0, 294, 295, 296, 298, 0, 0, 0, 0, 297,
	299, 306, 0, 0, 300, 483, 302, 301, 303, 304,
	305, 484, 0, 485, 0, 307, 0, 486, 0, 308,
	309, 310, 0, 311, 312, 0, 0, 313, 314, 315,
	316, 0, 318, 317, 0, 319, 487, 0, 320, 321,
	0, 0, 322, 323, 0, 0, 324, 325, 0, 326,
	327, 329, 331, 328, 330, 332, 334, 335, 333, 0,
	336, 337, 339, 338, 0, 0, 0, 0, 488, 489,
	340, 341, 0, 342, 343, 344, 0, 0, 346, 347,
	348, 0, 0, 349, 490, 0, 350, 0, 491, 351,
	345, 352, 353, 354, 355, 356, 357, 0, 358, 359,
	492, 360, 493, 361, 0, 362, 0, 363, 364, 365,
	366, 367, 368, 494, 369, 370, 0, 371, 372, 373,
	374, 375, 376, 0, 378, 379, 380, 377, 381, 382,
	383, 384, 0, 385, 0, 386, 387, 388, 389, 495,
	390, 0, 391, 395, 396, 397, 398, 399, 400, 401,
	0, 408, 409, 402, 404, 405, 406, 403, 407, 410,
	411, 0, 412, 392, 393, 413, 0, 414, 496, 415,
	416, 0, 426, 417, 418, 419, 394, 420, 424, 425,
	421, 422, 423, 497, 0, 428, 429, 427, 0, 430,
	431, 432, 433, 434, 271, 435, 272, 436, 0, 498,
	499, 500, 501, 0, 443, 0, 437, 438, 502, 439,
	503, 0, 440, 441, 442, 0, 444, 445, 0, 0,
	446, 447, 448, 449, 451, 0, 452, 0, 450, 453,
	454, 455, 504, 505, 506, 209, 457, 456, 507, 0,
	0, 0, 0, 458, 459, 508, 460, 461, 462, 0,
	0, 0, 215, 216, 217, 218, 219, 0, 220, 0,
	0, 0, 0, 463, 0, 0, 0, 0, 221, 222,
	223, 224, 464, 465, 225, 466, 226, 227, 467, 0,
	228, 229, 230, 231, 232, 233, 0, 0, 234, 468,
	469, 470, 0, 235, 471, 0, 0, 0, 236, 237,
	238, 239, 240, 0, 0, 242, 243, 244, 241, 0,
	245, 0, 246, 247, 248, 0, 0, 249, 250, 0,
	0, 0, 0, 0, 0, 0, 251, 252, 253, 254,
	255, 256, 472, 473, 0, 257, 0, 259, 258, 0,
	260, 0, 0, 261, 262, 263, 0, 264, 0, 265,
	266, 0, 474, 267, 0, 268, 270, 273, 269, 274,
	275, 276, 475, 476, 0, 0, 0, 0, 0, 0,
	0, 277, 278, 279, 477, 280, 281, 0, 282, 0,
	283, 0, 0, 0, 284, 285, 0, 286, 478, 0,
	479, 287, 0, 288, 289, 290, 291, 2603, 481, 482,
	0, 292, 293, 0, 294, 295, 296, 298, 0, 0,
	0, 0, 297, 299, 306, 0, 0, 300, 483, 302,
	301, 303, 304, 305, 484, 0, 485, 0, 307, 0,
	486, 0, 308, 309, 310, 0, 311, 312, 0, 0,
	313, 314, 315, 316, 0, 318, 317, 0, 319, 487,
	0, 320, 321, 0, 0, 322, 323, 0, 0, 324,
	325, 0, 326, 327, 329, 331, 328, 330, 332, 334,
	335, 333, 0, 336, 337, 339, 338, 0, 0, 0,
	0, 488, 489, 340, 341, 0, 342, 343, 344, 0,
	0, 346, 347, 348, 0, 0, 349, 490, 0, 350,
	0, 491, 351, 345, 352, 353, 354, 355, 356, 357,
	0, 358, 359, 492, 360, 493, 361, 0, 362, 0,
	363, 364, 365, 366, 367, 368, 494, 369, 370, 0,
	371, 372, 373, 374, 375, 376, 0, 378, 379, 380,
	377, 381, 382, 383, 384, 0, 385, 0, 386, 387,
	388, 389, 495, 390, 0, 391, 395, 396, 397, 398,
	399, 400, 401, 0, 408, 409, 402, 404, 405, 406,
	403, 407, 410, 411, 0, 412, 392, 393, 413, 0,
	414, 496, 415, 416, 0, 426, 417, 418, 419, 394,
	420, 424, 425, 421, 422, 423, 497, 0, 428, 429,
	427, 0, 430, 431, 432, 433, 434, 271, 435, 272,
	436, 0, 498, 499, 500, 501, 0, 443, 0, 437,
	438, 502, 439, 503, 0, 440, 441, 442, 0, 444,
	445, 0, 0, 446, 447, 448, 449, 451, 0, 452,
	0, 450, 453, 454, 455, 504, 505, 506, 209, 457,
	456, 507, 0, 0, 0, 0, 458, 459, 508, 460,
	461, 462, 0, 0, 0, 215, 216, 217, 218, 219,
	0, 220, 0, 0, 0, 0, 463, 0, 0, 0,
	0, 221, 222, 223, 224, 464, 465, 225, 466, 226,
	227, 467, 0, 228, 229, 230, 231, 232, 233, 0,
	0, 234, 468, 469, 470, 0, 235, 471, 0, 0,
	0, 236, 237, 238, 239, 240, 0, 0, 242, 243,
	244, 241, 0, 245, 0, 246, 247, 248, 0, 0,
	249, 250, 0, 0, 0, 0, 0, 0, 0, 251,
	252, 253, 254, 255, 256, 472, 473, 0, 257, 0,
	259, 258, 0, 260, 0, 0, 261, 262, 263, 0,
	264, 0, 265, 266, 0, 474, 267, 0, 268, 270,
	273, 269, 274, 275, 276, 475, 476, 0, 0, 0,
	0, 0, 0, 0, 277, 278, 279, 477, 280, 281,
	0, 282, 0, 283, 0, 0, 0, 284, 285, 0,
	286, 478, 0, 479, 287, 0, 288, 289, 290, 291,
	2590, 481, 482, 0, 292, 293, 0, 294, 295, 296,
	298, 0, 0, 0, 0, 297, 299, 306, 0, 0,
	300, 483, 302, 301, 303, 304, 305, 484, 0, 485,
	0, 307, 0, 486, 0, 308, 309, 310, 0, 311,
	312, 0, 0, 313, 314, 315, 316, 0, 318, 317,
	0, 319, 487, 0, 320, 321, 0, 0, 322, 323,
	0, 0, 324, 325, 0, 326, 327, 329, 331, 328,
	330, 332, 334, 335, 333, 0, 336, 337, 339, 338,
	0, 0, 0, 0, 488, 489, 340, 341, 0, 342,
	343, 344, 0, 0, 346, 347, 348, 0, 0, 349,
	490, 0, 350, 0, 491, 351, 345, 352, 353, 354,
	355, 356, 357, 0, 358, 359, 492, 360, 493, 361,
	0, 362, 0, 363, 364, 365, 366, 367, 368, 494,
	369, 370, 0, 371, 372, 373, 374, 375, 376, 0,
	378, 379, 380, 377, 381, 382, 383, 384, 0, 385,
	0, 386, 387, 388, 389, 495, 390, 0, 391, 395,
	396, 397, 398, 399, 400, 401, 0, 408, 409, 402,
	404, 405, 406, 403, 407, 410, 411, 0, 412, 392,
	393, 413, 0, 414, 496, 415, 416, 0, 426, 417,
	418, 419, 394, 420, 424, 425, 421, 422, 423, 497,
	0, 428, 429, 427, 0, 430, 431, 432, 433, 434,
	271, 435, 272, 436, 0, 498, 499, 500, 501, 0,
	443, 0, 437, 438, 502, 439, 503, 0, 440, 441,
	442, 0, 444, 445, 0, 0, 446, 447, 448, 449,
	451, 0, 452, 0, 450, 453, 454, 455, 504, 505,
	506, 209, 457, 456, 507, 0, 0, 0, 0, 458,
	459, 508, 460, 461, 462, 0, 0, 0, 215, 216,
	217, 218, 219, 0, 220, 0, 0, 0, 0, 463,
	0, 0, 0, 0, 221, 222, 223, 224, 464, 465,
	225, 466, 226, 227, 467, 0, 228, 229, 230, 231,
	232, 233, 0, 0, 234, 468, 469, 470, 0, 235,
	471, 0, 0, 0, 236, 237, 238, 239, 240, 0,
	0, 242, 243, 244, 241, 0, 245, 0, 246, 247,
	248, 0, 0, 249, 250, 0, 0, 0, 0, 0,
	0, 0, 251, 252, 253, 254, 255, 256, 472, 473,
	0, 257, 0, 259, 258, 0, 260, 0, 0, 261,
	262, 263, 0, 264, 0, 265, 266, 0, 474, 267,
	0, 268, 270, 273, 269, 274, 275, 276, 475, 476,
	0, 0, 0, 0, 0, 0, 0, 277, 278, 279,
	477, 280, 281, 0, 282, 0, 283, 0, 0, 0,
	284, 285, 0, 286, 478, 0, 479, 287, 0, 288,
	289, 290, 291, 2291, 481, 482, 0, 292, 293, 0,
	294, 295, 296, 298, 0, 0, 0, 0, 297, 299,
	306, 0, 0, 300, 483, 302, 301, 303, 304, 305,
	484, 0, 485, 0, 307, 0, 486, 0, 308, 309,
	310, 0, 311, 312, 0, 0, 313, 314, 315, 316,
	0, 318, 317, 0, 319, 487, 0, 320, 321, 0,
	0, 322, 323, 0, 0, 324, 325, 0, 326, 327,
	329, 331, 328, 330, 332, 334, 335, 333, 0, 336,
	337, 339, 338, 0, 0, 0, 0, 488, 489, 340,
	341, 0, 342, 343, 344, 0, 0, 346, 347, 348,
	0, 0, 349, 490, 0, 350, 0, 491, 351, 345,
	352, 353, 354, 355, 356, 357, 0, 358, 359, 492,
	360, 493, 361, 0, 362, 0, 363, 364, 365, 366,
	367, 368, 494, 369, 370, 0, 371, 372, 373, 374,
	375, 376, 0, 378, 379, 380, 377, 381, 382, 383,
	384, 0, 385, 0, 386, 387, 388, 389, 495, 390,
	0, 391, 395, 396, 397, 398, 399, 400, 401, 0,
	408, 409, 402, 404, 405, 406, 403, 407, 410, 411,
	0, 412, 392, 393, 413, 0, 414, 496, 415, 416,
	0, 426, 417, 418, 419, 394, 420, 424, 425, 421,
	422, 423, 497, 0, 428, 429, 427, 0, 430, 431,
	432, 433, 434, 271, 435, 272, 436, 0, 498, 499,
	500, 501, 0, 443, 0, 437, 438, 502, 439, 503,
	0, 440, 441, 442, 0, 444, 445, 0, 0, 446,
	447, 448, 449, 451, 0, 452, 0, 450, 453, 454,
	455, 504, 505, 506, 209, 457, 456, 507, 0, 0,
	0, 0, 458, 459, 508, 460, 461, 462, 0, 0,
	0, 215, 216, 217, 218, 219, 0, 220, 0, 0,
	0, 0, 463, 0, 0, 0, 0, 221, 222, 223,
	224, 464, 465, 225, 466, 226, 227, 467, 0, 228,
	229, 230, 231, 232, 233, 0, 0, 234, 468, 469,
	470, 0, 235, 471, 0, 0, 0, 236, 237, 238,
	239, 240, 0, 0, 242, 243, 244, 241, 0, 245,
	0, 246, 247, 248, 0, 0, 249, 250, 0, 0,
	0, 0, 0, 0, 0, 251, 252, 253, 254, 255,
	256, 472, 473, 0, 257, 0, 259, 258, 0, 260,
	0, 0, 261, 262, 263, 0, 264, 0, 265, 266,
	0, 474, 267, 0, 268, 270, 273, 269, 274, 275,
	276, 475, 476, 0, 0, 0, 0, 0, 0, 0,
	277, 278, 279, 477, 280, 281, 0, 282, 0, 283,
	0, 0, 0, 284, 285, 0, 286, 478, 0, 479,
	287, 0, 288, 289, 290, 291, 480, 481, 482, 0,
	292, 293, 0, 294, 295, 296, 298, 0, 0, 0,
	0, 297, 299, 306, 0, 0, 300, 483, 302, 301,
	303, 304, 305, 484, 0, 485, 0, 307, 0, 486,
	0, 308, 309, 310, 0, 311, 312, 0, 0, 313,
	314, 315, 316, 0, 318, 317, 0, 319, 487, 0,
	320, 321, 0, 0, 322, 323, 0, 0, 324, 325,
	0, 326, 327, 329, 331, 328, 330, 332, 334, 335,
	333, 0, 336, 337, 339, 338, 0, 0, 0, 0,
	488, 489, 340, 341, 0, 342, 343, 344, 0, 0,
	346, 347, 348, 0, 0, 349, 490, 0, 350, 0,
	491, 351, 345, 352, 353, 354, 355, 356, 357, 0,
	358, 359, 492, 360, 493, 361, 0, 362, 0, 363,
	364, 365, 366, 367, 368, 494, 369, 370, 0, 371,
	372, 373, 374, 375, 376, 0, 378, 379, 380, 377,
	381, 382, 383, 384, 0, 385, 0, 386, 387, 388,
	389, 495, 390, 0, 391, 544, 396, 397, 398, 399,
	400, 401, 0, 408, 409, 402, 404, 405, 406, 403,
	407, 410, 411, 0, 412, 392, 393, 413, 0, 414,
	496, 415, 416, 0, 426, 417, 418, 419, 394, 420,
	424, 425, 421, 422, 423, 497, 0, 428, 429, 427,
	0, 430, 431, 432, 433, 434, 271, 435, 272, 436,
	0, 498, 499, 500, 501, 0, 443, 0, 437, 438,
	502, 439, 503, 0, 440, 441, 442, 0, 444, 445,
	0, 0, 446, 447, 448, 449, 451, 0, 452, 0,
	450, 453, 454, 455, 504, 505, 506, 209, 457, 456,
	507, 0, 0, 0, 0, 458, 459, 508, 460, 461,
	462, 0, 0, 0, 215, 216, 217, 218, 219, 0,
	220, 0, 0, 0, 0, 463, 0, 1816, 0, 0,
	221, 222, 223, 224, 464, 465, 225, 466, 226, 227,
	467, 0, 228, 229, 230, 231, 232, 233, 0, 0,
	234, 468, 469, 470, 0, 235, 471, 0, 0, 0,
	236, 237, 238, 239, 240, 0, 0, 242, 243, 244,
	241, 0, 245, 0, 246, 247, 248, 0, 0, 249,
	250, 0, 0, 0, 0, 0, 0, 0, 251, 252,
	253, 254, 255, 256, 472, 473, 0, 257, 0, 259,
	258, 0, 260, 0, 0, 261, 262, 263, 0, 264,
	0, 265, 266, 0, 474, 267, 0, 268, 270, 273,
	269, 274, 275, 276, 475, 476, 0, 0, 0, 0,
	0, 0, 0, 277, 278, 279, 477, 280, 281, 0,
	282, 0, 283, 0, 0, 0, 284, 285, 0, 286,
	478, 0, 479, 287, 0, 288, 289, 290, 291, 480,
	481, 482, 0, 292, 293, 0, 294, 295, 296, 298,
	0, 0, 0, 0, 297, 299, 306, 0, 0, 300,
	483, 302, 301, 303, 304, 305, 484, 0, 485, 0,
	307, 0, 486, 0, 308, 309, 310, 0, 311, 312,
	0, 0, 313, 314, 315, 316, 0, 318, 317, 0,
	319, 487, 0, 320, 321, 0, 0, 322, 323, 0,
	0, 324, 325, 0, 326, 327, 329, 331, 328, 330,
	332, 334, 335, 333, 0, 336, 337, 339, 338, 0,
	0, 0, 0, 488, 489, 340, 341, 0, 342, 343,
	344, 0, 0, 346, 347, 348, 0, 0, 349, 490,
	0, 350, 0, 491, 351, 345, 352, 353, 354, 355,
	356, 357, 0, 358, 359, 492, 360, 493, 361, 0,
	362, 0, 363, 364, 365, 366, 367, 368, 494, 369,
	370, 0, 371, 372, 373, 374, 375, 376, 0, 378,
	379, 380, 377, 381, 382, 383, 384, 0, 385, 0,
	386, 387, 388, 389, 495, 390, 0, 391, 395, 396,
	397, 398, 399, 400, 401, 0, 408, 409, 402, 404,
	405, 406, 403, 407, 410, 411, 0, 0, 392, 393,
	413, 0, 414, 496, 415, 416, 0, 426, 417, 418,
	419, 394, 420, 424, 425, 421, 422, 423, 497, 0,
	428, 429, 427, 0, 430, 431, 432, 433, 434, 271,
	435, 272, 436, 0, 498, 499, 500, 501, 0, 443,
	0, 437, 438, 502, 439, 503, 0, 440, 441, 442,
	0, 444, 445, 0, 0, 446, 447, 448, 449, 451,
	0, 452, 0, 450, 453, 454, 455, 504, 505, 506,
	209, 457, 456, 507, 0, 0, 0, 0, 458, 459,
	508, 460, 461, 462, 0, 0, 0, 215, 216, 217,
	218, 219, 0, 220, 0, 0, 0, 0, 463, 0,
	0, 0, 0, 221, 222, 223, 224, 464, 465, 225,
	466, 226, 227, 467, 0, 228, 229, 230, 231, 232,
	233, 0, 0, 234, 468, 469, 470, 0, 235, 471,
	0, 0, 0, 236, 237, 238, 239, 240, 0, 0,
	242, 243, 244, 241, 0, 245, 0, 246, 247, 248,
	0, 0, 249, 250, 0, 0, 0, 0, 0, 0,
	0, 251, 252, 253, 254, 255, 256, 472, 473, 0,
	257, 0, 259, 258, 0, 260, 0, 0, 261, 262,
	263, 0, 264, 0, 265, 266, 0, 474, 267, 0,
	268, 270, 273, 269, 274, 275, 276, 475, 476, 0,
	0, 0, 0, 0, 0, 0, 277, 278, 279, 477,
	280, 281, 0, 282, 0, 283, 0, 0, 0, 284,
	285, 0, 286, 478, 0, 479, 287, 0, 288, 289,
	290, 291, 1271, 481, 482, 0, 292, 293, 0, 294,
	295, 296, 298, 0, 0, 0, 0, 297, 299, 306,
	0, 0, 300, 483, 302, 301, 303, 304, 305, 484,
	0, 485, 0, 307, 0, 486, 0, 308, 309, 310,
	0, 311, 312, 0, 0, 313, 314, 315, 316, 0,
	318, 317, 0, 319, 487, 0, 320, 321, 0, 0,
	322, 323, 0, 0, 324, 325, 0, 326, 327, 329,
	331, 328, 330, 332, 334, 335, 333, 0, 336, 337,
	339, 338, 0, 0, 0, 0, 488, 489, 340, 341,
	0, 342, 343, 344, 0, 0, 346, 347, 348, 0,
	0, 349, 490, 0, 350, 0, 491, 351, 345, 352,
	353, 354, 355, 356, 357, 0, 358, 359, 492, 360,
	493, 361, 0, 362, 0, 363, 364, 365, 366, 367,
	368, 494, 369, 370, 0, 371, 372, 373, 374, 375,
	376, 0, 378, 379, 380, 377, 381, 382, 383, 384,
	0, 385, 0, 386, 387, 388, 389, 495, 390, 0,
	391, 395, 396, 397, 398, 399, 400, 401, 0, 408,
	409, 402, 404, 405, 406, 403, 407, 410, 411, 0,
	412, 392, 393, 413, 0, 414, 496, 415, 416, 0,
	426, 417, 418, 419, 394, 420, 424, 425, 421, 422,
	423, 497, 0, 428, 429, 427, 0, 430, 431, 432,
	433, 434, 271, 435, 272, 436, 0, 498, 499, 500,
	501, 0, 443, 0, 437, 438, 502, 439, 503, 0,
	440, 441, 442, 0, 444, 445, 0, 0, 446, 447,
	448, 449, 451, 0, 452, 0, 450, 453, 454, 455,
	504, 505, 506, 209, 457, 456, 507, 0, 0, 0,
	0, 458, 459, 508, 460, 461, 462, 0, 0, 0,
	215, 216, 217, 218, 219, 0, 220, 0, 0, 0,
	0, 463, 0, 0, 0, 0, 221, 222, 223, 224,
	464, 465, 225, 466, 226, 227, 467, 0, 228, 229,
	230, 231, 232, 233, 0, 0, 234, 468, 469, 470,
	0, 235, 471, 0, 0, 0, 236, 237, 238, 239,
	240, 0, 0, 242, 243, 244, 241, 0, 245, 0,
	246, 247, 248, 0, 0, 249, 250, 0, 0, 0,
	0, 0, 0, 0, 251, 252, 253, 254, 255, 256,
	472, 473, 0, 257, 0, 259, 258, 0, 260, 0,
	0, 261, 262, 263, 0, 264, 0, 265, 266, 0,
	474, 267, 0, 268, 270, 273, 269, 274, 275, 276,
	475, 476, 0, 0, 0, 0, 0, 0, 0, 277,
	278, 279, 477, 280, 281, 0, 282, 0, 283, 0,
	0, 0, 284, 285, 0, 286, 478, 0, 479, 287,
	0, 288, 289, 290, 291, 1213, 481, 482, 0, 292,
	293, 0, 294, 295, 296, 298, 0, 0, 0, 0,
	297, 299, 306, 0, 0, 300, 483, 302, 301, 303,
	304, 305, 484, 0, 485, 0, 307, 0, 486, 0,
	308, 309, 310, 0, 311, 312, 0, 0, 313, 314,
	315, 316, 0, 318, 317, 0, 319, 487, 0, 320,
	321, 0, 0, 322, 323, 0, 0, 324, 325, 0,
	326, 327, 329, 331, 328, 330, 332, 334, 335, 333,
	0, 336, 337, 339, 338, 0, 0, 0, 0, 488,
	489, 340, 341, 0, 342, 343, 344, 0, 0, 346,
	347, 348, 0, 0, 349, 490, 0, 350, 0, 491,
	351, 345, 352, 353, 354, 355, 356, 357, 0, 358,
	359, 492, 360, 493, 361, 0, 362, 0, 363, 364,
	365, 366, 367, 368, 494, 369, 370, 0, 371, 372,
	373, 374, 375, 376, 0, 378, 379, 380, 377, 381,
	382, 383, 384, 0, 385, 0, 386, 387, 388, 389,
	495, 390, 0, 391, 395, 396, 397, 398, 399, 400,
	401, 0, 408, 409, 402, 404, 405, 406, 403, 407,
	410, 411, 0, 412, 392, 393, 413, 0, 414, 496,
	415, 416, 0, 426, 417, 418, 419, 394, 420, 424,
	425, 421, 422, 423, 497, 0, 428, 429, 427, 0,
	430, 431, 432, 433, 434, 271, 435, 272, 436, 0,
	498, 499, 500, 501, 0, 443, 0, 437, 438, 502,
	439, 503, 0, 440, 441, 442, 0, 444, 445, 0,
	0, 446, 447, 448, 449, 451, 0, 452, 0, 450,
	453, 454, 455, 504, 505, 506, 209, 457, 456, 507,
	0, 0, 0, 0, 458, 459, 508, 460, 461, 462,
	0, 0, 0, 215, 216, 217, 218, 219, 0, 220,
	0, 0, 0, 0, 463, 0, 0, 0, 0, 221,
	222, 223, 224, 464, 465, 225, 466, 226, 227, 467,
	0, 228, 229, 230, 231, 232, 233, 0, 0, 234,
	468, 469, 470, 0, 235, 471, 0, 0, 0, 236,
	237, 238, 239, 240, 0, 0, 242, 243, 244, 241,
	0, 245, 0, 246, 247, 248, 0, 0, 249, 250,
	0, 0, 0, 0, 0, 0, 0, 251, 252, 253,
	254, 255, 256, 472, 473, 0, 257, 0, 259, 258,
	0, 260, 0, 0, 261, 262, 263, 0, 264, 0,
	265, 266, 0, 474, 267, 0, 268, 270, 273, 269,
	274, 275, 276, 475, 476, 0, 0, 0, 0, 0,
	0, 0, 277, 278, 279, 477, 280, 281, 0, 282,
	0, 283, 0, 0, 0, 284, 285, 0, 286, 478,
	0, 479, 287, 0, 288, 289, 290, 291, 480, 481,
	482, 0, 292, 293, 0, 294, 295, 296, 298, 0,
	0, 0, 0, 297, 299, 306, 0, 0, 300, 483,
	302, 301, 303, 304, 305, 484, 0, 485, 0, 307,
	0, 486, 0, 308, 309, 310, 0, 311, 312, 0,
	0, 313, 314, 315, 316, 0, 318, 317, 0, 319,
	487, 0, 320, 321, 0, 0, 322, 323, 0, 0,
	324, 325, 0, 326, 327, 329, 331, 328, 330, 332,
	334, 335, 333, 0, 336, 337, 339, 338, 0, 0,
	0, 0, 488, 489, 340, 341, 0, 342, 343, 344,
	0, 0, 346, 347, 348, 0, 0, 349, 490, 0,
	350, 0, 491, 351, 345, 352, 353, 354, 355, 356,
	357, 0, 358, 359, 492, 360, 493, 361, 0, 362,
	0, 363, 364, 365, 366, 367, 368, 494, 970, 370,
	0, 371, 372, 373, 374, 375, 376, 0, 378, 379,
	380, 377, 381, 382, 383, 384, 0, 385, 0, 386,
	387, 388, 389, 495, 390, 0, 391, 395, 396, 397,
	398, 399, 400, 401, 0, 408, 409, 402, 404, 405,
	406, 403, 407, 410, 411, 0, 412, 392, 393, 413,
	0, 414, 496, 415, 416, 0, 426, 417, 418, 419,
	394, 420, 424, 425, 421, 422, 423, 497, 0, 428,
	429, 427, 0, 430, 431, 432, 433, 434, 271, 435,
	272, 436, 0, 498, 499, 500, 501, 0, 443, 0,
	437, 438, 502, 439, 503, 0, 440, 441, 442, 0,
	444, 445, 0, 0, 446, 447, 448, 449, 451, 0,
	452, 0, 450, 453, 454, 455, 504, 505, 506, 209,
	457, 456, 507, 0, 0, 0, 0, 458, 459, 508,
	460, 461, 462, 0, 0, 0, 215, 216, 217, 218,
	219, 0, 220, 0, 0, 0, 0, 463, 0, 0,
	0, 0, 221, 222, 223, 224, 464, 465, 225, 466,
	226, 227, 467, 0, 228, 229, 230, 231, 232, 233,
	0, 0, 234, 468, 469, 470, 0, 235, 471, 0,
	0, 0, 236, 237, 238, 239, 240, 0, 0, 242,
	243, 244, 241, 0, 245, 0, 246, 247, 248, 0,
	0, 249, 250, 0, 0, 0, 0, 0, 0, 0,
	251, 252, 253, 254, 255, 256, 472, 473, 0, 257,
	0, 259, 258, 0, 260, 0, 0, 261, 262, 263,
	0, 264, 0, 265, 266, 0, 474, 267, 0, 268,
	270, 273, 269, 274, 275, 276, 475, 476, 0, 0,
	0, 0, 0, 0, 0, 277, 278, 279, 477, 280,
	281, 0, 282, 0, 283, 0, 0, 0, 284, 285,
	0, 286, 478, 0, 479, 0, 0, 288, 289, 290,
	291, 480, 481, 482, 0, 292, 293, 0, 294, 295,
	296, 298, 0, 0, 0, 0, 297, 299, 306, 0,
	0, 300, 483, 302, 301, 303, 304, 305, 484, 0,
	485, 0, 307, 0, 486, 0, 308, 309, 310, 0,
	311, 312, 0, 0, 313, 314, 315, 316, 0, 318,
	317, 0, 319, 487, 0, 320, 321, 0, 0, 322,
	323, 0, 0, 324, 325, 0, 326, 327, 329, 331,
	328, 330, 332, 334, 335, 333, 0, 336, 337, 339,
	338, 0, 0, 0, 0, 488, 489, 340, 341, 0,
	342, 343, 344, 0, 0, 346, 347, 348, 0, 0,
	349, 490, 0, 350, 0, 491, 351, 345, 352, 353,
	0, 355, 356, 357, 0, 358, 359, 492, 360, 493,
	361, 0, 362, 0, 363, 364, 365, 0, 367, 368,
	494, 369, 370, 0, 371, 372, 373, 374, 375, 376,
	0, 378, 379, 380, 377, 381, 382, 383, 384, 0,
	385, 0, 386, 387, 388, 389, 495, 0, 0, 391,
	395, 396, 397, 398, 399, 400, 401, 0, 408, 409,
	402, 404, 405, 406, 403, 407, 410, 411, 0, 412,
	392, 393, 413, 0, 414, 496, 415, 416, 0, 426,
	417, 418, 419, 394, 420, 424, 425, 421, 422, 423,
	497, 0, 428, 429, 427, 0, 430, 431, 432, 433,
	434, 271, 435, 272, 436, 0, 498, 499, 500, 501,
	0, 443, 0, 437, 438, 502, 439, 503, 0, 440,
	441, 442, 0, 444, 445, 0, 0, 446, 447, 448,
	449, 451, 0, 452, 0, 450, 453, 454, 455, 504,
	505, 506, 0, 457, 456, 507, 0, 0, 0, 0,
	458, 459, 508, 460, 461, 462, 1427, 1428, 0, 1460,
	1461, 1462, 1470, 1471, 1472, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1463, 0, 0, 0, 0,
	0, 0, 1430, 0, 0, 0, 1476, 0, 0, 0,
	0, 0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470,
	1471, 1472, 0, 0, 0, 0, 0, 0, 0, 1429,
	0, 0, 1463, 0, 0, 0, 0, 1449, 0, 1430,
	0, 0, 0, 1476, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1429, 0, 0, 0,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 1453, 1454, 1455, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 1477, 1452, 1453,
	1454, 1455, 1457, 1458, 1459, 0, 0, 0, 1435, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 0, 1474, 0, 0, 0, 0,
	0, 1467, 1444, 1445, 1477, 0, 0, 0, 0, 1457,
	1458, 1459, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	1473, 0, 1474, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 1464, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 1468, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1451, 0, 0, 1427, 1428,
	0, 1460, 1461, 1462, 1470, 1471, 1472, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1463, 0, 0,
	1468, 0, 0, 0, 1430, 0, 0, 0, 1476, 0,
	0, 0, 0, 0, 0, 1427, 1428, 0, 1460, 1461,
	1462, 1470, 1471, 1472, 0, 0, 0, 0, 0, 0,
	0, 1429, 0, 0, 1463, 0, 0, 0, 0, 1449,
	0, 1430, 0, 0, 0, 1476, 1466, 1446, 0, 1441,
	1442, 1448, 1447, 1443, 1469, 0, 1440, 1438, 1439, 1431,
	1432, 1433, 1434, 1436, 1437, 0, 0, 0, 1429, 0,
	0, 0, 2756, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 1466, 1446, 0, 1441, 1442, 1448, 1447,
	1443, 1469, 0, 1440, 1438, 1439, 1431, 1432, 1433, 1434,
	1436, 1437, 0, 1452, 1453, 1454, 1455, 0, 0, 2462,
	0, 0, 0, 1435, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 0, 0, 1477,
	1452, 1453, 1454, 1455, 1457, 1458, 1459, 0, 0, 0,
	1435, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 1474, 0, 0,
	0, 0, 0, 1467, 1444, 1445, 1477, 0, 0, 0,
	0, 1457, 1458, 1459, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 0, 1473, 0, 1474, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	1464, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 1468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1451, 0, 0,
	1427, 1428, 0, 1460, 1461, 1462, 1470, 1471, 1472, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1463,
	0, 0, 1468, 0, 0, 0, 1430, 0, 0, 0,
	1476, 0, 0, 0, 0, 0, 0, 1427, 1428, 0,
	1460, 1461, 1462, 1470, 1471, 1472, 0, 0, 0, 0,
	0, 0, 0, 1429, 0, 0, 1463, 0, 0, 0,
	0, 1449, 0, 1430, 0, 0, 0, 1476, 1466, 1446,
	0, 1441, 1442, 1448, 1447, 1443, 1469, 0, 1440, 1438,
	1439, 1431, 1432, 1433, 1434, 1436, 1437, 0, 0, 0,
	1429, 0, 0, 0, 2461, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 1466, 1446, 0, 1441, 1442,
	1448, 1447, 1443, 1469, 0, 1440, 1438, 1439, 1431, 1432,
	1433, 1434, 1436, 1437, 0, 1452, 1453, 1454, 1455, 0,
	0, 2458, 0, 0, 0, 1435, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 0,
	0, 1477, 1452, 1453, 1454, 1455, 1457, 1458, 1459, 0,
	0, 0, 1435, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1473, 0, 1474,
	0, 0, 0, 0, 0, 1467, 1444, 1445, 1477, 0,
	0, 0, 0, 1457, 1458, 1459, 0, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 1473, 0, 1474, 0, 0, 0,
	0, 0, 0, 1444, 1445, 0, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	0, 0, 1464, 0, 0, 0, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 1468, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1451,
	0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471,
	1472, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1463, 0, 0, 1468, 0, 0, 0, 1430, 0,
	0, 0, 1476, 0, 0, 0, 0, 0, 0, 1427,
	1428, 0, 1460, 1461, 1462, 1470, 1471, 1472, 0, 0,
	0, 0, 0, 0, 0, 1429, 0, 0, 1463, 0,
	0, 0, 0, 1449, 0, 1430, 0, 0, 0, 1476,
	1466, 1446, 0, 1441, 1442, 1448, 1447, 1443, 1469, 0,
	1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 0,
	0, 0, 1429, 0, 0, 0, 2457, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 1466, 1446, 0,
	1441, 1442, 1448, 1447, 1443, 1469, 0, 1440, 1438, 1439,
	1431, 1432, 1433, 1434, 1436, 1437, 0, 1452, 1453, 1454,
	1455, 0, 0, 2456, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 1477, 1452, 1453, 1454, 1455, 1457, 1458,
	1459, 0, 0, 0, 1435, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 1474, 0, 0, 0, 0, 0, 1467, 1444, 1445,
	1477, 0, 0, 0, 0, 1457, 1458, 1459, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 1473, 0, 1474, 0,
	0, 0, 0, 0, 0, 1444, 1445, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 1464, 0, 0, 0, 1450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 1468,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471,
	1472, 0, 0, 0, 0, 0, 1468, 0, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 1430, 0,
	0, 0, 1476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1429, 0, 0, 0, 0,
	0, 0, 1466, 1449, 0, 1441, 1442, 1448, 1447, 1443,
	1469, 1446, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436,
	1437, 0, 0, 0, 0, 0, 0, 0, 2019, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1466,
	0, 0, 1441, 1442, 1448, 1447, 1443, 1469, 0, 1440,
	1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 0, 0,
	0, 0, 3319, 0, 0, 0, 0, 1452, 1453, 1454,
	1455, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 1477, 0, 0, 0, 0, 1457, 1458,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 1474, 0, 0, 0, 0, 0, 0, 1444, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470,
	1471, 1472, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 1430,
	0, 0, 0, 1476, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1429, 0, 0, 1468,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 1453,
	1454, 1455, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 0, 1466, 0, 0, 1441, 1442, 1448, 1447, 1443,
	1469, 0, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436,
	1437, 1467, 0, 0, 1477, 3315, 0, 0, 0, 1457,
	1458, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 0, 1474, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 1428, 0, 1460, 1461, 1462,
	1470, 1471, 1472, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 1463, 0, 0, 0, 0, 0, 0,
	1430, 0, 0, 0, 1476, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1429, 0, 0,
	1468, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	1453, 1454, 1455, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 1466, 0, 0, 1441, 1442, 1448, 1447,
	1443, 1469, 0, 1440, 1438, 1439, 1431, 1432, 1433, 1434,
	1436, 1437, 1467, 0, 0, 1477, 3248, 0, 0, 0,
	1457, 1458, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1473, 0, 1474, 0, 0, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1427, 1428, 0, 1460, 1461,
	1462, 1470, 1471, 1472, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 0, 1476, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1429, 0,
	0, 1468, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1452, 1453, 1454, 1455, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 1466, 0, 0, 1441, 1442, 1448,
	1447, 1443, 1469, 0, 1440, 1438, 1439, 1431, 1432, 1433,
	1434, 1436, 1437, 1467, 0, 0, 1477, 3247, 0, 0,
	0, 1457, 1458, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 1474, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1427, 1428, 0, 1460,
	1461, 1462, 1470, 1471, 1472, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 1463, 0, 0, 0, 0,
	0, 0, 1430, 0, 0, 0, 1476, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1429,
	0, 0, 1468, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 1453, 1454, 1455, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 1466, 0, 0, 1441, 1442,
	1448, 1447, 1443, 1469, 0, 1440, 1438, 1439, 1431, 1432,
	1433, 1434, 1436, 1437, 1467, 0, 0, 1477, 3149, 0,
	0, 0, 1457, 1458, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 0, 1474, 0, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1427, 1428, 0,
	1460, 1461, 1462, 1470, 1471, 1472, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 1463, 0, 0, 0,
	0, 0, 0, 1430, 0, 0, 0, 1476, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1429, 0, 0, 1468, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 1453, 1454, 1455, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 0, 1466, 0, 0, 1441,
	1442, 1448, 1447, 1443, 1469, 0, 1440, 1438, 1439, 1431,
	1432, 1433, 1434, 1436, 1437, 1467, 0, 0, 1477, 3067,
	0, 0, 0, 1457, 1458, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1473, 0, 1474, 0, 0, 0,
	0, 0, 0, 1444, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 1428,
	0, 1460, 1461, 1462, 1470, 1471, 1472, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 0, 0, 1430, 0, 0, 0, 1476, 1451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1429, 0, 0, 1468, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 1453, 1454, 1455, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 0, 1466, 0, 0,
	1441, 1442, 1448, 1447, 1443, 1469, 0, 1440, 1438, 1439,
	1431, 1432, 1433, 1434, 1436, 1437, 1467, 0, 0, 1477,
	3019, 0, 0, 0, 1457, 1458, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 1474, 0, 0,
	0, 0, 0, 0, 1444, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1427,
	1428, 0, 1460, 1461, 1462, 1470, 1471, 1472, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 1463, 0,
	0, 0, 0, 0, 0, 1430, 0, 0, 0, 1476,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1429, 0, 0, 1468, 0, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 1453, 1454, 1455, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 1466, 0,
	0, 1441, 1442, 1448, 1447, 1443, 1469, 0, 1440, 1438,
	1439, 1431, 1432, 1433, 1434, 1436, 1437, 1467, 0, 0,
	1477, 3018, 0, 0, 0, 1457, 1458, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 0, 1474, 0,
	0, 0, 0, 0, 0, 1444, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 1428, 0, 1460, 1461, 1462, 1470, 1471, 1472, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 1463,
	0, 0, 0, 0, 0, 0, 1430, 0, 0, 0,
	1476, 1451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1429, 0, 0, 1468, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 1453, 1454, 1455, 0,
	0, 0, 0, 0, 0, 1435, 0, 0, 0, 1466,
	0, 0, 1441, 1442, 1448, 1447, 1443, 1469, 0, 1440,
	1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 1467, 0,
	0, 1477, 3017, 0, 0, 0, 1457, 1458, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1473, 0, 1474,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471, 1472,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	1463, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	0, 1476, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1429, 0, 0, 1468, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 1453, 1454, 1455,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	1466, 0, 0, 1441, 1442, 1448, 1447, 1443, 1469, 0,
	1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 1467,
	0, 0, 1477, 2983, 0, 0, 0, 1457, 1458, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	1474, 0, 0, 0, 0, 0, 0, 1444, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471,
	1472, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 1463, 0, 0, 0, 0, 0, 0, 1430, 0,
	0, 0, 1476, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1429, 0, 0, 1468, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 1453, 1454,
	1455, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 1466, 0, 0, 1441, 1442, 1448, 1447, 1443, 1469,
	0, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437,
	1467, 0, 0, 1477, 2791, 0, 0, 0, 1457, 1458,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 1474, 0, 0, 0, 0, 0, 0, 1444, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470,
	1471, 1472, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 1430,
	0, 0, 0, 1476, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1429, 0, 0, 1468,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 1453,
	1454, 1455, 0, 0, 0, 0, 0, 0, 1435, 3408,
	0, 0, 1466, 0, 0, 1441, 1442, 1448, 1447, 1443,
	1469, 0, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436,
	1437, 1467, 0, 2413, 1477, 0, 0, 0, 0, 1457,
	1458, 1459, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1473, 0, 1474, 0, 0, 0, 0, 0, 0, 1444,
	1445, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3407, 0, 0, 0, 0,
	0, 0, 0, 0, 1427, 1428, 0, 1460, 1461, 1462,
	1470, 1471, 1472, 0, 0, 0, 0, 1456, 0, 0,
	0, 0, 0, 1463, 0, 0, 0, 0, 2384, 0,
	1430, 0, 0, 0, 1476, 1451, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1429, 0, 0,
	1468, 0, 0, 0, 0, 1449, 0, 0, 0, 0,
	0, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2385, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	1453, 1454, 1455, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 1466, 0, 0, 1441, 1442, 1448, 1447,
	1443, 1469, 0, 1440, 1438, 1439, 1431, 1432, 1433, 1434,
	1436, 1437, 1467, 0, 0, 1477, 0, 0, 0, 0,
	1457, 1458, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1473, 0, 1474, 0, 0, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1427, 1428, 0, 1460, 1461,
	1462, 1470, 1471, 1472, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 1463, 0, 0, 0, 0, 0,
	0, 1430, 0, 0, 0, 1476, 1451, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1429, 0,
	0, 1468, 0, 0, 0, 0, 1449, 0, 0, 0,
	0, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1452, 1453, 1454, 1455, 0, 0, 0, 0, 0, 0,
	1435, 0, 2501, 0, 1466, 2500, 0, 1441, 1442, 1448,
	1447, 1443, 1469, 0, 1440, 1438, 1439, 1431, 1432, 1433,
	1434, 1436, 1437, 1467, 0, 0, 1477, 0, 0, 0,
	0, 1457, 1458, 1459, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 1474, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1465, 0, 0, 0,
	0, 0, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1464, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2109,
	0, 0, 0, 0, 0, 0, 1427, 1428, 0, 1460,
	1461, 1462, 1470, 1471, 1472, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 1463, 0, 0, 0, 2108,
	0, 0, 1430, 0, 0, 0, 1476, 1451, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1429,
	0, 0, 1468, 0, 0, 0, 0, 1449, 0, 0,
	0, 0, 0, 0, 0, 1446, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1452, 1453, 1454, 1455, 0, 0, 0, 0, 0,
	0, 1435, 0, 0, 0, 1466, 0, 0, 1441, 1442,
	1448, 1447, 1443, 1469, 0, 1440, 1438, 1439, 1431, 1432,
	1433, 1434, 1436, 1437, 1467, 0, 0, 1477, 0, 0,
	0, 0, 1457, 1458, 1459, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1473, 0, 1474, 0, 0, 0, 0,
	0, 0, 1444, 1445, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1465, 0, 0,
	0, 0, 0, 0, 0, 1450, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1464, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1427, 1428, 0,
	1460, 1461, 1462, 1470, 1471, 1472, 0, 0, 0, 0,
	1456, 0, 0, 0, 0, 0, 1463, 0, 0, 0,
	0, 0, 0, 1430, 0, 0, 0, 1476, 1451, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1429, 0, 0, 1468, 0, 0, 0, 0, 1449, 0,
	0, 0, 0, 0, 0, 0, 1446, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1452, 1453, 1454, 1455, 0, 0, 0, 0,
	0, 0, 1435, 0, 0, 0, 1466, 0, 0, 1441,
	1442, 1448, 1447, 1443, 1469, 0, 1440, 1438, 1439, 1431,
	1432, 1433, 1434, 1436, 1437, 1467, 0, 0, 1477, 0,
	0, 0, 0, 1457, 1458, 1459, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1473, 0, 1474, 0, 0, 0,
	0, 0, 0, 1444, 1445, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1465, 0,
	0, 0, 0, 0, 0, 0, 1450, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1464,
	813, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1427, 1428,
	0, 1460, 1461, 1462, 1470, 1471, 1472, 0, 0, 0,
	0, 1456, 0, 0, 0, 0, 0, 1463, 0, 0,
	0, 0, 0, 0, 1430, 0, 0, 0, 1476, 1451,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1429, 0, 0, 1468, 0, 0, 0, 0, 1449,
	0, 0, 0, 0, 0, 0, 0, 1446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1452, 1453, 1454, 1455, 0, 0, 0,
	0, 0, 0, 1435, 0, 0, 0, 1466, 0, 0,
	1441, 1442, 1448, 1447, 1443, 1469, 0, 1440, 1438, 1439,
	1431, 1432, 1433, 1434, 1436, 1437, 1467, 0, 0, 1477,
	0, 0, 0, 0, 1457, 1458, 1459, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1473, 0, 1474, 0, 0,
	0, 0, 0, 0, 1444, 1445, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1465,
	0, 0, 0, 0, 0, 0, 0, 1450, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1464, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1427,
	1428, 0, 1460, 1461, 1462, 1470, 1471, 1472, 0, 0,
	0, 0, 1456, 0, 0, 0, 0, 0, 1463, 0,
	0, 0, 0, 0, 0, 1430, 0, 0, 0, 1476,
	1451, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1429, 0, 0, 1468, 0, 0, 0, 0,
	1449, 0, 0, 0, 0, 0, 0, 0, 1446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2779, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1452, 1453, 1454, 1455, 0, 0,
	0, 0, 0, 0, 1435, 0, 0, 0, 1466, 2507,
	0, 1441, 1442, 1448, 1447, 1443, 1469, 0, 1440, 1438,
	1439, 1431, 1432, 1433, 1434, 1436, 1437, 1467, 0, 0,
	1477, 0, 0, 0, 0, 1457, 1458, 1459, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1473, 0, 1474, 0,
	0, 0, 0, 0, 0, 1444, 1445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1465, 0, 0, 0, 0, 0, 0, 0, 1450, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1464, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1427, 1428, 0, 1460, 1461, 1462, 1470, 1471, 1472, 0,
	0, 0, 0, 1456, 0, 0, 0, 0, 0, 1463,
	0, 0, 0, 2502, 0, 0, 1430, 0, 0, 0,
	1476, 1451, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1429, 0, 0, 1468, 0, 0, 0,
	0, 1449, 0, 0, 0, 0, 0, 0, 0, 1446,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1452, 1453, 1454, 1455, 0,
	0, 0, 0, 0, 0, 1435, 0, 0, 0, 1466,
	0, 0, 1441, 1442, 1448, 1447, 1443, 1469, 0, 1440,
	1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 1467, 0,
	0, 1477, 0, 0, 0, 0, 1457, 1458, 1459, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1473, 0, 1474,
	0, 0, 0, 0, 0, 0, 1444, 1445, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1465, 0, 0, 0, 0, 0, 0, 0, 1450,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1464, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471, 1472,
	0, 0, 0, 0, 1456, 0, 0, 0, 0, 0,
	1463, 0, 0, 0, 0, 0, 0, 1430, 0, 0,
	0, 1476, 1451, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1429, 0, 0, 1468, 0, 0,
	0, 0, 1449, 0, 0, 0, 0, 0, 0, 0,
	1446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1452, 1453, 1454, 1455,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	1466, 0, 0, 1441, 1442, 1448, 1447, 1443, 1469, 0,
	1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437, 1467,
	0, 0, 1477, 0, 0, 0, 0, 1457, 1458, 1459,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1473, 0,
	1474, 0, 0, 0, 0, 0, 0, 1444, 1445, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1465, 0, 0, 0, 0, 0, 0, 0,
	1450, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1464, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2469,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471,
	1472, 0, 0, 0, 0, 1456, 0, 0, 0, 0,
	0, 1463, 0, 0, 0, 2455, 0, 0, 1430, 0,
	0, 0, 1476, 1451, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1429, 0, 0, 1468, 0,
	0, 0, 0, 1449, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1452, 1453, 1454,
	1455, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 1466, 0, 0, 1441, 1442, 1448, 1447, 1443, 1469,
	0, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436, 1437,
	1467, 0, 0, 1477, 0, 0, 0, 0, 1457, 1458,
	1459, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1473,
	0, 1474, 0, 0, 0, 0, 0, 0, 1444, 1445,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1464, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470,
	1471, 1472, 0, 0, 0, 0, 1456, 0, 0, 0,
	0, 0, 1463, 0, 0, 0, 0, 0, 0, 1430,
	0, 0, 0, 1476, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1429, 0, 0, 1468,
	0, 0, 0, 0, 1449, 0, 0, 0, 0, 0,
	0, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1452, 1453,
	1454, 1455, 0, 0, 0, 0, 0, 0, 1435, 0,
	0, 0, 1466, 0, 0, 1441, 1442, 1448, 1447, 1443,
	1469, 0, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436,
	1437, 1467, 0, 0, 1477, 0, 0, 0, 0, 1457,
	1458, 1459, 0, 0, 0, 1427, 1428, 0, 1460, 1461,
	1462, 1470, 1471, 1472, 0, 0, 0, 0, 0, 0,
	1473, 0, 1474, 0, 1463, 0, 0, 0, 0, 1444,
	1445, 1430, 0, 0, 0, 1476, 0, 0, 0, 0,
	0, 0, 0, 0, 1465, 0, 0, 0, 0, 0,
	0, 0, 1450, 0, 0, 0, 0, 0, 1429, 0,
	0, 0, 0, 0, 0, 0, 1449, 0, 0, 0,
	1475, 0, 0, 0, 1446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1464, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1456, 0, 0,
	1452, 1453, 1454, 1455, 0, 0, 0, 0, 0, 0,
	1435, 0, 0, 0, 0, 1451, 0, 0, 0, 0,
	0, 0, 1427, 1428, 0, 1460, 1461, 1462, 1470, 1471,
	1472, 0, 0, 1467, 0, 0, 1477, 0, 0, 0,
	1468, 1457, 1458, 1459, 0, 0, 0, 0, 1430, 0,
	0, 0, 1476, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1473, 0, 1474, 0, 0, 0, 0, 0,
	0, 1444, 1445, 0, 0, 1429, 0, 0, 0, 0,
	0, 0, 0, 1449, 0, 0, 1465, 0, 0, 0,
	0, 1446, 0, 0, 1450, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1466, 0, 0, 1441, 1442, 1448, 1447,
	1443, 1469, 0, 1440, 1438, 1439, 1431, 1432, 1433, 1434,
	1436, 1437, 0, 0, 0, 0, 0, 1452, 1453, 1454,
	1455, 0, 0, 0, 0, 0, 0, 1435, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1456,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 0, 0, 1477, 0, 0, 0, 1451, 1457, 1458,
	1459, 0, 0, 0, 1427, 1428, 0, 1460, 1461, 1462,
	1470, 1471, 1472, 0, 0, 0, 0, 0, 0, 1473,
	0, 1474, 1468, 0, 0, 0, 0, 0, 1444, 1445,
	1430, 0, 0, 0, 1476, 0, 0, 0, 0, 0,
	0, 0, 0, 1465, 0, 0, 0, 0, 0, 0,
	0, 1450, 0, 0, 0, 0, 0, 1429, 0, 0,
	0, 0, 0, 0, 0, 1449, 0, 0, 0, 1475,
	0, 0, 0, 1446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1466, 0, 0, 1441, 1442,
	1448, 1447, 1443, 1469, 0, 1440, 1438, 1439, 1431, 1432,
	1433, 1434, 1436, 1437, 0, 0, 1456, 0, 0, 1452,
	1453, 1454, 1455, 0, 0, 0, 0, 0, 0, 1435,
	0, 0, 0, 0, 1451, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 1477, 0, 0, 0, 1468,
	1457, 1458, 1459, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1444, 1445, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1465, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1466, 0, 0, 1441, 1442, 1448, 1447, 1443,
	1469, 0, 1440, 1438, 1439, 1431, 1432, 1433, 1434, 1436,
	1437, 1641, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1456, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1653,
	1635, 1642, 1625, 1663, 1662, 0, 1451, 1627, 1626, 0,
	0, 0, 0, 0, 0, 1673, 1674, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1468, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1664, 0, 1660, 1659,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1658, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1657, 1655, 1656, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1466, 0, 0, 1441, 1442, 1448,
	1447, 1443, 1469, 0, 1440, 1438, 1439, 1431, 1432, 1433,
	1434, 1436, 1437, 1637, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1646, 1640, 1648, 1650, 1651, 1652,
	1647, 0, 1645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1669, 1670, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1629, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1661, 0,
	0, 0, 1638, 0, 1639, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1654, 0, 0, 0, 1622, 1620, 1621, 1624,
	1623, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1630, 1631, 1633, 1634, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1649, 1632, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1672, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1628, 0, 1665, 1666,
	1667, 1668, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1636, 0, 0,
	0, 0, 1643, 1671,
}
var sqlPact = [...]int{

	4677, -1000, -1000, -1000, -1000, -1000, -1000, 182, 179, 178,
	176, 169, 168, 167, 166, 158, -1000, -1000, -1000, -1000,
	155, -1000, -1000, 150, -1000, 148, 146, 145, 144, -1000,
	143, 141, -1000, -1000, -1000, -1000, 140, 134, 129, 48692,
	1566, 58289, 50356, 1613, 2121, 43682, 57870, 43263, 57451, 57032,
	128, -1000, 56613, 126, 125, 115, -1000, 1387, -1000, 114,
	1766, 35272, 113, 112, 111, 1725, 110, 107, -1000, 104,
	-1000, 7695, 1185, -1000, 102, 98, -1000, 6453, 3804, 49937,
	2073, 95, 92, 34852, 2071, -1000, -1000, 1482, -1000, -1000,
	90, 88, 86, 83, 82, 81, 78, 74, 73, -1000,
	72, 71, 69, 67, 64, 63, 62, 61, 60, 58,
	57, 55, 54, 53, 51, 50, 49, -1000, 7019, 1459,
	1303, 1296, 1277, 1276, 1292, 772, 48, 47, 45, 40,
	39, 37, -1000, -1000, 35, 30, 28, 25, -1000, 24,
	23, 127, 21, 20, 7, 6, 4, 2423, 2052, 1249,
	430, 16498, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 62832, 58702, 2, -5, 1, -1000, 2396, 837,
	29397, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 424, -1000, -1000, -1000, 259, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1451,
	612, -1000, -1000, -1000, 56194, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 58702, -1000, 1562, -28, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 609, -1000, 1556, 135, 1502, -1000,
	-1000, -1000, -1000, -1000, 58702, -1000, -1000, 2694, 2693, 1569,
	608, 55781, -1000, 1193, -1000, 739, 19163, -1000, 961, -1000,
	19163, 258, -1000, -1000, -1000, 2691, 2690, 2689, 2687, -1000,
	-1000, 42844, 13406, 42425, 42006, 39085, 55362, 12977, 48279, 1029,
	-1000, -1000, -1000, -1000, -1000, -3, 36511, 58702, -1000, 249,
	-1000, -1000, -1000, -1000, -1000, -1000, 25494, 421, 25039, 428,
	24584, 295, -1000, -1000, -1000, -1000, 2682, 2681, 863, 2680,
	2331, 62419, 1361, 2678, 1300, 932, 803, 2677, 2676, 2674,
	2673, 2672, 2671, 2670, 1163, 54943, 2119, 38656, 38227, 48692,
	48692, 1910, 54524, -1000, -1000, 1073, 1060, -1000, -1000, -1000,
	-1000, 2186, 2118, 2087, 47860, -1000, -1000, 2668, 2666, 2662,
	2660, 2652, 62006, 1360, 2650, 1830, 2648, 2647, 2646, 2644,
	2639, 2638, 2637, 2636, 2629, -1000, 47441, 47022, 46603, 2452,
	54105, 37798, 37369, -1000, -1000, -1000, 31069, 5620, 5562, 53686,
	31929, 48692, -1000, -1000, 25936, -94, -1000, -1000, -1000, 2092,
	-1000, 25936, -94, -1000, 2116, 1483, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1975, 1233, 2524, 36940, 1517, 1090,
	2183, 2626, 1798, 2174, 2173, 2169, 2159, 2156, 1286, 1871,
	1140, 1198, 2152, 2151, 2543, 1510, 41587, 2624, 2623, 2387,
	2142, 2086, -1000, -1000, -1000, -1000, 1131, -1000, -1000, -1000,
	-1000, -1000, 44095, -1000, -1000, 928, -1000, -1000, 928, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1020, 61180, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1379, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2090, -1000, 1498, -1000, -1000, 2621, 2052, 1781,
	2373, 2373, 2373, 2432, 411, 404, -1000, 127, -1000, -1000,
	70982, -1000, -1000, 25936, 25936, 25936, 25936, 25936, 1465, -1000,
	607, -1000, -1000, 653, -1000, 606, 531, -1000, -1000, -1000,
	-1000, -1000, -1000, 605, 2549, -1000, 859, -1000, -1000, -1000,
	-1000, 2514, -1000, 15601, -1000, -1000, -1000, 396, 604, 25936,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 248, 745, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 521, 1375, 520, 520, 520, -1000, -1000, 798,
	-1000, -1000, -1000, 270, 516, 244, 515, -1000, -1000, -1000,
	-1000, 2115, 602, 599, -1000, 598, 597, 595, -1000, -1000,
	-1000, 594, 593, 592, 590, 589, 588, 587, 584, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 795, -1000, 583, 580,
	579, 578, 572, 568, 563, 562, 553, -1000, -1000, -4,
	58702, -1000, 424, -4, -1000, -1000, 542, -1000, 19605, 19605,
	19605, -1000, -1000, 1552, 25936, -1000, 1985, -1000, 5067, -250,
	698, 30231, -1000, 28544, 698, 662, 33182, -1000, 2084, -1000,
	-1000, 534, 239, -1000, -1000, 2083, 58702, 13833, 58702, 48692,
	48692, -1000, 2292, 25936, -1000, -1000, 39512, 36098, 58702, 49105,
	2473, 71747, 36098, 58702, 2114, -1000, -1000, -1000, 58702, -1000,
	25936, -1000, 2470, 1109, -22, -1000, -1000, -1000, -1000, -1000,
	-1000, 1796, 1809, 898, 1665, 1298, -1000, 19163, 2324, -1000,
	-1000, -1000, 220, 13833, -1000, -1000, -1000, -1000, -1000, 1645,
	2275, 1063, -1000, 1615, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1314, 2273, -1000, 1445, 2269, 1310,
	-1000, -1000, 770, 2268, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1606, -1000, -1000, 2366, -1000, -1000, 1481,
	2264, -228, -1000, -1000, 39512, 36511, -14, -1000, -1000, -72,
	-1000, 12548, 70982, -1000, -1000, -1000, 70982, 740, -1000, -1000,
	2262, -1000, 70982, 738, -1000, -1000, 2260, -1000, -1000, -1000,
	2615, -1000, 2614, 1759, 2613, 2612, 2611, -1000, 1214, 1366,
	2610, -1000, 2608, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	46184, 45765, 802, -1000, 1551, -1000, -1000, 45346, 758, 1756,
	-1000, -1000, 1749, -1000, 690, -1000, 2607, 2446, 1934, 758,
	1745, -1000, -1000, -1000, -1000, -1000, 48692, -1000, 48692, -1000,
	48692, -1000, 1157, -1000, 61593, -250, -1000, -1000, -1000, -1000,
	-1000, 2259, 2606, 2602, 2601, -1000, 58702, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 163, 2245, -1000, -1000,
	163, 2243, -1000, 163, 2242, -1000, 49518, -1000, -1000, 1548,
	2241, -1000, -162, 2240, -1000, -1000, -162, 2237, -1000, -9,
	-1000, -1000, -1000, 837, -1000, 30650, -1000, 30650, 53267, 39512,
	749, 626, 70982, -1000, 39512, 70982, -1000, 45346, -1000, 52848,
	44933, -1000, -1000, 1101, 1858, -1000, -1000, -1000, -1000, 39512,
	39512, -1000, 52429, -1000, 1503, 1269, 2372, 48692, -1000, -1000,
	2113, -1000, 35685, 48692, -1000, 48692, -1000, 48692, -1000, 48692,
	-1000, 48692, -1000, 2600, 2597, 2596, 2244, 1299, 1260, 58702,
	-1000, -1000, 2389, 58702, -1000, 58702, -1000, -1000, -1000, 1793,
	-1000, -1000, -1000, -1000, 48692, -1000, -1000, -1000, -1000, -1000,
	-1000, 2110, -1000, 1280, -1000, 1093, -1000, -1000, 180, -1000,
	-1000, -22, -1000, 61180, -1000, -1000, 2052, 1781, -1000, 58702,
	-1000, -1000, -1000, 2052, 1572, 1901, 24129, 1870, 25936, 127,
	-1000, -1000, 127, 127, 18721, -1000, -1000, 71747, 71747, 13833,
	1050, 25936, 25936, 25936, 25936, 25936, 25936, 25936, 25936, 25936,
	25936, 25936, 25936, 25936, 25936, 25936, 25936, 25936, 25936, 25936,
	25936, 25936, 25936, 25936, 25936, 25936, 25936, 25936, 25936, 25936,
	25936, 25936, 25936, 25936, 25936, 25936, 1874, 25936, 1017, 25936,
	25936, 25936, 25936, 1788, -1000, -1000, 1450, 439, 1583, -1000,
	2502, 2502, 2502, 71301, 71301, 561, 2595, 653, -1000, 25936,
	-1000, -94, 25936, 14262, -1000, 2536, 1143, -1000, -1000, 404,
	8767, 1704, -1000, 402, 14717, -1000, -1000, -1000, 15601, 531,
	23674, 25936, 790, 70982, 12121, 2131, 1976, -1000, 2529, -1000,
	-1000, 2514, -1000, -1000, -1000, -1000, 2514, 1048, 1046, 2527,
	-1000, 2514, 2514, 527, 710, 709, 704, 697, 696, 25936,
	25936, 25936, 25936, 25936, 25936, 25936, 25936, -1000, 23232, 22777,
	22322, 27262, 21867, 25936, 16043, 21412, 20957, 58702, -4, 2469,
	25936, 100, -1000, 69015, -1000, 100, 100, 526, -23, 70982,
	1899, 1899, 29814, 1733, 1477, 1477, 1477, -1000, 525, 640,
	698, 9543, 50769, 1480, 698, 698, 219, 246, 401, 28127,
	1985, 50769, -1000, -1000, 48692, 524, 14262, 13833, 1124, -30,
	208, 1884, 1881, 1880, -1000, 1243, -32, 749, 1010, -130,
	-1000, 189, -40, -1000, 1040, -1000, -1000, -1000, -1000, 133,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 794, 523, 522, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 521, 1375, 520,
	520, 520, -1000, -1000, -1000, 270, 516, 244, 515, -1000,
	-1000, -1000, -1000, -1000, -1000, 2076, -72, 49105, 731, -41,
	866, -22, -1000, 928, -1000, 1351, -1000, -1000, -1000, -1000,
	-1000, -1000, 1097, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2547, -1000, 2507, -1000, -1000, 2526, -10, -1000, -1000, 13833,
	-1000, -24, 1386, -1000, 41168, 2374, 2354, 2351, 1151, -1000,
	1132, 2431, 44095, 2445, 14, -1000, 2065, -1000, -1000, 736,
	1274, 1007, 44095, 1445, -1000, 71747, -1000, 1913, 2430, 1106,
	1099, 1106, 1106, 1102, -1000, 44095, 1003, 1399, 39512, -1000,
	1001, -1000, -39, 2435, 12, -1000, 2056, 999, -1000, -1000,
	48692, 13833, 711, -14, 36511, 58702, 207, -1000, 25936, -94,
	25936, -94, -1000, -1000, 2233, -1000, -1000, -1000, 2592, 1336,
	1827, -1000, -1000, -1000, 514, 1743, 1445, 1737, -1000, -1000,
	44514, 2054, 58702, 1887, -18, 48692, -1000, -1000, 1398, -1000,
	2228, 2224, 577, 2591, -1000, 60767, -1000, 2377, 940, 2223,
	783, 108, 2468, 108, 34016, -1000, 58702, -1000, 58702, -1000,
	-1000, -1000, 2589, -1000, 48692, -1000, -1000, 48692, -1000, 48692,
	-1000, 48692, 161, 2221, -1000, -1000, 58702, 39512, 39512, 39512,
	5051, 40342, -42, -46, 389, -1000, 52016, 58702, 830, 40755,
	-214, 749, 711, -1000, 711, -1000, 48692, 2107, -1000, -1000,
	-1000, -1000, -1000, -1000, 2587, 2585, -1000, -1000, -1000, 58702,
	-1000, 58702, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1181, -1000, 2106, -1000, 2103, -1000, 32, -1000, -1000,
	-1000, -1000, -1000, 1721, 48692, 48692, 48692, -1000, 44095, -1000,
	-1000, 2052, -1000, -1000, -1000, -1000, -1000, 70982, -1000, 477,
	-1000, -1000, 70982, 1231, 1890, -1000, 1890, -16, -1000, 68453,
	1855, 48692, -1000, -1000, -1000, -1000, -1000, 735, 989, 989,
	1027, 1027, 1027, 1027, 2463, 889, 3760, 3896, 471, 471,
	471, 471, 471, 471, 471, 471, 5621, 210, 210, 5621,
	5621, 5621, 5621, 5621, 210, 210, 210, 471, 471, 471,
	71301, 71154, 5563, 25936, 25936, 993, 1442, 439, 4806, 25936,
	3648, 3648, 3648, 3648, -1000, 1537, -1000, -1000, -1000, -1000,
	2044, 513, 27262, 27262, -1000, -1000, -1000, -1000, 15159, 25936,
	-1000, -1000, -1000, -1000, 20502, -1000, -1000, 67891, -254, 386,
	-187, -7, -1000, 25936, 25936, 25936, 372, -1000, 371, -1000,
	-1000, 990, -1000, 987, 972, 967, -1000, 508, 196, 25936,
	58702, -1000, 64721, 638, -186, -1000, -47, 1095, -1000, 25936,
	186, -1000, 1460, 507, 506, 370, -48, 367, 724, 717,
	366, 358, 357, 25936, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 70701, 64406, 64369, 64054, 8281, 64017,
	63702, -53, 354, -1000, 2040, -187, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 353, -1000, 352, -1000, 70420, -187, 351,
	4029, -1000, 27262, 27262, 27262, -1000, 350, -1000, 68734, -1000,
	70139, 20060, 20060, 20060, 349, 69858, 25936, -187, -54, -1000,
	-55, -1000, -1000, 504, -59, 783, 19605, 28977, 13833, -1000,
	783, 783, 25936, -1000, 25936, 1877, -1000, -1000, -1000, 1872,
	1790, 1899, 29814, -1000, -1000, -1000, -1000, 50769, 631, 698,
	50769, -1000, 2514, 1919, -1000, -1000, -1000, 58702, 424, -1000,
	50769, 50769, 13833, 698, -1000, 348, 32346, -7, 181, -1000,
	-1000, 13833, 1954, 1954, 1954, -1000, -1000, 2026, 58702, 2485,
	-1000, 1380, -1000, 71747, -1000, 652, 948, -1000, 2525, 502,
	-1000, 2514, 2514, 58702, 99, 19163, -1000, 928, -1000, -1000,
	1188, -1000, 1359, -1000, 1035, -1000, -1000, -1000, 19163, -1000,
	1507, 58702, 58702, 48692, -1000, -1000, 1728, 60354, 1724, 71747,
	58702, -1000, -1000, 501, 499, 1851, 1842, 827, 58702, 58702,
	59941, 59528, 58702, 1411, 25936, 1488, 1454, -94, -1000, -94,
	496, 1006, 48692, 48692, 48692, 1307, -1000, -1000, -1000, -1000,
	-1000, 48692, -1000, -1000, 2523, -1000, 1106, -1000, -1000, -1000,
	1106, 1445, 1306, 48692, 39512, 764, 58702, 1429, -94, -1000,
	-94, 495, 13833, 1363, -1000, 1918, -1000, -1000, -1000, 11694,
	70982, -1000, 70982, -1000, 58702, -1000, 800, 58702, 40755, 757,
	2219, -1000, 1445, 2214, 424, -1000, -1000, 33599, -72, 749,
	39512, 48692, -18, 39512, 39512, 39512, 2582, 494, 2581, -1000,
	1547, 1722, -1000, -1000, 59115, 2281, 681, 58702, 1486, -1000,
	25936, 1321, -1000, 32765, 811, 58702, 1263, 93, -1000, -1000,
	-1000, 19, 58702, -1000, 2580, -1000, -1000, 163, 163, 163,
	-1000, 48692, 48692, 1548, -1000, -162, -162, -1000, -1000, 5051,
	5051, 749, -20, 493, -1000, 689, 686, 31502, 39512, -63,
	-1000, -1000, -1000, -1000, -1000, 48692, 58702, 621, 1912, 58702,
	-1000, 749, -1000, -1000, 763, -1000, 1092, -1000, -1000, -72,
	-72, -1000, 1180, 1173, 58702, -1000, 13833, 58702, 48692, 13833,
	48692, -1000, -1000, -1000, -1000, -1000, 1231, -1000, 25936, -1000,
	-1000, -1000, 18721, -1000, -1000, -1000, 48692, -232, 25936, 25936,
	3537, 826, 25936, 27262, 27262, -1000, 25936, 804, -1000, -1000,
	-1000, -1000, -1000, 2021, 486, 25936, 71747, 6226, 5958, -1000,
	343, 63665, 5621, -1000, 25936, -1000, 342, 18279, -1000, 69296,
	-52, -52, -1000, 2546, 1769, 1389, 1309, 1205, 2516, 11267,
	-187, -65, -1000, -1000, 651, -1000, 2177, -1000, 25936, 69577,
	10840, -1000, 34433, 784, 1486, -1000, -1000, 2514, 708, -1000,
	-1000, -1000, 708, -1000, 67610, 71747, 71747, 25936, 25936, -1000,
	25936, 25936, 25936, -1000, -1000, 25936, -1000, -1000, 2015, 25936,
	-1000, 71747, 71747, 27262, 27262, 27262, 27262, 27262, 27262, 27262,
	27262, 27262, 27262, 27262, 27262, 27262, 27262, 27262, 27262, 27262,
	27262, 27262, 1751, 27262, 2500, 2500, 2500, -1000, 2019, 2015,
	25936, 25936, 71747, 341, 336, 335, -1000, 25936, -187, -1000,
	-1000, 5051, -1000, 1972, -1000, -220, -1000, 1985, -1000, -1000,
	1972, 1972, -67, 70982, 29814, 29814, -1000, 485, 25936, 1861,
	-1000, 635, -1000, -71, -1000, 50769, -1000, 632, -251, -1000,
	685, -1000, -1000, -1000, 424, -1000, -1000, -1000, 136, 50769,
	-1000, -80, -1000, 2467, 333, 13833, -1000, -1000, -1000, -1000,
	-1000, -1000, -94, -72, 1497, 2544, -1000, 2515, 648, 625,
	331, 2514, 329, 328, -72, 58702, -1000, -22, -1000, -1000,
	-1000, 25936, -1000, -1000, 2350, 959, 957, -1000, 2212, -1000,
	1709, -1000, 815, -1000, 1305, -1000, 25936, 25936, 484, 482,
	2578, 1388, 2576, 2207, 1548, 2206, 1548, -1000, -1000, 713,
	-1000, 70982, 480, 479, -1000, -24, 1245, -1000, -1000, 25936,
	25936, 51599, -1000, 2366, 2366, -1000, 954, -1000, -1000, -1000,
	1445, 944, -1000, -1000, 1397, -1000, -1000, -1000, -1000, 25936,
	-1000, -39, 937, 749, 2014, -1000, 2575, 2573, 2570, 327,
	-64, -1000, 2464, 1511, 58702, 48692, 48692, 2460, 712, -1000,
	2514, -1000, -1000, -1000, -1000, 758, -1000, -1000, 2569, -1000,
	48692, 2198, 1546, 1707, 1815, 681, 39929, -1000, 758, 1901,
	-1000, 70982, -1000, 1263, 17824, 2362, -81, -1000, 109, -1000,
	-1000, -1000, 783, 34016, 29814, 25936, 2566, -82, -1000, -1000,
	-1000, -1000, -1000, 161, -1000, -1000, -1000, -1000, 51186, 51186,
	39512, 39512, 39512, 749, 58702, 58702, 40755, 2565, 478, 58702,
	58702, 476, -1000, -1000, -1000, 1492, 48692, -1000, -1000, 754,
	-1000, -1000, 1433, 1584, 1433, 1505, 67329, -1000, 2365, 13833,
	2466, 3648, 25936, 25936, 242, 5111, 296, 3648, 25936, 25936,
	71747, 71473, -90, 25936, 25936, -1000, 25936, 624, 70982, 2541,
	25936, 326, 325, 321, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 320, -1000, -1000, -1000, -1000, -1000, 70982, 25936,
	94, -1000, -1000, -1000, 63245, -1000, 25936, 319, 310, -1000,
	-1000, -1000, 305, 301, 8804, 4420, 67048, 66767, 66486, 70982,
	2019, 70982, -1000, -1000, 781, 781, 1086, 1086, 1086, 1086,
	2500, 385, 323, 839, 1252, 1252, 1252, 1461, 459, 459,
	1252, 1252, 1252, 2009, 1777, 475, 977, -1000, -1000, 70982,
	70982, 298, -1000, -1000, -1000, -187, 297, 1968, 2427, -1000,
	29814, 1968, 1968, -1000, -1000, 1790, 58702, 70982, 29814, -250,
	-1000, 2514, -1000, -1000, 1919, -1000, 9982, -1000, 13833, -1000,
	-1000, 32346, -1000, 472, -1000, 13, -1000, -1000, -1000, 623,
	2564, 644, -1000, 281, -1000, -1000, -72, 70982, 58702, 58702,
	58702, 2191, -1000, 3670, -1000, 66205, -91, -1000, 68453, 25936,
	58702, -1000, -1000, 1385, 1854, 848, -1000, 58702, -1000, 58702,
	-1000, -1000, 58702, 58702, 48692, -92, 70982, -114, -1000, 684,
	-1000, -1000, 48692, 48692, 39512, -99, 13833, -1000, 39512, -1000,
	-1000, -1000, 1904, -94, -1000, 2562, 458, 1445, -94, -1000,
	1491, -1000, 620, -1000, -1000, 824, 13833, 48692, 2190, 1810,
	681, 39929, -1000, 940, 1263, -1000, -1000, -148, -1000, 491,
	-94, 58702, 2561, 1486, -1000, -157, 70982, -1000, 682, -1000,
	-1000, -103, -1000, -1000, 280, -1000, 2313, 2309, -1000, -1000,
	25936, 446, 444, 58702, 1593, -1000, -1000, -1000, -1000, 13833,
	1253, -1000, -1000, -1000, -1000, 2365, 3648, 3648, 25936, 25936,
	25936, 3648, 71473, -104, -1000, 3648, 3648, -187, -1000, -1000,
	69296, -1000, -1000, -1000, -1000, 70982, 10413, 1434, -1000, 65924,
	-1000, -1000, -1000, -1000, 25936, 25936, -1000, -1000, -1000, -1000,
	-1000, 27262, 1998, 443, 71747, -1000, -1000, 775, 25936, 25936,
	1985, 775, 775, -1000, -105, -1000, 698, -1000, -1000, -1000,
	2514, 13, -1000, 2559, 13833, 642, -1000, 2558, -1000, -1000,
	-1000, -1000, 58702, -1000, 58702, -1000, 13833, 58702, 1991, 1689,
	-1000, -1000, 1841, 442, 27262, 48692, 727, 1980, 1421, 25936,
	-1000, -109, -115, 1677, -1000, -1000, 1676, 25936, -1000, 71747,
	1548, 1548, -117, -121, -1000, 936, 58702, 17382, -1000, -1000,
	-1000, 906, -1000, -162, 1429, 1947, 750, -1000, 40755, 757,
	-1000, -1000, 746, -1000, 441, 58702, 1545, 440, 13833, -1000,
	681, 39929, -1000, 2281, -1000, 2179, 58702, 2343, -1000, -1000,
	-1000, 1901, 439, -1000, 749, 438, 436, -125, 25936, 25936,
	-126, -169, -1000, 707, 700, -1000, -1000, 48692, 48692, -1000,
	3648, 3648, 3648, -1000, 271, -1000, -1000, 1486, 2415, -1000,
	65643, 65362, 6180, 27262, 71747, -132, -1000, 58702, 70982, -187,
	-1000, -1000, -1000, 50769, 618, -1000, 2556, -1000, -1000, 1761,
	-1000, -1000, -1000, 58702, 1703, -1000, -1000, 25936, 977, 435,
	25936, -1000, -1000, 1902, 2049, 1904, 434, -1000, -1000, -1000,
	-1000, -1000, 1329, -1000, -1000, 70982, 2399, -1000, -1000, 433,
	432, 431, 677, 1995, -1000, 427, 757, -1000, 1446, -1000,
	1875, 268, 2459, 746, -1000, 2508, -1000, 25936, -1000, 48692,
	25936, 1541, 39929, -1000, 1815, 1042, -133, 58702, 1263, -1000,
	-1000, 39512, 39512, 1421, -138, -152, -1000, 1593, -1000, 58702,
	-1000, 58702, -1000, -1000, -1000, 1740, 25936, -1000, -1000, 6180,
	-153, -1000, -185, -1000, 2458, -1000, -1000, -1000, -1000, -1000,
	2170, 65081, 1780, 58702, 64758, 2016, -1000, -1000, 1429, 58702,
	48692, 825, 13833, 1433, 1433, 25936, 16940, 1441, 25936, -1000,
	48692, -1000, 2307, 1904, -94, -1000, -1000, -158, 824, -164,
	48692, -1000, 1810, 1150, -1000, 783, -1000, -1000, -170, -172,
	1904, 1421, -1000, -1000, -176, -177, 190, 26820, 26820, 26820,
	-187, -1000, 58702, 425, 2154, -1000, 1520, 1377, 101, 856,
	-1000, -1000, 1980, -189, 424, -1000, 25936, -1000, -190, -1000,
	810, -196, -1000, 809, -198, -1000, 1989, -1000, -202, 422,
	-1000, 1429, 750, 1421, 420, 1421, 418, -1000, 34016, -1000,
	749, 749, 1429, 1904, -1000, -1000, -1000, -1000, -1000, 27689,
	1509, 1234, 68172, -1000, -1000, -1000, -1000, 58702, -1000, 1530,
	1523, 1133, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1780, 70982, -1000, 1433, 1943, -1000, 1433, 1982, -1000, 1440,
	-1000, 58702, 757, -1000, 1904, 25936, 1904, 25936, -197, -1000,
	-1000, -1000, 1429, 2478, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2295, -1000, 838, 1601, 1601, 1520, -1000, 417, -1000,
	414, -1000, -208, -1000, 1429, -209, 1429, -218, -1000, -1000,
	26378, -1000, 2488, -1000, -1000, 1820, -1000, 1980, 25936, 25936,
	1539, 782, 1421, 782, 1421, -1000, -1000, -1000, -1000, -1000,
	-222, -230, -1000, -1000, -1000, -1000, 2555, 1904, -1000, 1904,
	1429, 875, -1000, 1429, 1429, -1000, 413, 782, 782, 25936,
	-1000, -1000, -234, 1429, -1000,
}
var sqlPgo = [...]int{

	0, 3205, 3204, 3203, 3198, 3197, 3195, 3187, 3186, 3185,
	3184, 3183, 3182, 3179, 3177, 3172, 3169, 3166, 3165, 3162,
	3160, 3159, 3157, 3155, 3153, 3149, 3148, 3147, 3146, 3144,
	3142, 3141, 3135, 3132, 3131, 3130, 3129, 3127, 3126, 3125,
	3124, 3123, 3118, 3116, 30, 3114, 3111, 3108, 3105, 3103,
	3102, 3101, 3100, 3098, 3094, 3091, 3088, 3085, 3083, 3082,
	3081, 3080, 35, 3077, 3076, 3072, 3071, 3063, 3061, 3060,
	3059, 3054, 3051, 3050, 3048, 3046, 3042, 139, 3040, 3038,
	3037, 3036, 3035, 3034, 3032, 3031, 3029, 3027, 3025, 3022,
	3021, 3020, 186, 3019, 3018, 3017, 3014, 3012, 3011, 3010,
	3005, 3004, 3003, 184, 3002, 2998, 2997, 2995, 2994, 2993,
	2992, 2989, 2988, 2987, 2986, 2985, 2982, 2981, 2979, 2978,
	2977, 2972, 2971, 2969, 2966, 2964, 2961, 2955, 2951, 2946,
	2941, 199, 145, 2940, 2939, 2934, 2933, 2932, 2930, 2927,
	103, 96, 25, 2926, 92, 132, 181, 6338, 176, 2923,
	2922, 2920, 2916, 2912, 70, 140, 126, 125, 122, 99,
	2911, 2910, 69, 56, 33, 24, 102, 2909, 2908, 2907,
	2055, 95, 2902, 2901, 196, 180, 2899, 1028, 2897, 128,
	79, 91, 78, 63, 2896, 110, 20, 2895, 118, 67,
	2894, 117, 61, 29, 4760, 5216, 2893, 77, 205, 71,
	85, 179, 178, 169, 159, 127, 94, 2892, 190, 2889,
	73, 123, 2888, 2887, 2886, 57, 149, 21, 3, 124,
	9, 87, 11, 2885, 10, 2884, 2883, 2882, 2878, 17,
	121, 2877, 52, 54, 2876, 38, 59, 155, 2875, 170,
	2874, 98, 2873, 191, 152, 154, 13, 172, 2872, 2871,
	2870, 2869, 2868, 101, 14, 97, 2867, 2866, 115, 177,
	2865, 45, 137, 72, 120, 200, 90, 163, 75, 167,
	130, 171, 2864, 2863, 2862, 156, 2861, 2860, 112, 157,
	2856, 2855, 158, 204, 26, 51, 182, 41, 2854, 2853,
	114, 2852, 148, 2850, 2849, 2848, 201, 138, 161, 4,
	68, 93, 23, 39, 175, 113, 81, 74, 2846, 3070,
	1578, 1541, 2845, 105, 89, 55, 82, 107, 195, 44,
	2843, 2839, 1106, 2838, 2837, 2836, 2835, 141, 2834, 2832,
	2831, 111, 37, 76, 2830, 2828, 116, 58, 134, 198,
	86, 162, 146, 187, 2827, 131, 2826, 31, 108, 2825,
	151, 192, 289, 2824, 1237, 106, 2823, 194, 2821, 2817,
	2815, 2805, 341, 2801, 2800, 754, 2799, 109, 2796, 2794,
	143, 147, 1063, 32, 2790, 65, 88, 2788, 150, 28,
	2784, 129, 34, 0, 6280, 4595, 5525, 2783, 598, 2782,
	168, 104, 2781, 2780, 2778, 2777, 36, 18, 6, 8,
	12, 16, 996, 498, 2776, 2775, 83, 100, 135, 2773,
	197, 166, 2771, 2769, 2767, 64, 2765, 22, 2763, 19,
	2760, 2759, 27, 2, 2758, 2757, 185, 2756, 183, 2755,
	2754, 2495, 2753, 193, 2752, 119, 2747, 133, 164, 2738,
	2733, 2730, 2728, 189, 2725, 188, 2719, 7, 15, 5,
	2718, 2714, 2703, 153, 1, 2336, 2702, 2701, 60, 142,
	66, 2698, 2697, 144,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 3, 3,
	3, 3, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 7, 7, 8, 8, 8, 32, 32,
	10, 10, 9, 9, 9, 11, 11, 6, 6, 6,
	6, 6, 6, 6, 6, 13, 13, 23, 23, 14,
	25, 433, 433, 17, 27, 18, 28, 12, 435, 435,
	435, 435, 21, 19, 19, 29, 29, 143, 143, 143,
	143, 16, 16, 24, 24, 156, 156, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 155, 432, 432,
	158, 158, 157, 153, 153, 436, 436, 159, 159, 159,
	161, 161, 33, 33, 90, 90, 90, 144, 83, 83,
	83, 83, 83, 83, 83, 78, 78, 381, 381, 382,
	382, 139, 139, 140, 140, 140, 140, 141, 141, 142,
	142, 142, 47, 35, 35, 35, 35, 35, 35, 35,
	36, 36, 36, 36, 37, 37, 37, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 45, 45, 45, 45,
	132, 132, 48, 48, 48, 48, 48, 48, 48, 48,
	48, 440, 440, 440, 440, 440, 440, 440, 440, 440,
	440, 440, 440, 440, 440, 440, 440, 440, 440, 440,
	440, 440, 441, 441, 442, 442, 443, 443, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 444, 444,
	444, 444, 444, 444, 444, 444, 444, 444, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 59, 59, 231, 231, 209, 209, 60,
	60, 60, 61, 61, 62, 62, 49, 49, 428, 428,
	244, 244, 349, 349, 64, 64, 65, 65, 65, 65,
	65, 65, 66, 66, 66, 66, 66, 66, 66, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 73,
	73, 73, 74, 74, 74, 71, 71, 71, 69, 69,
	69, 68, 68, 68, 72, 72, 72, 70, 70, 70,
	245, 245, 75, 75, 75, 75, 75, 75, 75, 75,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 351, 351, 76, 76, 76, 320, 320, 79, 79,
	79, 276, 276, 80, 80, 80, 80, 80, 81, 81,
	81, 81, 91, 91, 91, 91, 431, 431, 237, 237,
	174, 174, 174, 174, 86, 86, 86, 86, 87, 87,
	87, 88, 88, 137, 137, 97, 97, 97, 97, 97,
	96, 96, 96, 96, 96, 96, 39, 39, 39, 40,
	40, 41, 41, 42, 42, 43, 43, 44, 44, 44,
	44, 44, 99, 99, 437, 437, 101, 98, 98, 98,
	100, 100, 100, 100, 102, 103, 103, 103, 103, 103,
	103, 104, 104, 375, 375, 252, 252, 373, 373, 389,
	389, 374, 374, 213, 213, 213, 213, 213, 214, 214,
	214, 380, 380, 380, 380, 380, 380, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 105, 105, 105, 105,
	105, 105, 105, 105, 105, 105, 138, 138, 138, 138,
	122, 122, 122, 131, 131, 131, 131, 131, 131, 131,
	124, 124, 124, 114, 114, 106, 106, 106, 106, 110,
	110, 110, 110, 110, 107, 107, 111, 111, 113, 113,
	115, 115, 115, 115, 115, 115, 108, 108, 108, 108,
	117, 117, 117, 117, 283, 283, 283, 116, 116, 335,
	335, 127, 127, 127, 127, 127, 127, 334, 334, 123,
	123, 123, 123, 126, 126, 126, 126, 266, 266, 120,
	120, 120, 121, 121, 121, 125, 125, 128, 128, 128,
	128, 109, 109, 109, 446, 446, 446, 129, 129, 119,
	119, 130, 130, 130, 130, 130, 130, 130, 130, 118,
	118, 118, 434, 434, 112, 429, 429, 426, 426, 426,
	426, 426, 426, 426, 427, 427, 430, 430, 84, 84,
	84, 54, 54, 447, 447, 447, 55, 55, 448, 448,
	448, 445, 445, 445, 445, 445, 445, 445, 445, 215,
	215, 216, 216, 301, 301, 301, 301, 301, 217, 217,
	160, 160, 160, 220, 221, 221, 218, 218, 219, 219,
	219, 223, 223, 222, 225, 225, 224, 300, 394, 394,
	395, 395, 395, 395, 395, 395, 395, 396, 396, 396,
	396, 396, 396, 396, 396, 396, 396, 392, 392, 392,
	393, 390, 390, 391, 391, 391, 391, 391, 449, 449,
	449, 449, 449, 449, 450, 450, 450, 299, 299, 229,
	229, 397, 397, 397, 397, 398, 398, 398, 398, 398,
	401, 400, 399, 399, 399, 399, 399, 330, 330, 330,
	58, 58, 58, 263, 263, 262, 262, 264, 264, 264,
	264, 264, 264, 264, 264, 264, 264, 264, 264, 264,
	264, 134, 134, 56, 56, 56, 166, 166, 53, 53,
	53, 452, 452, 57, 57, 57, 453, 453, 63, 63,
	63, 63, 63, 63, 52, 52, 52, 52, 52, 454,
	454, 284, 284, 282, 282, 281, 281, 235, 235, 337,
	178, 178, 154, 154, 154, 20, 22, 22, 15, 15,
	30, 30, 31, 31, 26, 26, 438, 438, 439, 439,
	85, 85, 89, 89, 89, 95, 95, 133, 133, 133,
	133, 133, 133, 133, 34, 34, 34, 34, 46, 46,
	46, 46, 93, 456, 456, 456, 94, 94, 455, 455,
	173, 173, 173, 173, 175, 175, 296, 296, 297, 297,
	457, 457, 298, 298, 298, 298, 168, 167, 169, 169,
	51, 51, 51, 162, 162, 163, 163, 164, 164, 165,
	165, 458, 458, 82, 82, 82, 136, 136, 208, 208,
	292, 292, 292, 230, 230, 183, 183, 295, 295, 293,
	293, 293, 293, 261, 261, 261, 135, 135, 240, 240,
	254, 254, 255, 255, 346, 346, 256, 92, 92, 147,
	147, 145, 145, 145, 145, 145, 145, 459, 459, 146,
	146, 146, 148, 148, 148, 148, 148, 148, 148, 151,
	151, 151, 151, 152, 152, 152, 150, 150, 408, 408,
	408, 410, 410, 411, 407, 407, 409, 409, 451, 451,
	265, 265, 265, 227, 228, 226, 226, 460, 460, 233,
	233, 232, 234, 234, 336, 336, 336, 259, 259, 259,
	259, 287, 287, 285, 285, 286, 286, 288, 288, 289,
	289, 289, 290, 290, 291, 291, 258, 258, 316, 316,
	149, 149, 149, 239, 239, 239, 241, 241, 307, 307,
	307, 307, 307, 308, 308, 306, 306, 306, 306, 338,
	338, 338, 338, 338, 338, 338, 338, 338, 339, 339,
	242, 242, 340, 294, 294, 424, 424, 424, 425, 425,
	333, 333, 341, 341, 341, 341, 341, 341, 331, 331,
	332, 332, 347, 348, 348, 269, 269, 269, 269, 267,
	267, 270, 270, 270, 270, 268, 268, 342, 342, 342,
	342, 260, 260, 343, 343, 343, 344, 302, 303, 303,
	352, 352, 352, 352, 352, 367, 238, 238, 238, 238,
	238, 461, 461, 353, 353, 353, 353, 353, 353, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 354, 354, 354, 354, 354, 354,
	354, 357, 357, 357, 356, 356, 356, 356, 356, 356,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	356, 356, 366, 366, 366, 366, 366, 358, 358, 363,
	363, 364, 364, 364, 359, 360, 365, 365, 365, 365,
	462, 462, 369, 369, 361, 361, 361, 361, 361, 361,
	361, 361, 361, 355, 355, 355, 362, 279, 279, 279,
	279, 279, 279, 279, 279, 279, 279, 279, 279, 279,
	277, 277, 278, 278, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	309, 309, 309, 309, 309, 309, 309, 309, 309, 309,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 310, 310, 310, 310, 311,
	311, 311, 311, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 312, 312,
	312, 312, 312, 312, 312, 312, 312, 312, 402, 402,
	402, 402, 402, 402, 402, 402, 405, 405, 406, 406,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 412,
	412, 413, 413, 415, 415, 416, 416, 417, 418, 418,
	418, 419, 420, 420, 414, 414, 421, 421, 421, 421,
	422, 422, 423, 423, 423, 423, 423, 322, 322, 323,
	323, 329, 329, 329, 212, 212, 212, 212, 212, 212,
	212, 212, 212, 212, 212, 212, 212, 212, 212, 212,
	176, 176, 176, 176, 176, 250, 250, 248, 248, 248,
	251, 251, 249, 249, 247, 247, 246, 246, 319, 319,
	317, 317, 321, 321, 271, 271, 368, 368, 368, 368,
	368, 368, 368, 272, 272, 272, 280, 273, 273, 274,
	274, 274, 274, 274, 313, 314, 275, 275, 275, 315,
	315, 324, 328, 328, 327, 326, 326, 325, 325, 304,
	304, 305, 305, 257, 257, 463, 463, 253, 253, 345,
	345, 345, 345, 211, 211, 243, 243, 210, 210, 203,
	203, 204, 204, 204, 204, 236, 236, 370, 370, 370,
	371, 372, 318, 193, 192, 180, 181, 191, 190, 189,
	179, 182, 186, 187, 188, 184, 185, 199, 198, 197,
	195, 196, 350, 205, 205, 206, 206, 206, 207, 207,
	207, 207, 177, 177, 200, 200, 201, 202, 202, 194,
	194, 194, 170, 170, 170, 171, 171, 172, 172, 379,
	379, 377, 377, 377, 378, 378, 378, 378, 376, 376,
	376, 376, 376, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 383, 383, 383, 383, 383, 383, 383, 383, 383,
	383, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 386, 386, 386,
	386, 386, 386, 386, 386, 386, 386, 384, 384, 384,
	384, 384, 384, 384, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 385, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 388, 388,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 0, 1, 1,
	2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 3, 1, 1, 3, 4, 6,
	1, 3, 1, 1, 3, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 4, 6, 4, 6, 6,
	6, 1, 1, 5, 5, 6, 6, 4, 4, 4,
	4, 3, 4, 4, 7, 4, 7, 5, 3, 5,
	7, 4, 12, 4, 12, 1, 3, 5, 5, 2,
	5, 3, 6, 4, 6, 5, 6, 6, 4, 8,
	3, 4, 3, 6, 4, 3, 1, 3, 2, 1,
	1, 3, 1, 3, 2, 2, 0, 1, 1, 0,
	2, 0, 7, 2, 5, 6, 2, 1, 6, 4,
	9, 7, 12, 12, 2, 7, 2, 1, 1, 1,
	3, 3, 0, 3, 1, 3, 1, 1, 3, 2,
	5, 0, 5, 1, 2, 1, 2, 1, 2, 2,
	3, 3, 3, 3, 3, 5, 3, 3, 5, 3,
	3, 5, 3, 3, 5, 3, 6, 6, 6, 3,
	1, 1, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 3, 3, 4, 3, 4, 7, 4, 4, 4,
	3, 5, 7, 4, 3, 3, 4, 3, 3, 3,
	3, 3, 2, 0, 1, 0, 1, 0, 3, 3,
	3, 3, 3, 6, 4, 4, 4, 3, 5, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 1,
	2, 1, 2, 1, 2, 1, 2, 4, 1, 1,
	2, 1, 2, 7, 3, 2, 0, 1, 3, 3,
	1, 0, 1, 2, 2, 1, 6, 5, 1, 2,
	1, 3, 2, 0, 8, 3, 2, 2, 2, 2,
	2, 2, 1, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 4,
	6, 3, 4, 6, 3, 4, 6, 3, 5, 7,
	3, 4, 6, 3, 3, 5, 3, 3, 5, 3,
	1, 3, 2, 2, 5, 3, 3, 6, 6, 3,
	1, 1, 2, 1, 1, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 3, 5, 7, 2, 3, 0, 3, 5,
	2, 3, 0, 2, 3, 2, 3, 2, 6, 4,
	7, 2, 6, 4, 7, 2, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 2, 1, 2, 2, 3,
	2, 4, 3, 2, 2, 1, 2, 1, 3, 3,
	1, 2, 1, 2, 1, 2, 1, 1, 3, 5,
	4, 6, 4, 3, 0, 1, 3, 2, 4, 2,
	4, 1, 6, 3, 1, 1, 5, 3, 2, 6,
	3, 3, 4, 4, 3, 1, 3, 2, 1, 3,
	1, 2, 1, 1, 2, 2, 3, 1, 1, 1,
	1, 1, 3, 2, 2, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 3, 3, 3, 3,
	2, 3, 3, 1, 1, 1, 1, 1, 2, 2,
	5, 7, 3, 3, 3, 3, 4, 4, 3, 4,
	4, 3, 4, 4, 4, 3, 2, 3, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	3, 4, 4, 5, 0, 1, 1, 3, 4, 1,
	0, 5, 4, 6, 4, 6, 4, 1, 0, 3,
	4, 4, 5, 7, 5, 3, 3, 2, 0, 4,
	2, 3, 4, 2, 3, 3, 3, 4, 3, 3,
	3, 3, 4, 3, 1, 1, 1, 2, 3, 2,
	3, 6, 6, 7, 9, 7, 9, 3, 4, 5,
	5, 3, 1, 1, 5, 2, 0, 1, 1, 1,
	1, 3, 2, 2, 2, 1, 2, 0, 3, 3,
	2, 10, 13, 0, 2, 3, 9, 12, 0, 2,
	3, 1, 1, 2, 2, 2, 2, 1, 0, 1,
	0, 1, 3, 1, 1, 1, 1, 3, 8, 0,
	1, 1, 0, 2, 1, 0, 1, 0, 9, 9,
	3, 1, 3, 7, 1, 3, 11, 3, 2, 0,
	3, 1, 2, 2, 3, 2, 6, 2, 1, 1,
	2, 4, 2, 5, 5, 5, 2, 8, 9, 6,
	5, 3, 1, 5, 8, 5, 11, 3, 0, 1,
	3, 3, 2, 2, 1, 1, 1, 4, 0, 3,
	0, 2, 2, 2, 0, 1, 1, 2, 2, 0,
	3, 3, 2, 1, 1, 2, 2, 1, 2, 1,
	5, 8, 4, 1, 0, 1, 2, 2, 1, 2,
	3, 2, 2, 3, 2, 2, 2, 2, 2, 3,
	1, 4, 2, 4, 7, 3, 3, 0, 3, 6,
	3, 1, 1, 8, 7, 5, 0, 1, 6, 7,
	6, 5, 3, 4, 15, 18, 15, 18, 4, 0,
	2, 2, 0, 1, 0, 1, 0, 1, 3, 2,
	2, 0, 1, 1, 0, 6, 6, 8, 6, 8,
	6, 8, 6, 8, 6, 8, 1, 0, 2, 0,
	2, 2, 3, 3, 2, 2, 2, 1, 2, 1,
	2, 1, 2, 1, 3, 2, 3, 2, 2, 2,
	2, 2, 2, 1, 1, 0, 2, 2, 1, 0,
	1, 3, 2, 0, 2, 1, 1, 0, 1, 3,
	1, 0, 1, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 1, 3, 1, 3, 8, 5, 3,
	4, 3, 0, 2, 2, 0, 10, 3, 2, 0,
	1, 3, 1, 1, 3, 3, 5, 1, 1, 3,
	3, 2, 3, 4, 3, 4, 5, 0, 2, 2,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 8,
	8, 8, 2, 4, 4, 4, 2, 2, 2, 2,
	3, 1, 3, 6, 1, 0, 1, 0, 1, 0,
	1, 1, 0, 1, 5, 1, 0, 1, 0, 1,
	0, 3, 1, 3, 2, 4, 5, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	3, 0, 1, 1, 1, 1, 3, 0, 2, 0,
	4, 2, 5, 3, 2, 0, 1, 3, 3, 5,
	1, 1, 1, 1, 3, 2, 4, 4, 0, 8,
	4, 3, 4, 1, 5, 3, 4, 5, 1, 5,
	1, 3, 2, 0, 3, 0, 2, 3, 1, 3,
	2, 0, 3, 5, 6, 4, 6, 4, 3, 2,
	1, 0, 5, 1, 0, 2, 2, 2, 1, 1,
	0, 1, 1, 1, 0, 4, 2, 1, 2, 2,
	4, 1, 3, 1, 2, 3, 2, 2, 1, 0,
	2, 5, 7, 2, 1, 1, 2, 4, 3, 5,
	0, 1, 1, 1, 1, 1, 1, 2, 4, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 5, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 3, 0, 5,
	4, 1, 2, 1, 4, 1, 1, 2, 1, 1,
	1, 1, 1, 0, 1, 2, 5, 1, 4, 2,
	5, 1, 4, 3, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 3,
	1, 0, 1, 4, 1, 3, 3, 3, 5, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 3, 5,
	4, 6, 3, 5, 4, 6, 4, 6, 5, 7,
	3, 3, 3, 3, 3, 4, 3, 2, 4, 2,
	3, 3, 4, 3, 4, 3, 4, 5, 6, 6,
	7, 6, 7, 6, 7, 3, 4, 4, 1, 3,
	1, 3, 3, 2, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 5, 6, 6, 7, 1,
	2, 1, 2, 1, 1, 1, 1, 1, 6, 2,
	1, 5, 1, 1, 1, 1, 2, 1, 5, 5,
	3, 1, 1, 1, 2, 2, 2, 4, 3, 5,
	6, 8, 6, 6, 4, 3, 4, 1, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	6, 6, 8, 8, 6, 4, 6, 6, 6, 4,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 4, 3, 4, 4, 3,
	6, 5, 5, 5, 4, 4, 3, 4, 3, 5,
	0, 5, 0, 2, 0, 1, 3, 3, 2, 2,
	0, 6, 1, 0, 3, 0, 2, 2, 2, 0,
	1, 4, 2, 2, 2, 2, 2, 4, 1, 1,
	5, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 1, 2, 2, 3, 1, 2, 3,
	2, 3, 2, 3, 1, 0, 1, 3, 1, 3,
	3, 3, 1, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 3, 1, 2, 3, 0, 3,
	3, 2, 2, 1, 2, 2, 3, 2, 1, 1,
	1, 5, 1, 2, 4, 2, 0, 1, 0, 3,
	5, 1, 0, 1, 2, 1, 0, 1, 3, 3,
	2, 1, 1, 1, 3, 1, 3, 3, 1, 1,
	1, 1, 5, 3, 1, 1, 3, 1, 2, 2,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 5, 7, 1, 7,
	5, 3, 1, 1, 1, 1, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 0, 3, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 456, -77, -47, -45, -79, -80, -65,
	-78, -81, -76, -91, -95, -85, -97, -133, -138, -3,
	-33, -35, -48, -64, -66, -75, -83, -82, -84, -86,
	-90, -89, -39, -92, -96, -105, -134, -135, -136, 82,
	68, 122, 104, 109, 129, 155, 285, 315, 325, 309,
	-100, -101, 344, -34, -46, -94, -93, 304, -4, -10,
	27, 39, -36, -37, -38, 53, -56, -53, -50, -59,
	-440, 84, -409, -67, -70, -72, -444, 114, 128, 171,
	277, -87, -88, 311, 313, -41, -40, 124, -145, -147,
	-98, -99, -137, -106, -107, -108, -109, -110, -111, -112,
	-113, -114, -115, -116, -117, -118, -119, -120, -121, -122,
	-123, -124, -125, -126, -127, -128, -129, -130, 347, 394,
	40, 356, 69, 117, 319, 21, -5, -6, -7, -8,
	-9, -11, -22, -49, -51, -52, -54, -55, -63, -57,
	-58, -408, -68, -69, -71, -73, -74, 310, -148, -146,
	453, 406, -13, -17, -18, -14, -16, -19, -15, -23,
	-27, -28, -25, -24, -26, -29, -30, -31, -32, -20,
	-21, -12, 424, 432, -151, -149, -150, -152, 332, 414,
	370, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	456, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	456, -195, -200, -201, -202, -194, -170, -385, -388, 4,
	-383, -386, 134, 180, 247, 21, 22, 23, 24, 25,
	27, 37, 38, 39, 40, 43, 45, 46, 49, 50,
	51, 52, 53, 54, 57, 62, 67, 68, 69, 70,
	71, 77, 74, 75, 76, 79, 81, 82, 83, 86,
	87, 95, 96, 97, 98, 99, 100, 104, 107, 106,
	109, 112, 113, 114, 116, 118, 119, 122, 124, 127,
	125, 376, 378, 126, 128, 129, 130, 140, 141, 142,
	144, 145, 147, 149, 153, 154, 156, 160, 162, 163,
	164, 165, 170, 171, 173, 174, 175, 181, 176, 182,
	186, 189, 188, 190, 191, 192, 183, 197, 201, 202,
	203, 205, 206, 209, 210, 211, 212, 215, 214, 217,
	220, 221, 224, 225, 228, 229, 231, 232, 235, 233,
	236, 234, 237, 240, 238, 239, 242, 243, 245, 244,
	252, 253, 255, 256, 257, 272, 260, 261, 262, 265,
	268, 271, 273, 274, 275, 276, 277, 278, 280, 281,
	283, 285, 287, 289, 290, 291, 292, 293, 294, 296,
	297, 299, 300, 301, 302, 303, 304, 309, 306, 307,
	308, 310, 311, 312, 313, 315, 317, 318, 319, 320,
	322, 324, 345, 346, 358, 325, 326, 327, 328, 329,
	330, 331, 335, 339, 336, 337, 338, 340, 333, 334,
	341, 342, 344, 347, 349, 351, 352, 355, 356, 357,
	359, 362, 363, 364, 360, 361, 354, 369, 367, 368,
	371, 372, 373, 374, 375, 377, 379, 388, 389, 391,
	394, 395, 396, 386, 398, 399, 402, 403, 404, 405,
	410, 406, 408, 411, 412, 413, 419, 418, 425, 426,
	428, 429, 430, 32, 41, 42, 44, 47, 58, 59,
	60, 63, 101, 102, 121, 131, 132, 143, 157, 159,
	166, 167, 168, 187, 193, 195, 199, 218, 250, 251,
	266, 270, 282, 284, 295, 321, 350, 365, 381, 382,
	383, 384, 390, 392, 414, 415, 416, 420, 427, 258,
	-188, 2, -170, -170, 285, 26, 2, 26, 281, 334,
	372, 374, 2, 196, 2, -431, -237, 2, 26, -174,
	-170, 84, 155, 332, -188, 2, -431, -237, 24, 2,
	-170, 2, -175, 2, 325, -170, 456, 79, 225, 62,
	321, 341, -103, 389, -102, 381, 327, -104, -375, 2,
	240, -170, 456, 456, 456, 370, 180, 97, 368, 456,
	2, 370, 275, 418, 333, 407, 97, 292, 180, -426,
	2, 4, -386, -383, -204, -203, 370, 97, -202, -194,
	446, -201, 456, 456, 456, 2, 202, 203, 291, 290,
	341, 342, 456, 456, 456, 2, 25, 56, 78, 81,
	103, 130, 150, 153, 263, -441, 232, 272, 289, 327,
	340, 369, 379, 391, -445, 357, 57, 407, -452, 396,
	112, -281, 97, 374, 372, 225, 154, 403, 317, 158,
	401, 107, 186, 405, 404, 456, 456, 25, 56, 65,
	81, 112, 130, 150, 153, -443, 272, 289, 324, 327,
	340, 369, 379, 396, 391, 2, 418, 333, 370, 180,
	97, 407, 317, 288, -77, 2, 453, 29, 28, 344,
	-144, 370, 2, -170, 202, 203, 2, 456, 456, -426,
	2, 202, 203, 2, 57, 329, 456, 456, 456, 456,
	456, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	456, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	456, 456, 2, -131, 341, 357, 164, 39, 62, 26,
	67, 98, 156, 180, 181, 210, 78, 79, -283, -335,
	-334, 371, 328, 334, 367, 389, 84, 408, 318, 430,
	-434, 125, 4, 97, 240, 343, 381, 225, 38, 71,
	375, 376, -451, 2, 370, -455, 2, 389, 389, 2,
	-455, 2, -455, 2, -173, 2, 389, 385, -456, 389,
	427, 456, 456, 456, 456, 456, 456, 456, 456, 456,
	456, 456, 456, -146, -148, -147, 456, 456, 456, 456,
	456, -131, 341, 2, 62, 26, -459, 148, -232, -233,
	400, 194, 120, 264, -145, -147, 2, -408, -373, 2,
	-309, -389, -311, 444, 445, 439, 246, 431, -322, 103,
	401, 258, -388, -312, -324, 121, 321, -251, 8, 9,
	5, 6, 7, -177, -354, -318, -362, 393, 133, 249,
	-207, 458, 10, 453, -405, -147, -323, 33, 159, 55,
	-377, -206, -356, -364, -360, -361, -461, 45, 51, 50,
	379, 239, 335, 336, 351, 337, 338, 43, 410, 176,
	255, 257, 188, 4, 195, -205, -194, -402, -403, -383,
	-384, 187, 193, 189, 350, 190, 191, 192, 42, 295,
	144, 145, 143, 113, 102, 101, 251, 47, 46, 44,
	415, -365, 99, 381, 382, 383, 384, 205, 206, -170,
	-385, 65, 89, 90, 88, 93, 92, 94, 91, 343,
	407, 56, 32, 166, 167, 199, 250, 168, 63, -404,
	361, 85, 152, 185, 169, 198, 200, 204, 219, 222,
	241, 248, 267, 269, 316, 348, -462, 416, 131, 132,
	270, 282, 365, 390, 392, 157, 218, 58, 59, -410,
	296, -411, -188, -410, 456, 456, 457, 456, -226, -227,
	-228, 2, 26, 110, 453, 2, -338, 2, 451, -342,
	-147, 213, -341, 453, -339, -195, 259, -406, 322, -402,
	-403, -177, -194, -206, 4, -229, 453, 455, 97, 370,
	66, 2, -276, 453, -170, 26, -144, 258, 385, 457,
	-320, 453, 258, 151, 261, -170, 2, 2, 345, 2,
	453, -103, 60, 389, -297, 2, -298, -167, -168, -169,
	-347, 201, 287, 294, 433, 430, -373, -437, 151, 436,
	385, -373, -252, 455, 2, 2, 2, 2, 2, -342,
	166, -195, 2, -192, -376, 4, -383, -386, -384, -387,
	65, -385, 26, 28, 29, 30, 31, 33, 34, 35,
	36, 48, 55, 56, 61, 64, 66, 73, 78, 84,
	88, 89, 91, 90, 92, 93, 94, 103, 105, 108,
	110, 111, 115, 117, 120, 123, 133, 135, 148, 150,
	151, 155, 158, 161, 172, 184, 194, 196, 213, 216,
	223, 226, 227, 246, 249, 254, 258, 259, 263, 264,
	279, 286, 298, 314, 332, 343, 353, 366, 370, 380,
	385, 387, 393, 400, 401, 407, 409, 417, 421, 422,
	423, 424, -388, 2, -342, 166, 2, -197, 166, -342,
	-200, 2, -381, 166, -379, 10, -378, 5, 4, -383,
	-386, -384, 2, -179, -170, 2, -191, -376, 2, -210,
	166, -195, -196, -200, 385, 457, -243, -203, -204, -236,
	-170, 455, -309, 2, -92, 2, -309, 166, 2, -92,
	166, 2, -309, 166, 2, -92, 166, 2, 2, 2,
	391, 2, 81, 166, -170, 370, 96, 2, 308, -442,
	324, 395, 418, 2, 2, 2, 2, 2, 2, 2,
	370, 333, -453, 296, -184, 2, -170, 148, -381, 166,
	2, -381, 166, 2, -198, -200, -198, 180, 197, -179,
	166, 2, 374, 372, 374, 372, 151, 2, 196, 2,
	196, 2, -343, 2, -344, -195, 2, 2, 2, 2,
	2, 166, -170, 370, 96, 2, 212, 2, 2, 2,
	2, 2, 2, 2, 2, 2, -245, 166, 2, -195,
	-245, 166, 2, -245, 166, 2, -282, 2, 73, -179,
	166, 2, -382, 166, 2, -381, -382, 166, 2, -351,
	2, -350, -378, 414, -77, 453, -77, 453, 341, 453,
	-381, -195, -309, -92, 151, -309, -92, 148, 2, 97,
	370, -131, 2, 148, 409, 2, 8, 2, -381, 293,
	140, 2, 345, 2, 62, -283, 430, 151, 2, 2,
	-429, 2, 258, 151, 2, 151, 2, 151, 2, 151,
	2, 151, 2, 290, 342, 203, 388, 211, 126, 151,
	-266, 2, 424, 151, 2, 151, 2, 5, 2, 201,
	287, 358, 2, -195, -446, 2, 370, 418, 333, 2,
	2, 74, 75, 151, 2, 151, 430, 2, -260, -342,
	-296, -297, -296, 385, -175, -459, -232, -233, -131, 345,
	2, 2, -459, -259, -285, -286, 223, 135, 254, -265,
	26, 110, -265, -265, 49, 454, 454, 11, 12, 64,
	37, 444, 445, 446, 447, 146, 448, 449, 442, 443,
	441, 434, 435, 438, 207, 208, 80, 437, 436, 72,
	230, 323, 136, 137, 138, 139, 305, 177, 178, 179,
	14, 15, 16, 30, 263, 222, 431, 169, 348, 439,
	17, 18, 19, 198, 200, 248, 41, 172, -176, -212,
	-309, -309, -309, -309, -309, 269, 453, -257, -304, 451,
	-147, 453, 453, 453, 5, 453, 5, -372, 8, -147,
	-309, -322, 454, -249, 453, -147, -322, -317, 453, 321,
	451, 453, -325, -309, 455, -412, 425, -358, 453, 284,
	-357, 453, -357, -357, 419, -355, 453, 432, 426, 453,
	-355, 453, 453, 148, 453, 453, 453, 453, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 419, 453, 453,
	453, 453, 453, 453, 453, 453, 453, 457, -410, -229,
	453, -253, -345, -309, 446, -253, -253, 258, -246, -309,
	85, -269, 204, 241, 152, 219, 316, 185, -372, -77,
	-306, 458, -333, 432, -147, -339, -194, -147, -341, 453,
	-338, -333, 446, -195, 453, 151, 453, 455, 151, -236,
	-376, -179, -195, -205, -206, 109, -246, -381, -426, -236,
	-174, 34, -319, -352, -353, -366, -354, -363, -359, -362,
	300, 301, 299, 303, 302, 45, 51, 50, 379, 239,
	335, 336, 351, 337, 338, 43, 410, 176, 255, 257,
	188, 4, 44, 415, -365, 195, 187, 193, 189, 350,
	190, 191, 192, 42, 295, 144, 145, 143, 113, 102,
	101, 251, 47, 46, 99, 381, 382, 383, 384, 205,
	206, 416, 361, 58, 59, -426, -236, 148, -375, -246,
	34, -297, 2, -457, 457, 221, -214, 229, 245, 163,
	259, 428, 252, -380, 5, 4, -318, -330, 103, 225,
	-362, 9, 445, -370, 8, 444, -374, -373, 87, 455,
	-376, -156, 306, -155, 23, 27, 114, 412, 127, -219,
	182, 275, 121, 354, -433, -435, 326, 377, 378, 76,
	252, 306, 121, -262, -264, 34, 95, 243, 271, 52,
	174, 234, 235, 356, 420, 121, 306, 424, 121, -435,
	306, -435, -158, 354, -433, -435, 326, 306, -157, -219,
	121, 458, -381, -243, 457, 457, -376, 446, 121, 121,
	121, 121, 2, 2, 246, 2, 2, 2, 153, -445,
	-443, 2, 2, 2, -195, 166, -197, 166, 2, -200,
	418, -231, 258, -428, -244, 370, -195, -166, -407, 424,
	246, 246, 34, 453, 2, -282, 2, 180, -407, 246,
	-343, -208, -195, -208, 344, -188, 34, -306, 121, 2,
	2, 2, -170, -159, 457, 54, 312, 121, -159, 121,
	-159, 121, -211, 166, -210, -159, 121, 457, 121, 121,
	454, 457, -351, -351, -381, -142, 424, 151, 84, 453,
	-382, -428, -179, 2, -195, 2, 370, 205, -381, -381,
	-375, 26, 346, 2, 290, 342, 75, -195, -430, 148,
	-427, 317, -426, -195, -195, -195, -195, -195, 2, 2,
	2, 148, 2, 388, 2, 388, 2, -170, 68, -170,
	-170, 221, -195, 148, 370, 180, 370, -159, 457, -175,
	-459, -259, -375, -459, -286, -285, -288, -309, 26, -291,
	142, 242, -309, -311, -146, -146, -146, -234, -336, -309,
	286, 180, -367, -352, -352, -193, -376, 381, -309, -309,
	-309, -309, -309, -309, -309, -309, -309, -309, -309, -309,
	-309, -309, -309, -309, -309, -309, -309, -309, -309, -309,
	-309, -309, -309, -309, -309, -309, -309, -309, -309, -309,
	-309, -309, -309, 222, 169, 348, 41, 172, -309, 385,
	-309, -309, -309, -309, 238, 246, 249, 393, 133, 402,
	110, 252, -463, 366, 36, -315, -147, -250, 453, -329,
	31, 353, 26, -322, 453, 2, -304, -309, -305, -247,
	-246, -246, 454, 417, 26, 110, 446, 2, 8, -277,
	-279, 429, 237, 100, 165, 236, -278, 331, 454, 457,
	34, 454, -309, -247, -321, -317, -246, -328, -327, 421,
	-376, 446, -413, 141, 158, 8, -372, -372, 381, 381,
	8, -372, -372, 453, 454, 2, 454, 2, 454, 2,
	454, 2, 454, 2, -309, -309, -309, -309, -309, -309,
	-309, -246, -271, 2, -368, -246, 4, 429, 237, 100,
	165, 236, 331, -271, 2, -272, 2, -309, -246, -273,
	-310, -311, 444, 445, 439, -322, -274, 2, -309, -247,
	-309, 48, 216, 387, -275, -309, 151, -246, -246, 2,
	-246, 2, -411, 34, -246, -239, 457, 151, 34, 4,
	-239, -239, 453, 454, 457, -270, 162, 233, 228, -270,
	-338, -269, 204, -267, 267, -267, -267, -424, 453, 452,
	-333, -180, 451, 459, -376, -332, -331, 34, -188, 265,
	-333, -333, 455, 454, -332, -195, 453, -246, -376, 359,
	454, 455, 198, 198, 198, 322, 454, -142, 385, 424,
	-77, 260, 454, 457, -238, 33, 451, -279, 453, -369,
	419, 453, 453, 151, -237, -437, 454, 389, -298, -213,
	294, 352, 307, 339, 368, 9, 8, 8, 457, -376,
	457, -438, 78, 385, 66, -300, 166, 66, -390, -182,
	78, -391, -170, 61, 401, 286, 150, 123, -438, 78,
	-438, 78, 78, 344, 357, 49, -342, 37, -92, 217,
	151, 430, 370, 180, 385, -342, -264, -352, 95, 234,
	235, 49, -371, -370, 445, -371, 49, -371, -371, -371,
	424, -197, -342, 385, 276, -381, 385, 457, 37, -92,
	217, 151, 385, -210, -180, -348, -347, -203, -170, 455,
	-309, -92, -309, -92, 121, 2, -453, 212, 453, -229,
	246, -263, -262, 246, -199, 2, -195, 151, -236, -349,
	196, 457, -244, 276, 121, 121, 453, 118, 292, 2,
	-181, 166, -171, -170, -282, -162, 373, 121, -303, -302,
	422, -292, -92, 453, 103, 34, -292, -254, -255, -346,
	-256, -182, 453, -188, -170, 2, -195, -245, -245, -245,
	-159, 457, 121, -179, -381, -382, -382, -77, -350, 454,
	454, 454, -141, 262, -140, -170, 5, -144, 409, -216,
	-301, -300, -392, -393, -390, 222, 180, 401, 197, 134,
	-142, -347, -142, -348, -348, -195, 148, 2, 2, -236,
	-236, 341, 148, 148, 455, -266, 292, 97, 370, 275,
	180, -195, -210, -195, -342, -459, -289, -370, 453, -290,
	321, 322, 457, -154, 35, 108, 209, -195, 430, 119,
	-309, -309, 385, -463, 366, -315, 119, -309, 238, 249,
	393, 133, 402, 110, 252, 151, 453, -310, -310, 454,
	-248, -309, -309, 452, 461, 454, -460, 457, -232, -309,
	-246, -246, 454, 454, 385, 385, 385, 385, 453, 455,
	-246, -236, 452, 452, 457, 454, -326, -327, 115, -309,
	455, -418, 268, 453, 453, 454, 454, 457, 454, 430,
	430, 454, 454, 454, -309, 34, 457, 457, 457, 454,
	457, 457, 457, 454, 454, 151, 454, 454, -280, 279,
	454, 11, 12, 444, 445, 446, 447, 146, 448, 449,
	442, 443, 441, 434, 435, 436, 72, 230, 323, 14,
	15, 16, 198, 172, -310, -310, -310, 454, -313, -314,
	151, 148, 34, -275, -275, -275, 454, 151, -246, 454,
	454, 453, 454, -303, -345, -241, 2, -338, -190, -376,
	-303, -303, -246, -309, 204, 204, -268, 409, 258, -270,
	-338, -331, 454, -425, -372, -333, -332, -372, -308, -307,
	149, 35, 108, 244, -188, -229, -332, -332, -376, -333,
	454, -242, -340, -406, -460, 455, -376, -132, 5, 249,
	-132, -132, 151, -236, 24, 280, -352, 451, 452, 8,
	8, 453, -372, -372, -236, 151, -373, -297, 399, 70,
	294, 381, -373, -155, 306, -182, -182, -195, 246, -300,
	166, -161, 246, -352, -189, -170, 453, 453, 209, 209,
	409, -182, -189, 166, -182, 166, -189, -189, -432, 294,
	253, -309, 224, 292, 247, -156, 306, -92, -92, 453,
	-437, 409, 109, -195, -210, -199, 306, -205, -371, -371,
	-262, 306, -197, -381, 424, -179, -157, -92, -92, 453,
	-180, -158, 306, -139, 175, 446, -170, 418, -170, -215,
	-216, -170, -447, 426, 424, 121, 121, -229, -209, -195,
	451, -142, -381, -195, -381, -381, -381, 2, 453, 2,
	258, 246, -181, 166, -163, 116, -458, 436, -179, -233,
	-232, -309, -261, -295, 314, 258, -230, -183, -182, 414,
	-188, -261, -240, 457, 151, 436, 455, -230, 2, -159,
	-159, -159, -210, -211, -159, -77, -77, -142, 457, 453,
	436, 436, 453, -381, -381, 454, 457, -195, -181, 180,
	180, -187, -171, -142, -42, 424, 370, 341, 341, -170,
	-191, -179, -195, -192, -210, -290, -309, -336, -195, 458,
	-309, -309, 119, 119, -309, -310, -310, -309, 119, 151,
	453, -309, -319, 30, 30, 454, 457, -305, -309, 454,
	417, -460, -460, -460, 5, 237, 165, 236, -278, 236,
	-278, -278, 8, 446, -376, 454, -317, 117, -309, 380,
	-376, 446, -419, -185, 453, -170, 422, -232, -372, -355,
	-355, 454, -367, -352, -309, -309, -309, -309, -309, -309,
	-313, -309, -367, -352, -310, -310, -310, -310, -310, -310,
	-310, -310, -310, -310, -310, -310, -310, -310, -310, -310,
	-310, -310, -310, 110, 246, 252, -310, -314, -313, -309,
	-309, -352, 454, 454, 454, -246, -77, -258, 158, -348,
	457, -258, -258, 454, -338, -338, 453, -309, 204, 452,
	454, 457, -332, 452, 457, 460, 436, -229, 455, -331,
	454, 457, -294, 34, 454, -376, -92, 261, 5, 8,
	451, 452, 454, -372, 454, 454, -236, -309, 385, 385,
	121, 246, 411, -394, -391, -309, -235, -337, -309, 453,
	453, 2, -153, 114, 344, -439, 2, 121, -159, 121,
	-159, 428, 453, 453, 385, -246, -309, -143, 103, -375,
	-435, -435, 385, 385, 276, -246, 385, -142, 151, 2,
	2, 2, 454, 34, 256, -170, -195, -197, 34, -60,
	424, -347, -372, -166, 2, -195, 121, 258, 246, -164,
	215, -458, -379, -407, -287, -285, -261, -253, 247, 77,
	454, 457, 455, -303, -255, -241, -309, 2, 454, -159,
	-140, -141, -381, -381, -381, -142, -144, -144, -301, 2,
	453, -181, -171, 453, 262, -195, -266, -221, -220, 275,
	252, -221, 259, 454, -154, -180, -309, -309, 119, 30,
	30, -309, -309, -319, 454, -309, -309, -246, 452, 5,
	-309, 454, 454, 454, 454, -309, 455, -420, -170, -309,
	454, 454, 454, 454, 457, 457, 454, 454, 454, 454,
	-314, 151, 110, 252, 453, 454, 454, -316, 161, 49,
	-338, -316, -316, -268, -236, -338, -306, -372, -307, -180,
	451, -376, -340, 453, 455, 452, 2, 451, 454, -182,
	-182, -300, 121, -395, 78, -396, 64, 134, 84, 246,
	249, 401, 286, 61, 103, 298, 34, 454, 454, 457,
	-154, -235, -236, 246, 363, 103, 246, 103, 96, 396,
	-182, -189, -236, -236, -195, 454, 457, 436, -199, -197,
	-381, 454, -180, -382, -217, 183, -92, 2, 453, -229,
	-263, -92, 262, 452, -284, 409, -180, -195, 121, -165,
	214, -458, -379, -162, -261, -293, 453, 258, -92, -183,
	2, -233, 436, 454, 454, 96, 96, -235, 453, 453,
	-236, -43, -44, 180, 78, 278, -192, 370, 180, -154,
	-309, -309, -309, 454, -460, -376, 446, -414, 275, 454,
	-309, -309, -310, 151, 453, -319, -415, 423, -309, -246,
	-415, -415, 454, -333, -372, 2, 451, 2, -300, -189,
	-193, -186, -170, 134, 166, 249, 209, 453, -310, -195,
	453, 2, -449, 105, 184, -299, -450, 83, 364, 173,
	-337, 454, 454, 249, 249, -309, -352, -159, -159, 454,
	454, 385, -375, 82, -373, 385, -218, -219, 172, -448,
	424, -215, -447, -61, -62, 386, -347, 453, -170, 258,
	453, -180, -458, -379, -163, 111, -236, 78, -287, -315,
	-142, 453, 453, 454, -235, -235, 454, 457, 26, 453,
	26, 453, -195, -210, 454, -233, 49, 454, 454, -310,
	-319, 454, -416, -417, -185, -332, 452, 2, -396, -186,
	246, -309, -172, 453, -309, 184, 106, 170, -217, 453,
	298, -178, 64, 453, 453, 453, 436, 151, 453, -447,
	273, 96, 243, 454, 34, -62, 9, -235, -195, -235,
	258, -379, -164, 404, 247, 454, -189, -261, -382, -382,
	-299, 454, 454, -44, -236, -236, -421, 292, 322, 160,
	-246, 454, 457, 34, 121, 454, -397, 231, -170, 454,
	106, 170, -218, -236, -195, -436, 409, -193, -223, -222,
	-220, -225, -224, -220, -246, -373, 82, 273, -246, -195,
	96, -217, -92, 454, -284, 454, -195, -165, 344, -302,
	454, 454, -217, -299, 454, 454, 454, -422, -423, 41,
	398, 87, -309, -422, -422, -417, -419, 134, -398, -401,
	-400, 258, 349, 152, 274, 454, 363, 420, -449, 454,
	-229, -309, 454, 457, 414, 454, 457, 414, 454, 151,
	454, 453, -218, -448, -299, 453, -299, 453, -254, -142,
	-142, -218, -217, -423, 283, 147, 321, 283, 147, -186,
	-400, 258, -401, 258, 404, 107, -397, -222, 172, -224,
	151, 273, -236, -447, -217, -235, -217, -235, -303, -218,
	30, -399, 243, 312, 54, 344, -399, -398, 453, 453,
	454, -218, 454, -218, 454, -423, 22, 249, 103, -449,
	-246, -246, -160, 54, 312, -454, 422, -299, -454, -299,
	454, 454, 2, -217, -217, -218, 385, -218, -218, 453,
	-454, -454, -246, 454, -218,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 25, 26, 350,
	351, 353, 354, 355, 357, 358, 360, 362, 364, 366,
	367, 369, 371, 372, 373, 374, 375, 377, 379, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	425, 427, 0, 867, 869, 871, 873, 0, 28, 29,
	0, 0, 173, 175, 177, 0, 202, 204, 206, 207,
	209, -2, 0, 302, 303, 305, 307, -2, -2, 0,
	0, 414, 416, 0, 0, 436, 437, 0, 957, -2,
	430, 432, 434, 497, 499, 501, 503, 505, 507, 509,
	510, 512, 514, 516, 518, 520, 522, 524, 526, 528,
	530, 532, 534, 536, 538, 540, 542, 544, -2, -2,
	-2, 0, -2, -2, -2, 885, 32, 34, 36, 38,
	40, 42, 60, 258, 259, 261, 263, 265, 268, 269,
	271, 996, 309, 311, 313, 315, 317, 0, -2, 1010,
	0, 0, 44, 45, 46, 47, 48, 49, 50, 67,
	68, 69, 70, 71, 72, 73, 53, 55, 56, 62,
	63, 65, 0, 0, 972, 974, 976, 978, -2, 0,
	0, 7, 9, 11, 13, 15, 17, 19, 21, 23,
	352, 356, 359, 361, 363, 365, 368, 370, 376, 378,
	380, 760, 1600, 1614, 1615, 1616, 1619, 1620, 1621, 1622,
	1623, 1624, 1954, 2036, 2037, 1643, 1644, 1645, 1646, 1647,
	1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657,
	1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667,
	1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677,
	1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687,
	1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697,
	1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
	1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717,
	1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727,
	1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737,
	1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747,
	1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757,
	1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767,
	1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777,
	1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787,
	1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797,
	1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807,
	1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817,
	1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827,
	1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837,
	1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847,
	1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857,
	1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867,
	1868, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877,
	1878, 1879, 1880, 1881, 1882, 1883, 1884, 1885, 1886, 1887,
	1888, 1889, 1890, 1891, 1892, 1893, 1894, 1895, 1896, 1897,
	1898, 1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907,
	1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917,
	1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927,
	1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 0,
	392, 390, 1594, 393, 1789, 395, 397, 296, 297, 298,
	299, 300, 301, 0, 156, 0, 407, 401, 406, 408,
	410, 411, 412, 413, 387, 385, 0, 407, 1646, 405,
	865, 866, 860, 861, 1823, 895, 426, -2, -2, -2,
	1923, -2, 458, -2, 465, 1926, 1825, 468, 0, 470,
	-2, 473, 868, 870, 872, 0, 0, 0, 0, 30,
	31, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, -2, -2, -2, -2, 0, 0, 1681, 1571, 1616,
	1574, 1569, 174, 176, 178, 179, 0, 0, 0, 0,
	0, 0, 203, 205, 208, 210, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 816, 0, 0, 0, 0, 0,
	0, 0, 0, 681, 682, 0, 0, 687, 811, 812,
	835, 0, 0, 0, 0, 304, 306, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 308, 0, 0, 0, -2,
	0, 0, 0, 236, 342, 343, 0, 997, 997, 0,
	0, 0, 154, 147, 0, 0, 670, 415, 417, 0,
	146, 0, 0, 864, 0, 0, 431, 433, 435, 498,
	500, 502, 504, 506, 508, 511, 513, 515, 517, 519,
	521, 523, 525, 527, 529, 531, 533, 535, 537, 539,
	541, 543, 545, 550, 0, 0, 0, 0, -2, -2,
	0, -2, -2, 0, 0, 0, 0, 0, 0, 0,
	0, -2, -2, -2, 0, 0, 0, -2, -2, 0,
	0, 0, 553, 555, 556, 557, 0, 596, 599, 607,
	652, 653, 0, 802, 998, 897, 875, 888, 897, 877,
	878, 879, 880, 881, 886, 887, 890, 0, 882, 883,
	884, 33, 35, 37, 39, 41, 43, 260, 262, 264,
	266, 270, 272, -2, 970, 971, 310, 312, 314, 316,
	318, 418, 0, 420, 0, 554, 961, 0, -2, 0,
	1002, 1002, 1002, 0, 0, 971, 969, 0, 423, 424,
	477, 478, 1234, 0, 0, 0, 0, 0, 1469, 1318,
	0, 479, -2, 1349, 1351, 1902, 1923, 1468, 1353, 1354,
	1355, 1356, 1357, 0, 0, 1360, 0, 1362, 1363, 1364,
	1365, 0, 1367, 0, 1371, 1372, 1373, 0, 1907, 1548,
	1612, -2, 1139, 1140, 1141, 1142, 1143, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1608, 0, 1440, 1387, -2,
	1633, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 1690, -2, -2, -2, -2, -2, -2,
	-2, 1195, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1937, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
	1399, 0, 1891, 1908, 1909, 1914, 1916, 1910, 1899, 1410,
	-2, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,
	1947, 1948, 1949, 1950, 1951, 1952, 1196, -2, 1903, 1904,
	1919, 1920, 1925, 1930, 1931, 1906, 1915, -2, -2, 988,
	1797, 991, 760, 989, 973, 975, 0, 977, 0, 0,
	0, 982, 1005, 1003, 0, 1041, 986, 987, 997, 1058,
	1081, 0, 1063, 0, 1081, 1107, 0, 1068, 1818, 1388,
	1389, 0, 1616, 1613, -2, 0, 0, 0, 0, 0,
	0, 199, 388, 0, 394, 396, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 894, 428, 429, 0, 453,
	0, 457, 1898, -2, -2, 461, 898, 902, 903, 904,
	905, 0, 0, 0, 0, 0, 467, 0, 0, 454,
	455, 471, 474, 0, 546, 547, 548, 549, 51, 0,
	1908, 1107, 52, 0, 1584, 1638, 1639, 1640, 1641, 1642,
	1937, 1953, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962,
	1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972,
	1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982,
	1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
	1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
	2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012,
	2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022,
	2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032,
	2033, 2034, 2035, 54, 0, 1908, 57, 0, 1908, 0,
	-2, 61, 0, 1908, 157, 158, 1629, 1630, 1634, 1635,
	1636, 1637, 64, 0, 1590, 66, 0, 1587, 74, 0,
	1908, 0, 1568, -2, 0, 0, 662, 1565, 1570, 663,
	1575, 0, 180, 181, 182, 183, 184, 1908, 186, 187,
	0, 189, 190, 1908, 192, 193, 0, 195, 211, 212,
	0, 214, 0, 1908, 0, 0, 0, 220, -2, 237,
	0, 234, 0, 224, 225, 227, 228, 229, 230, 231,
	0, 0, 0, 817, 276, 274, 1595, 0, -2, 1908,
	805, 808, 1908, 810, 822, 1598, 0, -2, 0, 995,
	1908, 912, 683, 684, 685, 686, 0, 295, 0, 925,
	0, 927, 0, 947, 1113, 1058, 238, 239, 240, 241,
	242, 1908, 0, 0, 0, 247, 0, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 139, 1908, 321, 340,
	139, 1908, 324, 139, 1908, 327, 0, 330, 833, 139,
	1908, 333, 334, 1908, 336, 159, 337, 1908, 339, 0,
	-2, 381, 1602, -2, 345, 0, 346, 0, -2, 0,
	171, 0, 668, 669, 0, 862, 863, 0, 438, 0,
	0, 551, 552, 0, 0, 562, 563, 564, 565, 1795,
	1705, 568, 0, 571, -2, 0, 0, 0, 575, 577,
	667, 579, 0, 0, 581, 0, 583, 0, 585, 0,
	587, 0, 589, -2, -2, -2, 0, 0, 0, 0,
	615, 616, 0, 0, 621, 0, 624, 625, 626, 0,
	628, 629, 630, 631, 0, 633, 634, -2, -2, 638,
	640, 0, 647, 0, 651, 0, 558, 559, 139, 1111,
	874, -2, 876, 0, 892, 964, -2, 0, 419, 0,
	422, 968, 962, 967, 1019, 1020, 0, 0, 0, 0,
	1000, 1001, 0, 0, 0, 959, 960, 0, 0, 0,
	0, 1474, 1475, 1476, 1477, 1478, 1479, 1482, 1483, 1480,
	1481, 1484, 1485, 0, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1487, 1488, 1489, 0, 0, 1491, 0, 1493, 0, 0,
	0, 0, 0, 0, 1297, 1299, 1556, 0, 0, 1490,
	1239, 1240, 1241, 1276, 1277, 0, 0, 1350, 1553, 1552,
	1352, 0, 1505, 0, 1359, 0, 1231, 1366, 1581, -2,
	0, 1469, 1500, 0, 0, 1374, 1375, 1376, 0, 0,
	1505, 0, 0, 1547, 0, 1442, 0, 1175, 0, 1176,
	1177, 0, 1178, 1179, 1192, 1205, 0, 0, 0, 0,
	1209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1197, 0, 0,
	0, 1528, -2, 0, 0, 0, 0, 0, 990, 0,
	0, 1045, 1557, 1561, 1562, 1045, 1045, 0, 0, 1506,
	1104, 1104, 0, 0, 1100, 1100, 1100, 1098, 1075, 0,
	1081, 0, 1091, 0, 1081, 1081, 0, -2, 1063, 0,
	0, 1091, 1108, 1109, 0, 0, 0, 0, 0, 0,
	1617, 0, 0, 0, 1604, 0, 0, 171, 0, 399,
	409, 997, 0, 1508, 1130, 1124, 1133, 1134, 1135, 1136,
	1182, 1183, 1184, 1185, 1186, 1144, 1145, 1146, 1147, 1148,
	1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158,
	1159, 1160, -2, 1193, 1195, 1216, 1164, 1165, 1166, 1167,
	1168, 1169, 1170, 1171, 1172, 1173, 1174, 1188, 0, 1163,
	1163, 1163, 1180, 1181, 1204, 1215, 1207, 1215, 1211, 1131,
	1132, 1198, 1199, 1200, 1201, 0, 403, 0, 0, 0,
	0, -2, 463, 0, 900, 0, 906, 488, 489, 490,
	908, 909, 0, 466, 491, 492, 493, 494, 495, 496,
	0, 777, 0, 779, 1577, 0, 464, 481, 469, 0,
	475, 75, 857, 105, 0, 857, 857, 0, 0, 126,
	0, 0, 0, 0, 0, 93, 101, 81, 82, 0,
	0, 0, 0, 58, 785, 0, 788, 0, 0, 0,
	0, 0, 0, 0, 800, 0, 0, 0, 0, 92,
	0, 87, 77, 0, 0, 95, 103, 0, 130, 132,
	0, 0, 1094, 661, 0, 0, 1617, 1573, 0, 0,
	0, 0, 213, 215, 0, 217, 218, 219, 0, 816,
	0, 226, 223, 267, 760, 1908, 784, 1908, 782, 1599,
	0, 0, 0, 293, 288, 0, 290, 803, 0, 994,
	0, 0, 0, 0, 823, 1626, 828, 834, 914, 0,
	1119, 0, 928, 0, 0, 1114, 0, 1116, 0, 244,
	245, 246, 0, 319, 0, 137, 138, 0, 322, 0,
	325, 0, 139, 1908, 1563, 331, 0, 0, 0, 0,
	997, 0, 0, 0, 0, 149, 0, 0, 0, 0,
	171, 171, 1094, 440, 1094, 442, 0, 0, 566, 567,
	569, 570, 572, 573, -2, -2, 648, 574, 578, 0,
	655, 1814, 665, 580, 582, 584, 586, 588, 591, 610,
	598, 0, 602, 0, 604, 0, 606, 618, 617, 619,
	622, 627, 632, 0, 0, 0, 0, 801, 0, 891,
	965, 967, 421, 963, 1017, 1018, 1023, 1027, 1028, 1031,
	1034, 1035, 1025, 1234, 983, 984, 985, 1011, 1012, 844,
	0, 2036, 1235, 1125, 1236, 1237, 1583, 0, 1242, 1243,
	1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, -2, -2,
	-2, -2, -2, -2, -2, -2, 1260, 1261, 1262, 1263,
	1264, 1265, 1266, 1267, 1268, 1269, 1270, -2, -2, -2,
	1274, 1275, -2, 1492, 1494, 0, 1556, 0, -2, 0,
	-2, -2, -2, -2, 1294, 0, 1296, 1301, 1303, 1305,
	0, 0, 0, 0, 1555, 1315, 1539, 1540, 0, 0,
	1471, 1472, 1473, 1300, 0, 1319, 1554, 1551, 0, 0,
	1504, 1008, 1378, 0, 0, 0, 0, 1385, 0, 1582,
	1230, 1217, 1218, 1219, 1220, 1221, 1222, 1232, 1370, 1502,
	0, 1501, 0, 0, 0, 1512, 0, 1546, 1542, 0,
	1605, 1611, 1450, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1411, 1412, 1413, 1414, 1415, 1416,
	1417, 1418, 1419, 1420, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1422, 0, 1515, -2, -2, -2, -2,
	-2, -2, -2, 0, 1424, 0, 1426, 1506, 1525, 0,
	0, 1320, 0, 0, 0, 1469, 0, 1429, 1506, 1533,
	0, 0, 0, 0, 0, 1506, 0, 1538, 0, 1436,
	0, 1438, 992, 0, 0, 1119, 0, 0, 0, 1560,
	1119, 1119, 0, 1040, 0, 0, 1101, 1102, 1103, 0,
	0, 1104, 0, 1095, 1099, 1096, 1097, 0, 0, 1081,
	1091, 1055, 0, 0, 1585, 1061, 1090, 0, 760, 1080,
	1091, 1091, 0, -2, 1065, 0, 0, 1008, -2, 172,
	759, 0, 0, 0, 0, 389, 391, 0, 0, 0,
	383, 0, 386, 0, 1120, 1123, 0, 1137, 0, 0,
	-2, 0, 0, 0, 0, 0, 456, 0, 899, 907,
	0, 485, 0, 487, 0, 778, 1579, 1578, 0, 476,
	0, 0, 0, 0, 856, 109, 1908, 0, 141, 0,
	0, 742, 1591, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 786, 787, 789, 795,
	797, 0, 791, 1580, 0, 792, 0, 794, 796, 798,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 1567, 162, 1093, 1566, 1576, 0,
	185, 188, 191, 194, 0, 221, 0, 0, 690, 673,
	0, 780, 783, 0, 760, 815, 1597, 0, 275, 171,
	0, 0, 289, 0, 0, 0, 0, 0, 0, 821,
	0, 1908, 1586, 1625, 1626, 916, 922, 0, 1010, 1118,
	0, 945, 930, 0, 0, 0, 945, 949, 950, 952,
	953, 0, 0, 1115, 0, 248, 341, 139, 139, 139,
	328, 0, 0, 139, 160, 335, 338, 344, 382, 997,
	997, 171, 169, 1776, 167, 164, 166, 0, 0, 0,
	691, 693, 694, 695, 696, 0, 1626, 0, 1735, 1626,
	144, 171, 287, 439, 444, 560, 0, 593, 612, 666,
	664, 601, 0, 0, 0, 614, 0, 0, 0, 0,
	0, 649, 650, 654, 1112, 966, 0, 1029, 0, 1026,
	1032, 1033, 0, 1014, 842, 843, 0, 0, 0, 0,
	-2, -2, 0, 0, 0, 1316, 0, -2, 1295, 1298,
	1302, 1304, 1306, 0, 0, 0, 0, 0, 0, 1495,
	0, 1497, 1317, 1549, 1552, 1467, 0, 0, 1007, 1008,
	1008, 1008, 1384, 0, 0, 0, 0, 0, 0, 0,
	1503, 0, 1510, 1511, 0, 1377, 0, 1543, 0, 0,
	0, 1386, 0, 0, 0, 1187, 1161, 0, 1215, 1213,
	1214, 1208, 1215, 1212, 0, 0, 0, 0, 0, 1405,
	0, 0, 0, 1409, 1421, 0, 1423, 1425, 0, 0,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1323, 1324, 1325, 1428, 1531, 1532,
	0, 0, 0, 0, 0, 0, 1434, 0, 1537, 1435,
	1437, 997, 1042, 1037, 1558, 1094, 1044, 1046, 1559, 1588,
	1037, 1037, 0, 1507, 0, 0, 1085, 0, 0, 0,
	1087, 0, 1076, 0, 1078, 1091, 1060, 0, 0, 1053,
	0, 1050, 1051, 1052, 760, 1089, 1062, 1066, 1605, 0,
	1110, 0, 1070, 1073, 0, 0, 1618, 196, 200, 201,
	197, 198, 0, 398, 0, 0, 1509, 0, 1126, 0,
	0, 0, 0, 0, 402, 0, 452, -2, 483, 484,
	486, 0, 482, 106, 857, 0, 0, 848, 0, 111,
	1908, 120, 0, 719, 0, 1589, 0, 0, 0, 0,
	0, 859, 0, 1908, 139, 1908, 139, 122, 125, 0,
	129, 127, 0, 0, 710, 76, 857, 79, 85, 0,
	0, 0, 91, 0, 0, 850, 0, 790, 793, 799,
	59, 0, 852, 846, 0, 845, 131, 80, 86, 0,
	854, 78, 0, 171, 0, 1572, 0, 0, 0, 0,
	689, -2, 0, 0, 0, 0, 0, 0, 281, 277,
	0, 286, 292, 291, 806, -2, 809, 818, 0, 820,
	0, 0, 0, 1908, 918, 922, 0, 921, 995, 1022,
	1009, 1117, 923, 945, 0, 0, 0, 933, 935, 932,
	929, 926, 1119, 0, 0, 0, 0, 0, 243, 320,
	323, 326, 1564, 139, 332, 347, 348, 148, 0, 0,
	0, 0, 0, 171, 0, 0, 0, 0, 0, 1626,
	1626, 0, 1593, 145, 441, 0, 0, 603, 605, 618,
	641, 642, 705, 0, 705, 0, 0, 1013, 844, 0,
	1238, 1279, 0, 0, -2, 0, 0, 1283, 0, 0,
	0, -2, 0, 0, 0, 1496, 1498, 0, 1551, 1379,
	0, 0, 0, 0, 1361, 1223, 1224, 1225, 1226, 1227,
	1228, 1229, 0, 1368, 1369, 1470, 1513, 1541, 1545, 0,
	1606, 1610, 1448, 1449, 1453, 1596, 0, 0, 0, 1206,
	1210, 1390, 0, 0, 0, 0, 0, 0, 0, 1514,
	1524, 1526, 1321, 1322, 1326, 1327, 1328, 1329, 1330, 1331,
	1332, 1333, 1334, 1335, -2, -2, -2, 1339, 1340, 1341,
	-2, -2, -2, 0, 0, 0, 1527, 1529, 1530, 1534,
	1535, 0, 1431, 1432, 1433, 1536, 0, 1039, 0, 1043,
	0, 1039, 1039, 1004, 1083, 0, 0, 1106, 0, 1058,
	1077, 0, 1067, 1056, 0, 1057, 0, 1088, 0, 1064,
	1069, 0, 1072, 0, 1379, -2, 155, 400, 384, 0,
	0, 1128, 1138, 0, 1190, 1194, 404, 1092, 0, 0,
	0, 0, 140, 717, 741, 0, 0, 837, 844, 0,
	0, 747, 113, 0, 0, 0, 121, 0, 118, 0,
	124, 128, 0, 0, 0, 0, 88, 89, 90, 0,
	94, 96, 0, 0, 0, 0, 0, 142, 0, 216,
	814, 222, 699, 0, 674, 0, 760, 784, 0, 273,
	0, 280, 0, 804, 819, 832, 0, 0, 0, 920,
	922, 0, 913, 914, 945, 1021, 924, 943, -2, 942,
	0, 0, 0, 1010, 951, 948, 954, 955, 0, 329,
	168, 0, 163, 165, 0, 151, 0, 0, 692, 697,
	0, 0, 0, 0, 0, 561, 613, 643, 704, 0,
	0, 645, 1024, 1030, 1015, 844, 1281, 1285, 0, 0,
	0, 1287, -2, 0, 1309, -2, -2, 1499, 1550, 1358,
	1008, 1380, 1382, 1383, 1233, 1544, 0, 1455, 1452, 0,
	1439, 1162, 1400, 1401, 0, 0, 1404, 1406, 1407, 1408,
	1523, 0, 0, 0, 0, 1430, 993, 1444, 0, 0,
	1047, 1444, 1444, 1084, 0, 1086, 1081, 1079, 1054, 1048,
	0, 1606, 1071, 0, 0, 1121, 1127, 0, 1189, 107,
	108, 110, 0, 718, 0, 721, 0, 0, 0, 0,
	728, 729, 0, 0, 0, 0, 0, 748, 758, 0,
	839, 0, 0, 0, 115, 134, 0, 0, 858, 0,
	139, 139, 0, 0, 849, 0, 0, 0, 851, 853,
	847, 0, 855, 161, 707, 0, 678, 675, 690, 673,
	781, 813, 0, 278, 0, 0, 0, 0, 0, 910,
	922, 0, 915, 916, 294, 0, 0, 0, 931, 934,
	936, 1022, 0, 170, 171, 0, 0, 0, 0, 0,
	0, 443, 445, 0, 0, 451, 703, 0, 0, 1016,
	1289, -2, -2, 1310, 0, 1607, 1609, 1010, 0, 1441,
	0, 0, -2, 0, 0, 0, 979, 0, 1038, 1036,
	980, 981, 1105, 1091, 0, 1074, 0, 1129, 112, 0,
	722, 723, 1592, 725, 0, 727, 730, 0, 732, 1628,
	0, 736, 743, 749, 0, 699, 0, 754, 755, 756,
	838, 745, 0, 114, 116, 133, 841, 117, 123, 0,
	0, 0, 0, 1675, 98, 0, 673, 706, 0, 676,
	0, 0, 0, 279, 282, 0, 285, 0, 831, 0,
	0, 0, 0, 917, 918, 0, 0, 0, 945, 956,
	150, 0, 0, 758, 0, 0, 740, 0, 447, 0,
	449, 0, 644, 646, 1381, 1459, 0, 1402, 1403, -2,
	0, 1347, 1443, 1445, 0, 1059, 1049, 1122, 720, 724,
	0, 0, 764, 0, 0, 0, 752, 753, 707, 0,
	0, 136, 0, 0, 0, 0, 0, 0, 0, 671,
	0, 679, 0, 699, 0, 283, 284, 0, 832, 0,
	0, 919, 920, 0, 938, 939, 941, 946, 0, 0,
	699, 758, 739, 446, 0, 0, 0, 0, 0, 0,
	1454, 1348, 0, 0, 0, 731, 769, 0, 0, 0,
	750, 751, 748, 0, 760, 119, 0, 840, 0, 711,
	0, 0, 714, 0, 0, 99, 1675, 97, 0, 0,
	680, 707, 678, 758, 0, 758, 0, 911, 0, 940,
	171, 171, 707, 699, 448, 450, 1451, 1456, 1460, -2,
	1872, 1678, 0, 1457, 1458, 1446, 1447, 0, 733, 765,
	766, 0, 761, 762, 763, 1627, 734, 735, 744, 757,
	764, 135, 708, 0, 0, 709, 0, 0, 102, 0,
	104, 0, 673, 677, 699, 0, 699, 0, 1119, 152,
	153, 737, 707, 0, 1462, 1463, 1464, 1465, 1466, 726,
	767, 0, 768, 0, 0, 0, 769, 712, 0, 715,
	0, 100, 0, 672, 707, 0, 707, 0, 937, 738,
	0, 770, 0, 773, 774, 0, 771, 748, 0, 0,
	702, 829, 758, 829, 758, 1461, 772, 775, 776, 746,
	0, 0, 698, 700, 701, 824, 0, 699, 826, 699,
	707, 0, 830, 707, 707, 713, 0, 829, 829, 0,
	825, 827, 0, 707, 716,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 442, 3, 448, 443, 3,
	453, 454, 446, 444, 457, 445, 455, 447, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 461, 3,
	434, 436, 435, 438, 458, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 451, 3, 452, 449, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 459, 441, 460, 439,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 437, 57777, 440, 57778, 450, 57779, 456,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1057
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1062
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1066
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1067
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1068
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1069
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1070
		{
			return helpWith(sqllex, "GRANT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1071
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1072
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1073
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1074
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 27:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1079
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 30:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1088
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1089
		{
			return helpWith(sqllex, "ALTER")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1092
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1093
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1094
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1095
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1096
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1097
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 51:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1148
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1149
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1160
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1175
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1179
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1184
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1196
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 64:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1208
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1227
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 74:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1257
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1261
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1266
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1273
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1277
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1283
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1290
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1300
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1308
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1315
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1323
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1330
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1338
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1343
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1347
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1352
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1358
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1366
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1375
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1387
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1395
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1406
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1410
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1414
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 100:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1424
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1429
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1436
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1440
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1446
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1450
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 107:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1457
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1462
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1467
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1472
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1477
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1482
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1487
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1492
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1497
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1501
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 117:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1504
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1513
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1525
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1535
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1542
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1545
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1552
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1561
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1570
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1575
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1582
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1590
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1591
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1613
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 134:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1617
		{
			sqlVAL.union.val = nil
		}
	case 135:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1623
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1627
		{
			sqlVAL.union.val = nil
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1634
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1638
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1642
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1648
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 141:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1652
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 142:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1678
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1681
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 144:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1704
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1708
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1711
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1715
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 148:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1752
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1757
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1761
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1767
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1772
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 153:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1777
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1781
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 155:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1797
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1800
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1804
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1808
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1816
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1820
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1826
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 162:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1830
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 163:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1836
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1840
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1844
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1848
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1854
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1858
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 169:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1864
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 170:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1868
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 171:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1872
		{
			sqlVAL.union.val = nil
		}
	case 172:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1878
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1891
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1892
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1893
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1894
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1904
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1912
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1914
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1917
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 184:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1927
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1936
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1944
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1946
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1950
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1953
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1963
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1972
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1980
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1982
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 194:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1986
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1989
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1993
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 197:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1997
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CommentOnTable{Table: name, Comment: sqlDollar[6].union.strPtr()}
		}
	case 198:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2002
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2017
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2023
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2028
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2040
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2041
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2043
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2044
		{
		}
	case 210:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2045
		{
			return helpWith(sqllex, "CREATE")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2048
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2049
		{
			return unimplemented(sqllex, "create cast")
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2050
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2051
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2052
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2053
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2054
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2055
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 219:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2056
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2057
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2058
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2059
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 223:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2060
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2061
		{
			return unimplemented(sqllex, "create operator")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2062
		{
			return unimplemented(sqllex, "create publication")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2063
		{
			return unimplemented(sqllex, "create rule")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2064
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2065
		{
			return unimplemented(sqllex, "create server")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2066
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2067
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2068
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2071
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2072
		{
		}
	case 234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2075
		{
		}
	case 235:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2076
		{
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2079
		{
		}
	case 237:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2080
		{
		}
	case 238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2083
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2084
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2085
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2086
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2087
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2088
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2089
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 245:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2090
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2091
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2092
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2093
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2094
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2095
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2096
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2097
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2098
		{
			return unimplemented(sqllex, "drop server")
		}
	case 254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2099
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2100
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2101
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2102
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2106
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2107
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2108
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 266:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2109
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2111
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2112
		{
		}
	case 270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2113
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2114
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2124
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2132
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2136
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2140
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 277:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2146
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2151
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2160
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2167
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 281:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2173
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 282:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2179
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2183
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2194
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().Value)
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2206
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 286:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2214
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 287:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2222
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 288:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2232
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2236
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2242
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2246
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2253
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2257
		{

			sqlVAL.union.val = nil
		}
	case 294:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:2271
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2281
		{
			return helpWith(sqllex, "DELETE")
		}
	case 296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2288
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2291
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2292
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2293
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2294
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2295
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 304:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2304
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2305
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2306
		{
		}
	case 308:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2307
		{
			return helpWith(sqllex, "DROP")
		}
	case 310:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2310
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2311
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2312
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2313
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2314
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2322
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 320:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2326
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2329
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 322:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2337
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 323:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2341
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2344
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2352
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2356
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2359
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 328:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2367
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[4].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[5].union.dropBehavior(),
			}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2375
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[6].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[7].union.dropBehavior(),
			}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2382
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2390
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 332:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2398
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2405
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2413
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 335:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2417
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2420
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2428
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 338:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2432
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2435
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2439
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2444
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 342:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2467
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2470
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2472
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2476
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2480
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2484
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2488
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2495
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2499
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2502
		{
			return helpWith(sqllex, "DELETE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2504
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2505
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2506
		{
			return helpWith(sqllex, "INSERT")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2507
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2509
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 370:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2510
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2513
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2518
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2519
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2520
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 381:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2524
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2528
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2538
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 384:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2546
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2554
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 386:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2558
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 387:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2562
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 388:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 389:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2579
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 390:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2587
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2591
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 392:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2595
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2605
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 394:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2609
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2613
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 396:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2617
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2620
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 398:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2640
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2644
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2648
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2651
		{
			return helpWith(sqllex, "GRANT")
		}
	case 402:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2671
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 403:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2675
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 404:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2679
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2682
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2687
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 407:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2691
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2701
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2705
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 415:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2719
		{
			return helpWith(sqllex, "RESET")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2720
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2728
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2732
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2735
		{
			return helpWith(sqllex, "RESET")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2743
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2746
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2757
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2760
		{
			return helpWith(sqllex, "USE")
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2764
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2765
		{
		}
	case 428:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2766
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2767
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 431:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2771
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 433:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2772
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2773
		{
			return helpWith(sqllex, "USE")
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2789
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2804
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2807
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 441:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2825
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2834
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 443:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2838
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2842
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2848
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2852
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 447:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2858
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 448:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2862
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2866
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2870
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2874
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2885
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2888
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2898
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2914
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2918
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 459:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2923
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2940
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2943
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2945
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 463:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2948
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 464:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2952
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 466:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2971
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 467:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2978
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 469:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2984
		{
			return unimplemented(sqllex, "set from current")
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2985
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2993
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2998
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3005
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3009
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 475:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3015
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3019
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3026
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3047
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3051
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3057
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3061
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3065
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3069
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3073
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3079
		{
			sqlVAL.union.val = tree.Low
		}
	case 489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3083
		{
			sqlVAL.union.val = tree.Normal
		}
	case 490:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3087
		{
			sqlVAL.union.val = tree.High
		}
	case 491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3098
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 492:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3102
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3106
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 495:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3111
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3115
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3128
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3129
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3130
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 504:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3131
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3132
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 508:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3133
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3135
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3136
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3137
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3138
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3139
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3140
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 523:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3141
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3142
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 527:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3143
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 529:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3144
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3145
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3146
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3147
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3148
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3149
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3150
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3151
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3153
		{
			return helpWith(sqllex, "SHOW")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3157
		{

			return purposelyUnimplemented(sqllex, "reindex table", "CockroachDB does not require reindexing.")
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3162
		{

			return purposelyUnimplemented(sqllex, "reindex index", "CockroachDB does not require reindexing.")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3167
		{

			return purposelyUnimplemented(sqllex, "reindex database", "CockroachDB does not require reindexing.")
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3172
		{

			return purposelyUnimplemented(sqllex, "reindex system", "CockroachDB does not require reindexing.")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3182
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3183
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 552:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3184
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3195
		{
			sqlVAL.str = "client_encoding"
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3198
		{
			sqlVAL.str = "timezone"
		}
	case 559:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3199
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3213
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3218
		{

			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3223
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3234
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3242
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3250
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3257
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3265
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 568:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3272
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3282
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 570:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3286
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3289
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3291
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3294
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3302
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 575:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3306
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3314
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3317
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3330
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3338
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 580:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3346
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3350
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 582:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3352
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3358
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3362
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3370
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3374
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3376
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3380
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3388
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3391
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 592:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3393
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 593:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3396
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3400
		{
			sqlVAL.union.val = true
		}
	case 595:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3402
		{
			sqlVAL.union.val = true
		}
	case 596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3404
		{
			sqlVAL.union.val = false
		}
	case 597:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3412
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: sqlDollar[2].union.bool()}
		}
	case 598:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3415
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3418
		{
			sqlVAL.union.val = true
		}
	case 600:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3419
		{
			sqlVAL.union.val = false
		}
	case 601:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3428
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3431
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3433
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3436
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 605:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3438
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3442
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 607:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3445
		{
			sqlVAL.union.val = true
		}
	case 608:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3446
		{
			sqlVAL.union.val = false
		}
	case 609:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3454
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3457
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3459
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3462
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3470
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3480
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 615:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3490
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3493
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 617:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3496
		{
			sqlVAL.union.val = true
		}
	case 618:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3497
		{
			sqlVAL.union.val = false
		}
	case 619:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3504
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3508
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3511
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3518
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3522
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3525
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3532
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 626:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3536
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3544
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3549
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3554
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3558
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 631:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3566
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3571
		{

			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3576
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3589
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3592
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3600
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3603
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3607
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 642:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3611
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 643:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3615
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 644:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3623
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3631
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3638
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3645
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 648:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3649
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3660
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3665
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableIndexName()}
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3668
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3676
		{

			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3684
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 656:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3689
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3809
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 658:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3813
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3817
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3856
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 661:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3860
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3865
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3869
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3878
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3885
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 667:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3889
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3901
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3910
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3913
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 671:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3949
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 672:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:3962
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3976
		{
		}
	case 674:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3977
		{
		}
	case 675:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3978
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 676:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3982
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:3994
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4007
		{
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4008
		{
		}
	case 680:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4009
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 681:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4023
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4024
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4025
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4026
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 685:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4027
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4028
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 687:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4029
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 688:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4030
		{
		}
	case 690:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4035
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 691:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4041
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4045
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 693:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4051
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 696:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4057
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 697:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4060
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 698:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4064
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4073
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 700:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4080
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4085
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 702:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4090
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 703:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4096
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 705:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4103
		{
			sqlVAL.str = ""
		}
	case 707:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4110
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 708:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4116
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 709:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4123
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4130
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 711:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4136
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 712:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4140
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 713:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4146
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4156
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4160
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 716:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4166
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4177
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4187
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4191
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4197
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4201
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4205
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 723:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4209
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4213
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4217
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4221
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4239
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4243
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4247
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 730:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4251
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 731:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4255
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4259
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4263
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 734:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4273
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 735:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4277
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4281
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 737:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4288
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 738:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4298
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 739:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4310
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4320
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4332
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4337
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 743:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4343
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 744:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4349
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4360
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 746:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4370
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4381
		{
			return unimplementedWithIssueDetail(sqllex, 46657, "add constraint exclude using")
		}
	case 748:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4386
		{
		}
	case 749:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4387
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 750:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4388
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 751:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4389
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 752:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4390
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4391
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 757:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4409
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 758:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4413
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 759:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4419
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4423
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4443
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 762:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4447
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 763:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4451
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 764:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4455
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 765:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4464
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4468
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4472
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4476
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4480
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4486
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 771:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4492
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 772:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4500
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 773:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4504
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 774:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4508
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 775:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4512
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 776:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4516
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 777:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4522
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4526
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 779:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4532
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4551
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4556
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4560
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 784:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4564
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 785:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4567
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4568
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4571
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 788:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4572
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4574
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4575
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4576
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 792:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4579
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4581
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4583
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4585
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4586
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4588
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 798:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4589
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4591
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4593
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4601
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4604
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4612
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4616
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4619
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 806:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4623
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 807:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4627
		{
			sqlVAL.union.val = nil
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4637
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4641
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 810:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4644
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4649
		{
		}
	case 812:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4650
		{
		}
	case 813:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4658
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4666
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 815:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4667
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 816:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4670
		{
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4671
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 818:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4677
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 819:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4679
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 820:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4681
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 821:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4683
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4685
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4687
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:4703
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[10].union.idxElems(),
				Storing:     sqlDollar[12].union.nameList(),
				Interleave:  sqlDollar[13].union.interleave(),
				PartitionBy: sqlDollar[14].union.partitionBy(),
				Inverted:    sqlDollar[8].union.bool(),
			}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:4717
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[13].union.idxElems(),
				Storing:     sqlDollar[15].union.nameList(),
				Interleave:  sqlDollar[16].union.interleave(),
				PartitionBy: sqlDollar[17].union.partitionBy(),
				Inverted:    sqlDollar[11].union.bool(),
			}
		}
	case 826:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:4732
		{
			table := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[6].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[10].union.idxElems(),
				Storing:     sqlDollar[12].union.nameList(),
				Interleave:  sqlDollar[13].union.interleave(),
				PartitionBy: sqlDollar[14].union.partitionBy(),
			}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:4746
		{
			table := sqlDollar[11].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[9].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[13].union.idxElems(),
				Storing:     sqlDollar[15].union.nameList(),
				Interleave:  sqlDollar[16].union.interleave(),
				PartitionBy: sqlDollar[17].union.partitionBy(),
			}
		}
	case 828:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4760
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4763
		{
		}
	case 830:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4764
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4768
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 832:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4783
		{
			sqlVAL.union.val = false
		}
	case 833:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4789
		{

			return purposelyUnimplemented(
				sqllex,
				"concurrently",
				"CockroachDB performs this operation concurrently - CONCURRENTLY is not required.",
			)
		}
	case 834:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4798
		{
			sqlVAL.union.val = false
		}
	case 835:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4804
		{
			sqlVAL.union.val = true
		}
	case 836:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4808
		{
			sqlVAL.union.val = false
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4814
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4818
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4827
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4838
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 841:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4839
		{
			sqlVAL.str = ""
		}
	case 842:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4843
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 843:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4847
		{
			sqlVAL.union.val = tree.Descending
		}
	case 844:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4851
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 845:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4857
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 846:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4864
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 847:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4868
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4874
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4880
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4888
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 851:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4894
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 852:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4902
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 853:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4908
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			newName := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4916
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 855:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4920
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4925
		{
		}
	case 857:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4926
		{
		}
	case 858:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4929
		{
		}
	case 859:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4930
		{
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4938
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4941
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 862:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4951
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4960
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4963
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4971
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4974
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4978
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4979
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 872:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4980
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4996
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4999
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5001
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 877:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5004
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 878:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5014
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 879:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5017
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 880:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5019
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 881:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5022
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 882:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5026
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 883:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5031
		{
		}
	case 884:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5032
		{
		}
	case 885:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5033
		{
		}
	case 886:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5041
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 887:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5048
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5051
		{
		}
	case 889:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5052
		{
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5056
		{
			sqlVAL.str = ""
		}
	case 891:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5060
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5064
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 893:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5068
		{
			sqlVAL.str = ""
		}
	case 894:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5074
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 895:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5078
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 896:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5084
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5088
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5094
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 899:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5098
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 900:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5111
		{
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5113
		{
		}
	case 902:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5117
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5122
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 904:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5126
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5130
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5136
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 907:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5142
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5148
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 909:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5152
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 910:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5162
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 911:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5172
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 912:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5182
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5186
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 914:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5190
		{
			sqlVAL.str = ""
		}
	case 915:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5196
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 916:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5200
		{
			sqlVAL.str = ""
		}
	case 917:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5206
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 918:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5210
		{
			sqlVAL.str = ""
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5216
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 920:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5220
		{
			sqlVAL.str = ""
		}
	case 921:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5225
		{
		}
	case 922:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5226
		{
		}
	case 923:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5238
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 924:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5245
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 925:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5252
		{
			return helpWith(sqllex, "INSERT")
		}
	case 926:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5263
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 927:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5270
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 928:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5274
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 929:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5283
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 930:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5290
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5294
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5298
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 933:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5304
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5308
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 936:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5328
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 937:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5332
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 938:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5336
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5342
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 940:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5345
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 941:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5346
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 942:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5348
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5354
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 944:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5359
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 945:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5363
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 946:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5380
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5391
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5395
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 949:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5396
		{
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5400
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5404
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 954:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5417
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5420
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 956:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5424
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5467
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5473
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 960:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5477
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 961:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5492
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 962:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5496
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 963:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5500
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 964:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5504
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5508
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5512
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5517
		{
		}
	case 968:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5518
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 969:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5523
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5558
		{
			return helpWith(sqllex, "SELECT")
		}
	case 975:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5559
		{
			return helpWith(sqllex, "VALUES")
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5560
		{
			return helpWith(sqllex, "TABLE")
		}
	case 979:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5582
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5595
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5609
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5621
		{
			return helpWith(sqllex, "SELECT")
		}
	case 983:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5625
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5634
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5643
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 986:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5658
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5665
		{
			return helpWith(sqllex, "TABLE")
		}
	case 988:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5677
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 989:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5681
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 990:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5685
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5689
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 992:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5693
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 993:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5699
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5707
		{
		}
	case 995:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5708
		{
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5712
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 997:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5716
		{
			sqlVAL.union.val = nil
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5721
		{
		}
	case 999:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5722
		{
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5726
		{
			sqlVAL.union.val = true
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5730
		{
			sqlVAL.union.val = false
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5734
		{
			sqlVAL.union.val = false
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5740
		{
			sqlVAL.union.val = true
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5746
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5751
		{
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5752
		{
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5755
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5756
		{
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5760
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5764
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5770
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5776
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5780
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5786
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5790
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5795
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5810
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5819
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5830
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5834
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5843
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5849
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5856
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5863
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5872
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5876
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5880
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5886
		{
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5887
		{
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5890
		{
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5891
		{
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5908
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5912
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5918
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5922
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5941
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5944
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5946
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5958
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5961
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5963
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5969
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1047:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5973
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5979
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5983
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5988
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5993
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5999
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6005
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6010
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6021
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6025
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6029
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6037
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6067
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6081
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6091
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6098
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6100
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6104
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6108
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6112
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6128
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6134
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6138
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6144
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6150
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6156
		{
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6158
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6161
		{
			sqlVAL.union.val = nil
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6162
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6163
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6167
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6171
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6177
		{
			sqlVAL.union.val = true
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6181
		{
			sqlVAL.union.val = false
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6201
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6205
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6209
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6213
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6217
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6221
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6227
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6231
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6238
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6244
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6251
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6257
		{
			sqlVAL.str = tree.AstFull
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6261
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6265
		{
			sqlVAL.str = tree.AstRight
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6269
		{
			sqlVAL.str = tree.AstInner
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6275
		{
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6276
		{
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6297
		{
			sqlVAL.str = tree.AstHash
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6301
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6305
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6309
		{
			sqlVAL.str = ""
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6322
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6326
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6331
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6332
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6333
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6334
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6338
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6343
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6357
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6361
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6367
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6375
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6385
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6392
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6404
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6417
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6425
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6426
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6434
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6440
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6447
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6448
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6450
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6458
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6459
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6470
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6471
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6488
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6492
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6496
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6500
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6504
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6508
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedSerialType
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6516
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6520
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6524
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6528
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6532
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6536
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6540
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6544
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6548
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6552
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6556
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6587
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6591
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6595
		{
			sqlVAL.union.val = nil
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6602
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6606
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6610
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6614
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6618
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6622
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6626
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6630
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6634
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6638
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6642
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6646
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6650
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6654
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6661
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6668
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6675
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6679
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6686
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6690
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6694
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6698
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6702
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6708
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6721
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6727
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6733
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6741
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6745
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6749
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6755
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6768
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6774
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6778
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6782
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6786
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6795
		{
			sqlVAL.union.val = true
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6796
		{
			sqlVAL.union.val = false
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6801
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6805
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = coltypes.Time
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6810
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = &coltypes.TTime{PrecisionSet: true, Precision: int(prec)}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6817
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6818
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6820
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = coltypes.TimestampWithTZ
			} else {
				sqlVAL.union.val = coltypes.Timestamp
			}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6828
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
			} else {
				sqlVAL.union.val = &coltypes.TTimestamp{PrecisionSet: true, Precision: int(prec)}
			}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6840
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6844
		{
			prec := sqlDollar[3].union.int64()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = &coltypes.TTimestampTZ{PrecisionSet: true, Precision: int(prec)}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6853
		{
			sqlVAL.union.val = true
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6854
		{
			sqlVAL.union.val = false
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6855
		{
			sqlVAL.union.val = false
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6859
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6865
		{
			sqlVAL.union.val = tree.Year
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6869
		{
			sqlVAL.union.val = tree.Month
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6873
		{
			sqlVAL.union.val = tree.Day
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6877
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6881
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6885
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6891
		{
			sqlVAL.union.val = tree.Month
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6895
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6899
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6903
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6907
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6911
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6915
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6922
		{
			sqlVAL.union.val = nil
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6928
		{
			sqlVAL.union.val = tree.Second
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6931
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6955
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6959
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6963
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6966
		{
			return unimplementedWithIssue(sqllex, 32005)
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6975
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6980
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6992
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6996
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7000
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7004
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7008
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7012
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7016
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7020
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7024
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7028
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7032
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7036
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7040
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7044
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7048
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7052
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7056
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7060
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7064
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7068
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7072
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7076
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7080
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7084
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7088
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7092
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7096
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7100
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7104
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7108
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7112
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7116
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7120
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7124
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7128
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7132
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7136
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7140
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7144
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7148
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7152
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7156
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7160
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7164
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7168
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7172
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7176
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7180
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7184
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7188
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7192
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7196
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7200
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7204
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7208
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7212
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7216
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7219
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7221
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7225
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7229
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7233
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7237
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7241
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7245
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7249
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7253
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7257
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7261
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7265
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7269
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7273
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7277
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7281
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7285
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7302
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7307
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7335
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7339
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7343
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7347
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7351
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7355
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7359
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7363
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7367
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7371
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7375
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7379
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7383
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7387
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7391
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7395
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7399
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7403
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7407
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7411
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7415
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7419
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7423
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7427
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7441
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7449
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7485
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7489
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7493
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7497
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7501
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7506
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7508
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7512
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7515
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7517
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7521
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7529
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7533
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7542
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7557
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7562
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7566
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7570
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7574
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7578
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7581
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7589
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7592
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7593
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7595
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7599
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7603
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7606
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7617
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7624
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7634
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7638
		{
			return unimplementedWithIssue(sqllex, 32563)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7640
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7644
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7650
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7654
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7658
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7662
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7668
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7672
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7676
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7680
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7684
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7688
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:7692
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7696
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7700
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7704
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7708
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7712
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7716
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7723
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7726
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7728
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7731
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7733
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7736
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7738
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7741
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7743
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7746
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7748
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7751
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7753
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7756
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7758
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7761
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7763
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7767
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7770
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7771
		{
			return unimplemented(sqllex, "treat")
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7773
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7777
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7781
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7785
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7789
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7792
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7794
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7797
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7802
		{
			return unimplemented(sqllex, "within group")
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7803
		{
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7807
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7811
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7818
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7822
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7832
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7838
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7846
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7850
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7854
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7861
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7881
		{
			sqlVAL.str = ""
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7887
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7891
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7902
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7909
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7916
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7923
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7929
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7942
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7970
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7982
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7989
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8005
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8009
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8016
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8028
		{
			sqlVAL.union.val = tree.Any
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8032
		{
			sqlVAL.union.val = tree.Some
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8036
		{
			sqlVAL.union.val = tree.All
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8041
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8042
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8043
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = tree.Div
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8045
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8046
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8047
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8048
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8049
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8051
		{
			sqlVAL.union.val = tree.LT
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8052
		{
			sqlVAL.union.val = tree.GT
		}
	case 1486:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8053
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8054
		{
			sqlVAL.union.val = tree.LE
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8055
		{
			sqlVAL.union.val = tree.GE
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8056
		{
			sqlVAL.union.val = tree.NE
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8060
		{
			sqlVAL.union.val = tree.Like
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8061
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8062
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8063
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8086
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8090
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8096
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8100
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8104
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8115
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8119
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8125
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8129
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8136
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8152
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8172
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8176
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8182
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8186
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8208
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8212
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8216
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8222
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8229
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8233
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8250
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8254
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8258
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8262
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8266
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8272
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8278
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8284
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8288
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8292
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8298
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8310
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8317
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8321
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8327
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8333
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8337
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8344
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8350
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8354
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8361
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8367
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8371
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8376
		{
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8377
		{
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8381
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8385
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8391
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8400
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8404
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8408
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8416
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8420
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8430
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8449
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8457
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8480
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8489
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8493
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8497
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8501
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8507
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8511
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8519
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8523
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8534
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8543
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8551
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1603:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8648
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8655
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8659
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8663
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:8677
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8681
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8685
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8698
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8716
		{
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8728
		{
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8734
		{
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str})
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8758
		{
			sqlVAL.str = ""
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8764
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8768
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}

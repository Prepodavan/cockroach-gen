// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p sql -o sql.go.tmp sql-gen.y. DO NOT EDIT.

//line sql-gen.y:24
package parser

import (
	"fmt"
	__yyfmt__ "fmt"
	"go/constant"
	"strings"

	"github.com/cockroachdb/cockroach/pkg/sql/lex"
	"github.com/cockroachdb/cockroach/pkg/sql/privilege"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/cockroach/pkg/sql/types"
	"github.com/cockroachdb/errors"
)

//line sql-gen.y:24

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*lexer).Unimplemented(feature)
	return 1
}

func purposelyUnimplemented(sqllex sqlLexer, feature string, reason string) int {
	sqllex.(*lexer).PurposelyUnimplemented(feature, reason)
	return 1
}

func setErr(sqllex sqlLexer, err error) int {
	sqllex.(*lexer).setErr(err)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*lexer).UnimplementedWithIssue(issue)
	return 1
}

func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*lexer).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:69

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) placeholder() *tree.Placeholder {
	return u.val.(*tree.Placeholder)
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableIndexName() *tree.TableIndexName {
	tn := u.val.(tree.TableIndexName)
	return &tn
}
func (u *sqlSymUnion) tableIndexName() tree.TableIndexName {
	return u.val.(tree.TableIndexName)
}
func (u *sqlSymUnion) newTableIndexNames() tree.TableIndexNames {
	return u.val.(tree.TableIndexNames)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) unresolvedObjectName() *tree.UnresolvedObjectName {
	return u.val.(*tree.UnresolvedObjectName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() *types.T {
	if colType, ok := u.val.(*types.T); ok && colType != nil {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) colTypes() []*types.T {
	return u.val.([]*types.T)
}
func (u *sqlSymUnion) int32() int32 {
	return u.val.(int32)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() tree.From {
	return u.val.(tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) forLocked() tree.ForLocked {
	return u.val.(tree.ForLocked)
}
func (u *sqlSymUnion) lockingStrength() tree.LockingStrength {
	return u.val.(tree.LockingStrength)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) windowFrameExclusion() tree.WindowFrameExclusion {
	return u.val.(tree.WindowFrameExclusion)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) compositeKeyMatchMethod() tree.CompositeKeyMatchMethod {
	return u.val.(tree.CompositeKeyMatchMethod)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}
func (u *sqlSymUnion) createStatsOptions() *tree.CreateStatsOptions {
	return u.val.(*tree.CreateStatsOptions)
}
func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func (u *sqlSymUnion) partitionedBackup() tree.PartitionedBackup {
	return u.val.(tree.PartitionedBackup)
}
func (u *sqlSymUnion) partitionedBackups() []tree.PartitionedBackup {
	return u.val.([]tree.PartitionedBackup)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:599
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const AND_AND = lex.AND_AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const AUTHORIZATION = lex.AUTHORIZATION
const AUTOMATIC = lex.AUTOMATIC
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const COMPLETE = lex.COMPLETE
const CONCAT = lex.CONCAT
const CONCURRENTLY = lex.CONCURRENTLY
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXCLUDE = lex.EXCLUDE
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPIRATION = lex.EXPIRATION
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HASH = lex.HASH
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const IGNORE_FOREIGN_KEYS = lex.IGNORE_FOREIGN_KEYS
const ILIKE = lex.ILIKE
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const IN = lex.IN
const INCLUDE = lex.INCLUDE
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISERROR = lex.ISERROR
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOCKED = lex.LOCKED
const LOOKUP = lex.LOOKUP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MERGE = lex.MERGE
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NOWAIT = lex.NOWAIT
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPT = lex.OPT
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OTHERS = lex.OTHERS
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PARTITIONS = lex.PARTITIONS
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLAN = lex.PLAN
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REINDEX = lex.REINDEX
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHARE = lex.SHARE
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SKIP = lex.SKIP
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIES = lex.TIES
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const THROTTLING = lex.THROTTLING
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UNSPLIT = lex.UNSPLIT
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"AND_AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"AUTHORIZATION",
	"AUTOMATIC",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"COMPLETE",
	"CONCAT",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXCLUDE",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPIRATION",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HASH",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IF",
	"IFERROR",
	"IFNULL",
	"IGNORE_FOREIGN_KEYS",
	"ILIKE",
	"IMMEDIATE",
	"IMPORT",
	"IN",
	"INCLUDE",
	"INCREMENT",
	"INCREMENTAL",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISERROR",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCKED",
	"LOOKUP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MERGE",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NOWAIT",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPT",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OTHERS",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PARTITIONS",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLAN",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REINDEX",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIES",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"THROTTLING",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UNSPLIT",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"'~'",
	"CONTAINED_BY",
	"'?'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"'@'",
	"','",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9783

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 25,
	-2, 1074,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 70,
	184, 904,
	201, 904,
	216, 250,
	296, 250,
	304, 743,
	332, 250,
	341, 743,
	380, 743,
	404, 250,
	428, 743,
	-2, 0,
	-1, 76,
	216, 254,
	-2, 0,
	-1, 77,
	110, 1074,
	190, 1074,
	414, 1074,
	415, 1074,
	-2, 0,
	-1, 89,
	123, 1048,
	139, 1048,
	198, 1048,
	227, 1048,
	260, 1048,
	270, 1048,
	409, 1048,
	-2, 1026,
	-1, 120,
	129, 661,
	215, 661,
	298, 641,
	350, 641,
	397, 661,
	-2, 0,
	-1, 121,
	4, 1076,
	21, 1076,
	22, 1076,
	23, 1076,
	24, 1076,
	25, 1076,
	27, 1076,
	33, 1076,
	38, 1076,
	39, 1076,
	40, 1076,
	41, 1076,
	42, 1076,
	43, 1076,
	44, 1076,
	45, 1076,
	46, 1076,
	47, 1076,
	48, 1076,
	49, 1076,
	51, 1076,
	52, 1076,
	53, 1076,
	54, 1076,
	55, 1076,
	56, 1076,
	59, 1076,
	60, 1076,
	61, 1076,
	62, 1076,
	64, 1076,
	65, 1076,
	69, 1076,
	70, 1076,
	71, 1076,
	72, 1076,
	73, 1076,
	74, 1076,
	77, 1076,
	78, 1076,
	79, 1076,
	80, 1076,
	82, 1076,
	84, 1076,
	85, 1076,
	86, 1076,
	89, 1076,
	90, 1076,
	98, 1076,
	99, 1076,
	100, 1076,
	101, 1076,
	102, 1076,
	103, 1076,
	104, 1076,
	105, 1076,
	107, 1076,
	109, 1076,
	110, 1076,
	112, 1076,
	115, 1076,
	116, 1076,
	117, 1076,
	119, 1076,
	121, 1076,
	122, 1076,
	124, 1076,
	125, 1076,
	126, 1076,
	127, 1076,
	128, 1076,
	129, 1076,
	130, 1076,
	131, 1076,
	132, 1076,
	133, 1076,
	134, 1076,
	135, 1076,
	136, 1076,
	138, 1076,
	144, 1076,
	145, 1076,
	146, 1076,
	147, 1076,
	148, 1076,
	149, 1076,
	151, 1076,
	153, 1076,
	157, 1076,
	158, 1076,
	160, 1076,
	161, 1076,
	163, 1076,
	164, 1076,
	166, 1076,
	167, 1076,
	168, 1076,
	169, 1076,
	170, 1076,
	171, 1076,
	172, 1076,
	173, 1076,
	175, 1076,
	176, 1076,
	178, 1076,
	179, 1076,
	180, 1076,
	181, 1076,
	184, 1076,
	185, 1076,
	186, 1076,
	187, 1076,
	190, 1076,
	191, 1076,
	192, 1076,
	193, 1076,
	194, 1076,
	195, 1076,
	196, 1076,
	197, 1076,
	199, 1076,
	201, 1076,
	203, 1076,
	205, 1076,
	206, 1076,
	207, 1076,
	209, 1076,
	210, 1076,
	213, 1076,
	214, 1076,
	215, 1076,
	216, 1076,
	218, 1076,
	219, 1076,
	221, 1076,
	222, 1076,
	224, 1076,
	225, 1076,
	228, 1076,
	229, 1076,
	232, 1076,
	233, 1076,
	234, 1076,
	236, 1076,
	237, 1076,
	238, 1076,
	239, 1076,
	240, 1076,
	241, 1076,
	242, 1076,
	243, 1076,
	244, 1076,
	245, 1076,
	247, 1076,
	248, 1076,
	249, 1076,
	250, 1076,
	252, 1076,
	254, 1076,
	256, 1076,
	257, 1076,
	258, 1076,
	259, 1076,
	261, 1076,
	262, 1076,
	263, 1076,
	265, 1076,
	266, 1076,
	267, 1076,
	268, 1076,
	271, 1076,
	272, 1076,
	273, 1076,
	275, 1076,
	277, 1076,
	278, 1076,
	279, 1076,
	280, 1076,
	281, 1076,
	282, 1076,
	283, 1076,
	284, 1076,
	285, 1076,
	286, 1076,
	288, 1076,
	289, 1076,
	290, 1076,
	291, 1076,
	292, 1076,
	293, 1076,
	295, 1076,
	297, 1076,
	298, 1076,
	299, 1076,
	300, 1076,
	301, 1076,
	302, 1076,
	303, 1076,
	304, 1076,
	305, 1076,
	307, 1076,
	308, 1076,
	309, 1076,
	310, 1076,
	311, 1076,
	312, 1076,
	314, 1076,
	315, 1076,
	316, 1076,
	317, 1076,
	318, 1076,
	319, 1076,
	320, 1076,
	321, 1076,
	323, 1076,
	325, 1076,
	326, 1076,
	327, 1076,
	328, 1076,
	329, 1076,
	330, 1076,
	332, 1076,
	333, 1076,
	334, 1076,
	335, 1076,
	336, 1076,
	337, 1076,
	338, 1076,
	339, 1076,
	341, 1076,
	342, 1076,
	343, 1076,
	344, 1076,
	345, 1076,
	346, 1076,
	347, 1076,
	348, 1076,
	349, 1076,
	350, 1076,
	352, 1076,
	353, 1076,
	354, 1076,
	355, 1076,
	356, 1076,
	358, 1076,
	359, 1076,
	360, 1076,
	361, 1076,
	362, 1076,
	364, 1076,
	365, 1076,
	366, 1076,
	367, 1076,
	368, 1076,
	369, 1076,
	370, 1076,
	371, 1076,
	372, 1076,
	373, 1076,
	374, 1076,
	375, 1076,
	377, 1076,
	378, 1076,
	379, 1076,
	381, 1076,
	382, 1076,
	383, 1076,
	384, 1076,
	385, 1076,
	386, 1076,
	387, 1076,
	389, 1076,
	390, 1076,
	391, 1076,
	392, 1076,
	393, 1076,
	395, 1076,
	397, 1076,
	398, 1076,
	399, 1076,
	400, 1076,
	401, 1076,
	403, 1076,
	404, 1076,
	405, 1076,
	407, 1076,
	408, 1076,
	411, 1076,
	412, 1076,
	413, 1076,
	414, 1076,
	415, 1076,
	416, 1076,
	418, 1076,
	420, 1076,
	421, 1076,
	422, 1076,
	423, 1076,
	424, 1076,
	425, 1076,
	426, 1076,
	428, 1076,
	429, 1076,
	430, 1076,
	435, 1076,
	436, 1076,
	437, 1076,
	438, 1076,
	439, 1076,
	440, 1076,
	-2, 0,
	-1, 122,
	1, 957,
	205, 957,
	295, 957,
	302, 957,
	443, 957,
	466, 957,
	-2, 0,
	-1, 124,
	1, 957,
	466, 957,
	-2, 0,
	-1, 125,
	1, 957,
	466, 957,
	-2, 0,
	-1, 126,
	1, 961,
	466, 961,
	-2, 0,
	-1, 151,
	123, 1047,
	139, 1047,
	198, 1047,
	227, 1047,
	260, 1047,
	270, 1047,
	409, 1047,
	-2, 1035,
	-1, 184,
	4, 1083,
	5, 1083,
	6, 1083,
	7, 1083,
	8, 1083,
	9, 1083,
	10, 1083,
	21, 1083,
	22, 1083,
	23, 1083,
	24, 1083,
	25, 1083,
	27, 1083,
	33, 1083,
	34, 1083,
	38, 1083,
	39, 1083,
	40, 1083,
	41, 1083,
	42, 1083,
	43, 1083,
	44, 1083,
	45, 1083,
	46, 1083,
	47, 1083,
	48, 1083,
	49, 1083,
	51, 1083,
	52, 1083,
	53, 1083,
	54, 1083,
	55, 1083,
	56, 1083,
	57, 1083,
	58, 1083,
	59, 1083,
	60, 1083,
	61, 1083,
	62, 1083,
	64, 1083,
	65, 1083,
	67, 1083,
	69, 1083,
	70, 1083,
	71, 1083,
	72, 1083,
	73, 1083,
	74, 1083,
	77, 1083,
	78, 1083,
	79, 1083,
	80, 1083,
	82, 1083,
	84, 1083,
	85, 1083,
	86, 1083,
	88, 1083,
	89, 1083,
	90, 1083,
	91, 1083,
	92, 1083,
	93, 1083,
	94, 1083,
	95, 1083,
	96, 1083,
	97, 1083,
	98, 1083,
	99, 1083,
	100, 1083,
	101, 1083,
	102, 1083,
	103, 1083,
	104, 1083,
	105, 1083,
	106, 1083,
	107, 1083,
	109, 1083,
	110, 1083,
	112, 1083,
	115, 1083,
	116, 1083,
	117, 1083,
	119, 1083,
	121, 1083,
	122, 1083,
	124, 1083,
	125, 1083,
	126, 1083,
	127, 1083,
	128, 1083,
	129, 1083,
	130, 1083,
	131, 1083,
	132, 1083,
	133, 1083,
	134, 1083,
	135, 1083,
	136, 1083,
	137, 1083,
	138, 1083,
	144, 1083,
	145, 1083,
	146, 1083,
	147, 1083,
	148, 1083,
	149, 1083,
	151, 1083,
	153, 1083,
	156, 1083,
	157, 1083,
	158, 1083,
	160, 1083,
	161, 1083,
	163, 1083,
	164, 1083,
	166, 1083,
	167, 1083,
	168, 1083,
	169, 1083,
	170, 1083,
	171, 1083,
	172, 1083,
	173, 1083,
	174, 1083,
	175, 1083,
	176, 1083,
	178, 1083,
	179, 1083,
	180, 1083,
	181, 1083,
	184, 1083,
	185, 1083,
	186, 1083,
	187, 1083,
	189, 1083,
	190, 1083,
	191, 1083,
	192, 1083,
	193, 1083,
	194, 1083,
	195, 1083,
	196, 1083,
	197, 1083,
	199, 1083,
	201, 1083,
	202, 1083,
	203, 1083,
	204, 1083,
	205, 1083,
	206, 1083,
	207, 1083,
	208, 1083,
	209, 1083,
	210, 1083,
	213, 1083,
	214, 1083,
	215, 1083,
	216, 1083,
	218, 1083,
	219, 1083,
	221, 1083,
	222, 1083,
	223, 1083,
	224, 1083,
	225, 1083,
	226, 1083,
	228, 1083,
	229, 1083,
	232, 1083,
	233, 1083,
	234, 1083,
	236, 1083,
	237, 1083,
	238, 1083,
	239, 1083,
	240, 1083,
	241, 1083,
	242, 1083,
	243, 1083,
	244, 1083,
	245, 1083,
	246, 1083,
	247, 1083,
	248, 1083,
	249, 1083,
	250, 1083,
	251, 1083,
	252, 1083,
	253, 1083,
	254, 1083,
	255, 1083,
	256, 1083,
	257, 1083,
	258, 1083,
	259, 1083,
	261, 1083,
	262, 1083,
	263, 1083,
	266, 1083,
	267, 1083,
	268, 1083,
	271, 1083,
	272, 1083,
	273, 1083,
	274, 1083,
	275, 1083,
	276, 1083,
	277, 1083,
	278, 1083,
	279, 1083,
	280, 1083,
	281, 1083,
	282, 1083,
	283, 1083,
	284, 1083,
	285, 1083,
	286, 1083,
	288, 1083,
	289, 1083,
	290, 1083,
	291, 1083,
	292, 1083,
	293, 1083,
	295, 1083,
	297, 1083,
	298, 1083,
	299, 1083,
	300, 1083,
	301, 1083,
	302, 1083,
	303, 1083,
	304, 1083,
	305, 1083,
	307, 1083,
	308, 1083,
	309, 1083,
	310, 1083,
	311, 1083,
	312, 1083,
	314, 1083,
	315, 1083,
	316, 1083,
	317, 1083,
	318, 1083,
	319, 1083,
	320, 1083,
	321, 1083,
	323, 1083,
	324, 1083,
	325, 1083,
	326, 1083,
	327, 1083,
	328, 1083,
	329, 1083,
	330, 1083,
	332, 1083,
	333, 1083,
	334, 1083,
	335, 1083,
	336, 1083,
	337, 1083,
	338, 1083,
	339, 1083,
	341, 1083,
	342, 1083,
	343, 1083,
	344, 1083,
	345, 1083,
	346, 1083,
	347, 1083,
	348, 1083,
	349, 1083,
	350, 1083,
	351, 1083,
	352, 1083,
	353, 1083,
	354, 1083,
	355, 1083,
	356, 1083,
	357, 1083,
	358, 1083,
	359, 1083,
	360, 1083,
	361, 1083,
	362, 1083,
	364, 1083,
	365, 1083,
	366, 1083,
	367, 1083,
	368, 1083,
	369, 1083,
	370, 1083,
	371, 1083,
	372, 1083,
	373, 1083,
	374, 1083,
	375, 1083,
	377, 1083,
	378, 1083,
	379, 1083,
	381, 1083,
	382, 1083,
	383, 1083,
	384, 1083,
	385, 1083,
	386, 1083,
	387, 1083,
	389, 1083,
	390, 1083,
	391, 1083,
	392, 1083,
	393, 1083,
	395, 1083,
	397, 1083,
	398, 1083,
	399, 1083,
	400, 1083,
	401, 1083,
	402, 1083,
	403, 1083,
	404, 1083,
	405, 1083,
	407, 1083,
	408, 1083,
	410, 1083,
	411, 1083,
	412, 1083,
	413, 1083,
	414, 1083,
	415, 1083,
	416, 1083,
	417, 1083,
	418, 1083,
	420, 1083,
	421, 1083,
	422, 1083,
	423, 1083,
	424, 1083,
	425, 1083,
	426, 1083,
	428, 1083,
	429, 1083,
	430, 1083,
	435, 1083,
	436, 1083,
	437, 1083,
	438, 1083,
	439, 1083,
	440, 1083,
	441, 1083,
	447, 1083,
	454, 1083,
	455, 1083,
	456, 1083,
	463, 1083,
	467, 1083,
	-2, 0,
	-1, 562,
	155, 1764,
	394, 1764,
	446, 1764,
	465, 1764,
	-2, 0,
	-1, 563,
	155, 1843,
	394, 1843,
	446, 1843,
	465, 1843,
	-2, 0,
	-1, 564,
	155, 1753,
	394, 1753,
	446, 1753,
	465, 1753,
	-2, 0,
	-1, 566,
	155, 1935,
	394, 1935,
	446, 1935,
	465, 1935,
	-2, 0,
	-1, 568,
	155, 1965,
	394, 1965,
	446, 1965,
	465, 1965,
	-2, 0,
	-1, 575,
	155, 1854,
	394, 1854,
	446, 1854,
	465, 1854,
	-2, 507,
	-1, 596,
	465, 1711,
	468, 1711,
	-2, 712,
	-1, 597,
	465, 1713,
	468, 1713,
	-2, 713,
	-1, 598,
	465, 1712,
	468, 1712,
	-2, 714,
	-1, 599,
	468, 1651,
	-2, 715,
	-1, 684,
	4, 902,
	21, 902,
	22, 902,
	23, 902,
	24, 902,
	25, 902,
	27, 902,
	33, 902,
	38, 902,
	39, 902,
	40, 902,
	41, 902,
	42, 902,
	43, 902,
	44, 902,
	45, 902,
	46, 902,
	47, 902,
	48, 902,
	49, 902,
	51, 902,
	52, 902,
	53, 902,
	54, 902,
	55, 902,
	56, 902,
	59, 902,
	60, 902,
	61, 902,
	62, 902,
	64, 902,
	65, 902,
	69, 902,
	70, 902,
	71, 902,
	72, 902,
	73, 902,
	74, 902,
	77, 902,
	78, 902,
	79, 902,
	80, 902,
	82, 902,
	84, 902,
	85, 902,
	86, 902,
	89, 902,
	90, 902,
	98, 902,
	99, 902,
	100, 902,
	101, 902,
	102, 902,
	103, 902,
	104, 902,
	105, 902,
	107, 902,
	109, 902,
	110, 902,
	112, 902,
	115, 902,
	116, 902,
	117, 902,
	119, 902,
	121, 902,
	122, 902,
	124, 902,
	125, 902,
	126, 902,
	127, 902,
	128, 902,
	129, 902,
	130, 902,
	131, 902,
	132, 902,
	133, 902,
	134, 902,
	135, 902,
	136, 902,
	138, 902,
	144, 902,
	145, 902,
	146, 902,
	147, 902,
	148, 902,
	149, 902,
	151, 902,
	153, 902,
	157, 902,
	158, 902,
	160, 902,
	161, 902,
	163, 902,
	164, 902,
	166, 902,
	167, 902,
	168, 902,
	169, 902,
	170, 902,
	171, 902,
	172, 902,
	173, 902,
	175, 902,
	176, 902,
	178, 902,
	179, 902,
	180, 902,
	181, 902,
	184, 902,
	185, 902,
	186, 902,
	187, 902,
	190, 902,
	191, 902,
	192, 902,
	193, 902,
	194, 902,
	195, 902,
	196, 902,
	197, 902,
	199, 902,
	201, 902,
	203, 902,
	205, 902,
	206, 902,
	207, 902,
	209, 902,
	210, 902,
	213, 902,
	214, 902,
	215, 902,
	216, 902,
	218, 902,
	219, 902,
	221, 902,
	222, 902,
	224, 902,
	225, 902,
	228, 902,
	229, 902,
	232, 902,
	233, 902,
	234, 902,
	236, 902,
	237, 902,
	238, 902,
	239, 902,
	240, 902,
	241, 902,
	242, 902,
	243, 902,
	244, 902,
	245, 902,
	247, 902,
	248, 902,
	249, 902,
	250, 902,
	252, 902,
	254, 902,
	256, 902,
	257, 902,
	258, 902,
	259, 902,
	261, 902,
	262, 902,
	263, 902,
	266, 902,
	267, 902,
	268, 902,
	271, 902,
	272, 902,
	273, 902,
	275, 902,
	277, 902,
	278, 902,
	279, 902,
	280, 902,
	281, 902,
	282, 902,
	283, 902,
	284, 902,
	285, 902,
	286, 902,
	288, 902,
	289, 902,
	290, 902,
	291, 902,
	292, 902,
	293, 902,
	295, 902,
	297, 902,
	298, 902,
	299, 902,
	300, 902,
	301, 902,
	302, 902,
	303, 902,
	304, 902,
	305, 902,
	307, 902,
	308, 902,
	309, 902,
	310, 902,
	311, 902,
	312, 902,
	314, 902,
	315, 902,
	316, 902,
	317, 902,
	318, 902,
	319, 902,
	320, 902,
	321, 902,
	323, 902,
	325, 902,
	326, 902,
	327, 902,
	328, 902,
	329, 902,
	330, 902,
	332, 902,
	333, 902,
	334, 902,
	335, 902,
	336, 902,
	337, 902,
	338, 902,
	339, 902,
	341, 902,
	342, 902,
	343, 902,
	344, 902,
	345, 902,
	346, 902,
	347, 902,
	348, 902,
	349, 902,
	350, 902,
	352, 902,
	353, 902,
	354, 902,
	355, 902,
	356, 902,
	358, 902,
	359, 902,
	360, 902,
	361, 902,
	362, 902,
	364, 902,
	365, 902,
	366, 902,
	367, 902,
	368, 902,
	369, 902,
	370, 902,
	371, 902,
	372, 902,
	373, 902,
	374, 902,
	375, 902,
	377, 902,
	378, 902,
	379, 902,
	381, 902,
	382, 902,
	383, 902,
	384, 902,
	385, 902,
	386, 902,
	387, 902,
	389, 902,
	390, 902,
	391, 902,
	392, 902,
	393, 902,
	395, 902,
	397, 902,
	398, 902,
	399, 902,
	400, 902,
	401, 902,
	403, 902,
	404, 902,
	405, 902,
	407, 902,
	408, 902,
	411, 902,
	412, 902,
	413, 902,
	414, 902,
	415, 902,
	416, 902,
	418, 902,
	420, 902,
	421, 902,
	422, 902,
	423, 902,
	424, 902,
	425, 902,
	426, 902,
	428, 902,
	429, 902,
	430, 902,
	435, 902,
	436, 902,
	437, 902,
	438, 902,
	439, 902,
	440, 902,
	-2, 0,
	-1, 747,
	298, 642,
	350, 642,
	-2, 0,
	-1, 748,
	298, 641,
	350, 641,
	-2, 592,
	-1, 751,
	1, 671,
	462, 671,
	464, 671,
	466, 671,
	-2, 0,
	-1, 752,
	1, 711,
	152, 711,
	462, 711,
	464, 711,
	466, 711,
	-2, 0,
	-1, 760,
	1, 645,
	462, 645,
	464, 645,
	466, 645,
	-2, 0,
	-1, 763,
	1, 671,
	462, 671,
	464, 671,
	466, 671,
	-2, 0,
	-1, 764,
	1, 673,
	462, 673,
	464, 673,
	466, 673,
	-2, 0,
	-1, 765,
	1, 676,
	462, 676,
	464, 676,
	466, 676,
	-2, 0,
	-1, 769,
	1, 690,
	462, 690,
	464, 690,
	466, 690,
	-2, 0,
	-1, 770,
	1, 692,
	462, 692,
	464, 692,
	466, 692,
	-2, 0,
	-1, 814,
	139, 1085,
	227, 1085,
	260, 1085,
	-2, 1035,
	-1, 830,
	139, 1084,
	227, 1084,
	260, 1084,
	-2, 1035,
	-1, 854,
	465, 1710,
	-2, 515,
	-1, 883,
	463, 1702,
	-2, 1693,
	-1, 889,
	5, 1220,
	-2, 1744,
	-1, 890,
	5, 1221,
	-2, 1748,
	-1, 891,
	5, 1222,
	-2, 1747,
	-1, 892,
	5, 1223,
	-2, 1962,
	-1, 893,
	5, 1224,
	-2, 1856,
	-1, 894,
	5, 1225,
	-2, 1927,
	-1, 895,
	5, 1226,
	-2, 1929,
	-1, 896,
	5, 1227,
	-2, 1942,
	-1, 897,
	5, 1228,
	-2, 1930,
	-1, 898,
	5, 1229,
	-2, 1931,
	-1, 899,
	5, 1230,
	-2, 1743,
	-1, 900,
	5, 1231,
	-2, 1978,
	-1, 901,
	5, 1232,
	-2, 1818,
	-1, 902,
	5, 1233,
	-2, 1865,
	-1, 903,
	5, 1234,
	-2, 1867,
	-1, 904,
	5, 1235,
	-2, 1822,
	-1, 905,
	5, 1236,
	463, 1720,
	-2, 1711,
	-1, 906,
	5, 1292,
	463, 1292,
	-2, 2013,
	-1, 911,
	463, 1721,
	-2, 1712,
	-1, 913,
	5, 1240,
	-2, 2011,
	-1, 914,
	5, 1241,
	-2, 2012,
	-1, 915,
	5, 1242,
	-2, 1821,
	-1, 916,
	5, 1243,
	-2, 2024,
	-1, 917,
	5, 1244,
	-2, 1823,
	-1, 918,
	5, 1245,
	-2, 1824,
	-1, 919,
	5, 1246,
	-2, 1825,
	-1, 920,
	5, 1247,
	-2, 1993,
	-1, 921,
	5, 1248,
	-2, 2022,
	-1, 922,
	5, 1249,
	-2, 1800,
	-1, 923,
	5, 1250,
	-2, 1801,
	-1, 924,
	5, 1264,
	-2, 2005,
	-1, 926,
	5, 1239,
	-2, 2001,
	-1, 927,
	5, 1239,
	-2, 2000,
	-1, 928,
	5, 1239,
	-2, 2017,
	-1, 929,
	5, 1256,
	-2, 1995,
	-1, 930,
	5, 1257,
	-2, 1745,
	-1, 931,
	5, 1267,
	-2, 1994,
	-1, 932,
	5, 1269,
	-2, 2033,
	-1, 934,
	5, 1280,
	-2, 1774,
	-1, 935,
	5, 1291,
	-2, 2026,
	-1, 936,
	5, 1283,
	-2, 2027,
	-1, 937,
	5, 1291,
	-2, 2028,
	-1, 938,
	5, 1287,
	-2, 2029,
	-1, 939,
	5, 1206,
	-2, 1831,
	-1, 940,
	5, 1207,
	-2, 1832,
	-1, 941,
	465, 1708,
	-2, 1692,
	-1, 942,
	463, 2053,
	-2, 1709,
	-1, 962,
	5, 1275,
	-2, 1953,
	-1, 979,
	5, 1274,
	-2, 2034,
	-1, 989,
	5, 1276,
	429, 1276,
	-2, 1996,
	-1, 990,
	5, 1277,
	429, 1277,
	-2, 1997,
	-1, 1026,
	463, 1720,
	-2, 1711,
	-1, 1053,
	155, 1965,
	394, 1965,
	446, 1965,
	465, 1965,
	-2, 0,
	-1, 1056,
	1, 493,
	466, 493,
	-2, 969,
	-1, 1181,
	314, 1689,
	456, 1689,
	-2, 1688,
	-1, 1204,
	467, 1689,
	-2, 1690,
	-1, 1239,
	304, 743,
	428, 743,
	-2, 249,
	-1, 1259,
	284, 1072,
	-2, 875,
	-1, 1268,
	4, 902,
	21, 902,
	22, 902,
	23, 902,
	24, 902,
	25, 902,
	27, 902,
	33, 902,
	38, 902,
	39, 902,
	40, 902,
	41, 902,
	42, 902,
	43, 902,
	44, 902,
	45, 902,
	46, 902,
	47, 902,
	48, 902,
	49, 902,
	51, 902,
	52, 902,
	53, 902,
	54, 902,
	55, 902,
	56, 902,
	59, 902,
	60, 902,
	61, 902,
	62, 902,
	64, 902,
	65, 902,
	69, 902,
	70, 902,
	71, 902,
	72, 902,
	73, 902,
	74, 902,
	77, 902,
	78, 902,
	79, 902,
	80, 902,
	82, 902,
	84, 902,
	85, 902,
	86, 902,
	89, 902,
	90, 902,
	98, 902,
	99, 902,
	100, 902,
	101, 902,
	102, 902,
	103, 902,
	104, 902,
	105, 902,
	107, 902,
	109, 902,
	110, 902,
	112, 902,
	115, 902,
	116, 902,
	117, 902,
	119, 902,
	121, 902,
	122, 902,
	124, 902,
	125, 902,
	126, 902,
	127, 902,
	128, 902,
	129, 902,
	130, 902,
	131, 902,
	132, 902,
	133, 902,
	134, 902,
	135, 902,
	136, 902,
	144, 902,
	145, 902,
	146, 902,
	147, 902,
	148, 902,
	149, 902,
	151, 902,
	153, 902,
	157, 902,
	158, 902,
	160, 902,
	161, 902,
	163, 902,
	164, 902,
	166, 902,
	167, 902,
	168, 902,
	169, 902,
	170, 902,
	171, 902,
	172, 902,
	173, 902,
	175, 902,
	176, 902,
	178, 902,
	179, 902,
	180, 902,
	181, 902,
	185, 902,
	186, 902,
	187, 902,
	190, 902,
	191, 902,
	192, 902,
	193, 902,
	194, 902,
	195, 902,
	196, 902,
	197, 902,
	199, 902,
	201, 902,
	203, 902,
	205, 902,
	206, 902,
	207, 902,
	209, 902,
	210, 902,
	213, 902,
	214, 902,
	215, 902,
	216, 902,
	218, 902,
	219, 902,
	221, 902,
	222, 902,
	224, 902,
	225, 902,
	228, 902,
	229, 902,
	232, 902,
	233, 902,
	234, 902,
	236, 902,
	237, 902,
	238, 902,
	239, 902,
	240, 902,
	241, 902,
	242, 902,
	243, 902,
	244, 902,
	245, 902,
	247, 902,
	248, 902,
	249, 902,
	250, 902,
	254, 902,
	256, 902,
	257, 902,
	258, 902,
	259, 902,
	261, 902,
	262, 902,
	263, 902,
	264, 902,
	266, 902,
	267, 902,
	268, 902,
	271, 902,
	272, 902,
	273, 902,
	275, 902,
	277, 902,
	278, 902,
	279, 902,
	280, 902,
	281, 902,
	282, 902,
	283, 902,
	284, 902,
	285, 902,
	286, 902,
	288, 902,
	289, 902,
	290, 902,
	291, 902,
	292, 902,
	293, 902,
	295, 902,
	297, 902,
	298, 902,
	299, 902,
	300, 902,
	301, 902,
	302, 902,
	303, 902,
	304, 902,
	305, 902,
	307, 902,
	308, 902,
	309, 902,
	310, 902,
	311, 902,
	312, 902,
	314, 902,
	315, 902,
	316, 902,
	317, 902,
	318, 902,
	319, 902,
	320, 902,
	321, 902,
	323, 902,
	325, 902,
	326, 902,
	327, 902,
	328, 902,
	329, 902,
	330, 902,
	332, 902,
	333, 902,
	334, 902,
	335, 902,
	336, 902,
	337, 902,
	338, 902,
	339, 902,
	341, 902,
	342, 902,
	343, 902,
	344, 902,
	345, 902,
	346, 902,
	347, 902,
	348, 902,
	349, 902,
	350, 902,
	352, 902,
	353, 902,
	354, 902,
	355, 902,
	356, 902,
	358, 902,
	359, 902,
	360, 902,
	361, 902,
	362, 902,
	364, 902,
	365, 902,
	366, 902,
	367, 902,
	368, 902,
	369, 902,
	370, 902,
	371, 902,
	372, 902,
	373, 902,
	374, 902,
	375, 902,
	377, 902,
	378, 902,
	379, 902,
	381, 902,
	382, 902,
	383, 902,
	384, 902,
	385, 902,
	386, 902,
	387, 902,
	389, 902,
	390, 902,
	391, 902,
	392, 902,
	393, 902,
	395, 902,
	397, 902,
	398, 902,
	399, 902,
	400, 902,
	401, 902,
	403, 902,
	404, 902,
	405, 902,
	407, 902,
	408, 902,
	411, 902,
	412, 902,
	413, 902,
	414, 902,
	415, 902,
	416, 902,
	418, 902,
	420, 902,
	421, 902,
	422, 902,
	423, 902,
	424, 902,
	425, 902,
	426, 902,
	428, 902,
	429, 902,
	430, 902,
	435, 902,
	436, 902,
	437, 902,
	438, 902,
	439, 902,
	440, 902,
	-2, 0,
	-1, 1331,
	1, 368,
	462, 368,
	464, 368,
	466, 368,
	-2, 1046,
	-1, 1334,
	4, 2032,
	11, 2032,
	12, 2032,
	14, 2032,
	15, 2032,
	16, 2032,
	17, 2032,
	18, 2032,
	19, 2032,
	21, 2032,
	22, 2032,
	23, 2032,
	24, 2032,
	25, 2032,
	27, 2032,
	30, 2032,
	31, 2032,
	33, 2032,
	35, 2032,
	38, 2032,
	39, 2032,
	40, 2032,
	41, 2032,
	42, 2032,
	43, 2032,
	44, 2032,
	45, 2032,
	46, 2032,
	47, 2032,
	48, 2032,
	49, 2032,
	51, 2032,
	52, 2032,
	53, 2032,
	54, 2032,
	55, 2032,
	56, 2032,
	59, 2032,
	60, 2032,
	61, 2032,
	62, 2032,
	64, 2032,
	65, 2032,
	66, 2032,
	69, 2032,
	70, 2032,
	71, 2032,
	72, 2032,
	73, 2032,
	74, 2032,
	75, 2032,
	77, 2032,
	78, 2032,
	79, 2032,
	80, 2032,
	82, 2032,
	83, 2032,
	84, 2032,
	85, 2032,
	86, 2032,
	88, 2032,
	89, 2032,
	90, 2032,
	98, 2032,
	99, 2032,
	100, 2032,
	101, 2032,
	102, 2032,
	103, 2032,
	104, 2032,
	105, 2032,
	107, 2032,
	109, 2032,
	110, 2032,
	112, 2032,
	115, 2032,
	116, 2032,
	117, 2032,
	119, 2032,
	121, 2032,
	122, 2032,
	124, 2032,
	125, 2032,
	126, 2032,
	127, 2032,
	128, 2032,
	129, 2032,
	130, 2032,
	131, 2032,
	132, 2032,
	133, 2032,
	134, 2032,
	135, 2032,
	136, 2032,
	140, 2032,
	141, 2032,
	142, 2032,
	143, 2032,
	144, 2032,
	145, 2032,
	146, 2032,
	147, 2032,
	148, 2032,
	149, 2032,
	150, 2032,
	151, 2032,
	153, 2032,
	156, 2032,
	157, 2032,
	158, 2032,
	160, 2032,
	161, 2032,
	163, 2032,
	164, 2032,
	166, 2032,
	167, 2032,
	168, 2032,
	169, 2032,
	170, 2032,
	171, 2032,
	172, 2032,
	173, 2032,
	174, 2032,
	175, 2032,
	176, 2032,
	177, 2032,
	178, 2032,
	179, 2032,
	180, 2032,
	181, 2032,
	182, 2032,
	183, 2032,
	185, 2032,
	186, 2032,
	187, 2032,
	189, 2032,
	190, 2032,
	191, 2032,
	192, 2032,
	193, 2032,
	194, 2032,
	195, 2032,
	196, 2032,
	197, 2032,
	199, 2032,
	201, 2032,
	202, 2032,
	203, 2032,
	204, 2032,
	205, 2032,
	206, 2032,
	207, 2032,
	208, 2032,
	209, 2032,
	210, 2032,
	211, 2032,
	212, 2032,
	213, 2032,
	214, 2032,
	215, 2032,
	216, 2032,
	218, 2032,
	219, 2032,
	221, 2032,
	222, 2032,
	223, 2032,
	224, 2032,
	225, 2032,
	226, 2032,
	228, 2032,
	229, 2032,
	232, 2032,
	233, 2032,
	234, 2032,
	235, 2032,
	236, 2032,
	237, 2032,
	238, 2032,
	239, 2032,
	240, 2032,
	241, 2032,
	242, 2032,
	243, 2032,
	244, 2032,
	245, 2032,
	246, 2032,
	247, 2032,
	248, 2032,
	249, 2032,
	250, 2032,
	253, 2032,
	254, 2032,
	256, 2032,
	257, 2032,
	258, 2032,
	259, 2032,
	261, 2032,
	262, 2032,
	263, 2032,
	266, 2032,
	267, 2032,
	268, 2032,
	269, 2032,
	271, 2032,
	272, 2032,
	273, 2032,
	275, 2032,
	277, 2032,
	278, 2032,
	279, 2032,
	280, 2032,
	281, 2032,
	282, 2032,
	283, 2032,
	284, 2032,
	285, 2032,
	286, 2032,
	288, 2032,
	289, 2032,
	290, 2032,
	291, 2032,
	292, 2032,
	293, 2032,
	295, 2032,
	297, 2032,
	298, 2032,
	299, 2032,
	300, 2032,
	301, 2032,
	302, 2032,
	303, 2032,
	304, 2032,
	305, 2032,
	307, 2032,
	308, 2032,
	309, 2032,
	310, 2032,
	311, 2032,
	312, 2032,
	313, 2032,
	314, 2032,
	315, 2032,
	316, 2032,
	317, 2032,
	318, 2032,
	319, 2032,
	320, 2032,
	321, 2032,
	323, 2032,
	324, 2032,
	325, 2032,
	326, 2032,
	327, 2032,
	328, 2032,
	329, 2032,
	330, 2032,
	331, 2032,
	332, 2032,
	333, 2032,
	334, 2032,
	335, 2032,
	336, 2032,
	337, 2032,
	338, 2032,
	339, 2032,
	341, 2032,
	342, 2032,
	343, 2032,
	344, 2032,
	345, 2032,
	346, 2032,
	347, 2032,
	348, 2032,
	349, 2032,
	350, 2032,
	352, 2032,
	353, 2032,
	354, 2032,
	355, 2032,
	356, 2032,
	357, 2032,
	358, 2032,
	359, 2032,
	360, 2032,
	361, 2032,
	362, 2032,
	364, 2032,
	365, 2032,
	366, 2032,
	367, 2032,
	368, 2032,
	369, 2032,
	370, 2032,
	371, 2032,
	372, 2032,
	373, 2032,
	374, 2032,
	375, 2032,
	377, 2032,
	378, 2032,
	379, 2032,
	381, 2032,
	382, 2032,
	383, 2032,
	384, 2032,
	385, 2032,
	386, 2032,
	387, 2032,
	389, 2032,
	390, 2032,
	391, 2032,
	392, 2032,
	393, 2032,
	395, 2032,
	397, 2032,
	398, 2032,
	399, 2032,
	400, 2032,
	401, 2032,
	403, 2032,
	404, 2032,
	405, 2032,
	407, 2032,
	408, 2032,
	411, 2032,
	412, 2032,
	413, 2032,
	414, 2032,
	415, 2032,
	416, 2032,
	418, 2032,
	420, 2032,
	421, 2032,
	422, 2032,
	423, 2032,
	424, 2032,
	425, 2032,
	426, 2032,
	428, 2032,
	429, 2032,
	430, 2032,
	435, 2032,
	436, 2032,
	437, 2032,
	438, 2032,
	439, 2032,
	440, 2032,
	441, 2032,
	442, 2032,
	444, 2032,
	445, 2032,
	446, 2032,
	447, 2032,
	448, 2032,
	449, 2032,
	451, 2032,
	452, 2032,
	453, 2032,
	454, 2032,
	455, 2032,
	456, 2032,
	457, 2032,
	458, 2032,
	459, 2032,
	461, 2032,
	464, 2032,
	465, 2032,
	467, 2032,
	468, 2032,
	-2, 0,
	-1, 1339,
	155, 1935,
	394, 1935,
	446, 1935,
	465, 1935,
	-2, 0,
	-1, 1368,
	298, 642,
	350, 642,
	-2, 0,
	-1, 1391,
	1, 637,
	462, 637,
	464, 637,
	466, 637,
	-2, 0,
	-1, 1392,
	1, 662,
	462, 662,
	464, 662,
	466, 662,
	-2, 0,
	-1, 1393,
	1, 644,
	462, 644,
	464, 644,
	466, 644,
	-2, 0,
	-1, 1395,
	1, 648,
	462, 648,
	464, 648,
	466, 648,
	-2, 0,
	-1, 1420,
	1, 1985,
	462, 1985,
	464, 1985,
	465, 1985,
	466, 1985,
	-2, 688,
	-1, 1421,
	1, 1932,
	462, 1932,
	464, 1932,
	465, 1932,
	466, 1932,
	-2, 689,
	-1, 1436,
	1, 964,
	466, 964,
	-2, 969,
	-1, 1441,
	139, 1084,
	227, 1084,
	260, 1084,
	-2, 1035,
	-1, 1539,
	123, 1048,
	139, 1048,
	198, 1048,
	227, 1048,
	260, 1048,
	270, 1048,
	409, 1048,
	-2, 1448,
	-1, 1592,
	464, 1586,
	-2, 0,
	-1, 1634,
	123, 1048,
	139, 1048,
	198, 1048,
	227, 1048,
	260, 1048,
	270, 1048,
	409, 1048,
	-2, 1157,
	-1, 1683,
	463, 1279,
	-2, 1267,
	-1, 1727,
	1, 495,
	466, 495,
	-2, 969,
	-1, 1925,
	1, 639,
	462, 639,
	464, 639,
	466, 639,
	-2, 0,
	-1, 1926,
	1, 664,
	462, 664,
	464, 664,
	466, 664,
	-2, 0,
	-1, 1992,
	329, 1104,
	330, 1104,
	-2, 1310,
	-1, 2021,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1328,
	-1, 2022,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1329,
	-1, 2023,
	83, 0,
	211, 0,
	212, 0,
	448, 0,
	449, 0,
	-2, 1330,
	-1, 2024,
	83, 0,
	211, 0,
	212, 0,
	448, 0,
	449, 0,
	-2, 1331,
	-1, 2025,
	83, 0,
	211, 0,
	212, 0,
	448, 0,
	449, 0,
	-2, 1332,
	-1, 2026,
	83, 0,
	211, 0,
	212, 0,
	448, 0,
	449, 0,
	-2, 1333,
	-1, 2027,
	83, 0,
	211, 0,
	212, 0,
	448, 0,
	449, 0,
	-2, 1334,
	-1, 2028,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1335,
	-1, 2040,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1347,
	-1, 2041,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1348,
	-1, 2042,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1349,
	-1, 2045,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	174, 0,
	177, 0,
	226, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1354,
	-1, 2051,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	174, 0,
	177, 0,
	226, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1358,
	-1, 2053,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	174, 0,
	177, 0,
	226, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1366,
	-1, 2054,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	174, 0,
	177, 0,
	226, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1367,
	-1, 2055,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	174, 0,
	177, 0,
	226, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1368,
	-1, 2056,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	174, 0,
	177, 0,
	226, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1369,
	-1, 2150,
	5, 1236,
	155, 1597,
	463, 1720,
	-2, 1711,
	-1, 2151,
	155, 1598,
	-2, 1989,
	-1, 2152,
	155, 1599,
	-2, 1853,
	-1, 2153,
	155, 1600,
	-2, 1775,
	-1, 2154,
	155, 1601,
	-2, 1811,
	-1, 2155,
	155, 1602,
	-2, 1851,
	-1, 2156,
	155, 1603,
	-2, 1926,
	-1, 2232,
	1, 1158,
	2, 1158,
	88, 1158,
	123, 1158,
	139, 1158,
	152, 1158,
	156, 1158,
	162, 1158,
	165, 1158,
	189, 1158,
	198, 1158,
	208, 1158,
	223, 1158,
	227, 1158,
	246, 1158,
	260, 1158,
	264, 1158,
	270, 1158,
	322, 1158,
	324, 1158,
	409, 1158,
	419, 1158,
	432, 1158,
	433, 1158,
	434, 1158,
	443, 1158,
	462, 1158,
	464, 1158,
	466, 1158,
	468, 1158,
	-2, 1157,
	-1, 2237,
	463, 1694,
	-2, 1706,
	-1, 2258,
	463, 1278,
	-2, 1268,
	-1, 2494,
	265, 1107,
	-2, 2023,
	-1, 2495,
	265, 1108,
	-2, 1915,
	-1, 2499,
	329, 1662,
	330, 1662,
	-2, 1429,
	-1, 2500,
	329, 1666,
	330, 1666,
	-2, 1430,
	-1, 2501,
	329, 1663,
	330, 1663,
	-2, 1429,
	-1, 2502,
	329, 1667,
	330, 1667,
	-2, 1430,
	-1, 2511,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	174, 0,
	177, 0,
	226, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1356,
	-1, 2512,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	174, 0,
	177, 0,
	226, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1360,
	-1, 2518,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	174, 0,
	177, 0,
	226, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1362,
	-1, 2700,
	205, 969,
	295, 969,
	302, 969,
	443, 969,
	-2, 492,
	-1, 2793,
	284, 1072,
	-2, 875,
	-1, 2878,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	174, 0,
	177, 0,
	226, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1364,
	-1, 2885,
	202, 0,
	204, 0,
	253, 0,
	-2, 1383,
	-1, 2948,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1412,
	-1, 2949,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1413,
	-1, 2950,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1414,
	-1, 2954,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1418,
	-1, 2955,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1419,
	-1, 2956,
	14, 0,
	15, 0,
	16, 0,
	444, 0,
	445, 0,
	446, 0,
	-2, 1420,
	-1, 3000,
	463, 1695,
	-2, 1707,
	-1, 3089,
	465, 2136,
	-2, 1012,
	-1, 3138,
	202, 0,
	204, 0,
	253, 0,
	-2, 1384,
	-1, 3141,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	174, 0,
	177, 0,
	226, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1387,
	-1, 3142,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	174, 0,
	177, 0,
	226, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1389,
	-1, 3303,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	174, 0,
	177, 0,
	226, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1388,
	-1, 3304,
	17, 0,
	18, 0,
	19, 0,
	43, 0,
	174, 0,
	177, 0,
	226, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1390,
	-1, 3314,
	202, 0,
	-2, 1421,
	-1, 3424,
	202, 0,
	-2, 1422,
	-1, 3542,
	43, 0,
	174, 0,
	226, 0,
	357, 0,
	441, 0,
	447, 0,
	-2, 1992,
}

const sqlPrivate = 57344

const sqlLast = 78376

var sqlAct = [...]int{

	911, 3652, 3344, 3372, 3541, 3551, 3021, 3347, 3626, 3520,
	2634, 2288, 3511, 3244, 2780, 3552, 3508, 3589, 3553, 2401,
	3379, 1027, 2916, 3263, 3428, 3540, 2635, 3333, 3268, 2223,
	3292, 3123, 3495, 2809, 3081, 2008, 3384, 3200, 1185, 1454,
	216, 2068, 216, 216, 1062, 216, 216, 216, 216, 216,
	1210, 1323, 216, 840, 3273, 2802, 2776, 2181, 2224, 2804,
	2717, 598, 573, 1778, 3064, 3022, 2435, 831, 1890, 3318,
	1085, 1658, 2504, 1537, 2437, 2390, 1659, 2366, 2348, 216,
	2364, 2369, 2662, 598, 1627, 1019, 2676, 2649, 3172, 2445,
	1901, 3122, 2385, 1178, 2620, 1375, 2434, 2426, 2387, 2428,
	868, 2638, 1853, 2402, 1601, 1854, 695, 2225, 2971, 2290,
	2005, 2619, 3429, 33, 1565, 1629, 2539, 2349, 2099, 933,
	2081, 2001, 2492, 1197, 1326, 1879, 1787, 2640, 1194, 1547,
	839, 144, 1812, 907, 4, 1888, 2367, 1805, 2444, 1069,
	1763, 1602, 1765, 1816, 1436, 2199, 88, 2227, 2111, 2065,
	1991, 2681, 1753, 2119, 2323, 2778, 1307, 1187, 827, 1011,
	1332, 1850, 1317, 2395, 2178, 2093, 2438, 3373, 1253, 1058,
	599, 210, 209, 600, 1014, 1611, 541, 2207, 2189, 216,
	216, 993, 2146, 2082, 1528, 1455, 2280, 557, 1453, 527,
	594, 1849, 567, 549, 1330, 1283, 151, 1867, 639, 1207,
	670, 866, 1560, 1996, 1777, 2324, 867, 544, 144, 1016,
	208, 38, 689, 152, 37, 35, 26, 742, 24, 22,
	1435, 758, 1459, 552, 991, 2989, 1265, 2990, 1902, 2535,
	1881, 2636, 603, 606, 3670, 1881, 3658, 1066, 2198, 1881,
	2198, 3657, 3639, 3637, 3635, 2198, 3214, 3214, 1821, 3575,
	2819, 2198, 3573, 3576, 603, 606, 2198, 835, 835, 3571,
	1467, 1468, 2450, 2198, 3568, 2247, 3565, 2818, 3569, 830,
	3566, 3562, 2698, 705, 3538, 1821, 1467, 1468, 1821, 3537,
	1498, 3536, 3533, 1821, 3532, 1893, 1893, 1470, 1893, 1467,
	1468, 3527, 3491, 3525, 3490, 3214, 1498, 3214, 2251, 1821,
	836, 3484, 3483, 1470, 3478, 2198, 2198, 2191, 3214, 1498,
	1467, 1468, 3410, 3477, 1008, 1469, 1470, 3214, 3471, 3426,
	1043, 3407, 1821, 2251, 1489, 1821, 994, 994, 3404, 3362,
	1498, 1469, 3214, 1821, 3361, 3354, 3353, 1470, 1821, 1821,
	3214, 815, 3324, 1893, 1469, 3305, 1821, 1467, 1468, 2251,
	3290, 3281, 3241, 3231, 1893, 2833, 2198, 2198, 814, 3213,
	3140, 1066, 3097, 3214, 2251, 1469, 2849, 1498, 822, 3091,
	1038, 3062, 2995, 2849, 1470, 3063, 2996, 2985, 2978, 2909,
	2897, 2986, 2198, 1821, 2198, 997, 2975, 998, 2975, 1492,
	1493, 1494, 1495, 2848, 2840, 2190, 2771, 2849, 2841, 1475,
	1893, 2633, 1469, 1394, 995, 2198, 2631, 3232, 2630, 2584,
	2198, 1489, 2198, 2198, 2567, 1475, 2556, 2554, 2568, 1486,
	2198, 2424, 2423, 2555, 1821, 1897, 1897, 2841, 1475, 2264,
	2250, 1497, 1499, 2198, 2251, 2245, 2239, 2197, 1896, 2198,
	1821, 2198, 1897, 184, 1039, 2592, 2593, 1497, 1499, 1475,
	2339, 2279, 1733, 2833, 2376, 2198, 2538, 1782, 3134, 2503,
	1497, 1499, 1880, 1820, 2277, 1597, 2592, 2593, 1206, 2610,
	2611, 2612, 1628, 3049, 2873, 2858, 1492, 1493, 1494, 1495,
	1815, 1497, 1499, 186, 1490, 3136, 1475, 2820, 2218, 1538,
	1377, 2217, 2216, 2096, 1882, 1228, 2215, 2214, 1222, 1882,
	1490, 999, 996, 1882, 821, 820, 2821, 1538, 819, 2607,
	818, 817, 813, 1490, 812, 184, 811, 810, 1497, 1499,
	809, 2474, 2137, 808, 807, 690, 806, 185, 805, 804,
	2607, 803, 216, 802, 1490, 801, 740, 178, 739, 738,
	737, 736, 735, 734, 733, 179, 732, 1484, 1485, 731,
	59, 693, 692, 730, 729, 186, 728, 727, 726, 2097,
	216, 3189, 1496, 2818, 60, 725, 153, 216, 724, 3558,
	723, 1490, 722, 721, 720, 719, 718, 717, 64, 716,
	1491, 715, 714, 3151, 2598, 1039, 704, 216, 1088, 216,
	216, 1190, 216, 1088, 216, 703, 1491, 661, 660, 185,
	619, 618, 216, 216, 617, 2598, 609, 608, 607, 1491,
	70, 584, 579, 77, 578, 577, 561, 1086, 2382, 206,
	2190, 205, 1198, 204, 203, 1068, 202, 216, 201, 1073,
	1491, 2098, 2095, 1039, 200, 199, 198, 197, 153, 196,
	76, 216, 2415, 1190, 1190, 216, 216, 1880, 216, 1496,
	87, 1971, 195, 194, 193, 77, 84, 2613, 192, 191,
	216, 190, 1200, 1227, 189, 188, 1221, 1491, 216, 2608,
	187, 2993, 2850, 2679, 2561, 2550, 2354, 2240, 2231, 1761,
	1644, 1554, 216, 216, 216, 2135, 216, 1190, 1190, 1212,
	2608, 2133, 1190, 1075, 1630, 216, 1190, 216, 216, 78,
	1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 2398,
	2131, 216, 2129, 1056, 1549, 1183, 1466, 910, 1479, 1471,
	1472, 1473, 1474, 1476, 1477, 1029, 1215, 3539, 1220, 2100,
	1226, 3459, 1471, 1472, 1473, 1474, 1476, 1477, 1904, 1327,
	3419, 184, 3413, 3411, 3343, 3282, 1081, 1190, 1175, 1180,
	1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 1051,
	1216, 3193, 3171, 2844, 3170, 2609, 3158, 1259, 1262, 216,
	3277, 3157, 1209, 603, 606, 1208, 1270, 3156, 3155, 838,
	3149, 186, 3148, 216, 1487, 1483, 2609, 1480, 1478, 1479,
	1471, 1472, 1473, 1474, 1476, 1477, 3147, 2383, 216, 3061,
	1181, 3009, 3008, 1568, 1204, 2344, 1903, 3006, 79, 1567,
	2999, 2968, 2967, 883, 1320, 1345, 2966, 1349, 2893, 2889,
	1341, 184, 1348, 144, 144, 185, 2674, 1335, 1337, 2094,
	1571, 1007, 1396, 184, 2627, 178, 184, 120, 836, 1311,
	1314, 150, 82, 179, 83, 3047, 1550, 2618, 1548, 1333,
	2591, 2588, 2587, 2256, 1568, 1266, 1266, 2592, 2593, 1404,
	1567, 186, 2310, 184, 153, 1536, 2592, 2593, 2585, 2574,
	2573, 1361, 1267, 186, 1395, 694, 186, 2572, 2569, 120,
	2566, 1566, 1442, 2544, 2543, 2603, 2601, 2602, 2594, 2595,
	2596, 2597, 2599, 2600, 2536, 2425, 2232, 2104, 1858, 2604,
	2605, 2606, 1466, 186, 1022, 185, 2603, 2601, 2602, 2594,
	2595, 2596, 2597, 2599, 2600, 178, 1549, 185, 1826, 3666,
	185, 1465, 3634, 179, 184, 1824, 121, 178, 3633, 3582,
	178, 1441, 3580, 3574, 1028, 179, 2918, 3456, 179, 154,
	3453, 3450, 1434, 184, 153, 3449, 3448, 185, 3444, 3438,
	3408, 3403, 2592, 2593, 3402, 2071, 153, 178, 3390, 153,
	2381, 1354, 2692, 2655, 186, 179, 3387, 3339, 3316, 3276,
	1369, 3300, 3299, 1440, 3287, 3286, 3257, 3188, 3169, 1467,
	1468, 184, 3112, 186, 2136, 1439, 691, 3109, 3038, 1452,
	3037, 3025, 3024, 216, 2981, 2884, 2598, 1532, 2851, 1498,
	1025, 2834, 2796, 2765, 2743, 2598, 1470, 2720, 185, 1437,
	2719, 2694, 2632, 2592, 2593, 2565, 1599, 2564, 178, 216,
	2549, 186, 836, 2527, 2363, 1572, 179, 185, 1569, 216,
	1088, 216, 216, 216, 1469, 1561, 815, 178, 598, 216,
	216, 1443, 2720, 598, 216, 179, 1558, 153, 2260, 216,
	2077, 2259, 1570, 814, 2235, 1190, 1462, 1463, 2212, 1647,
	1467, 1468, 2196, 2127, 1608, 185, 2397, 1643, 1600, 2592,
	2593, 1596, 2610, 2611, 2612, 178, 1088, 2592, 2593, 1646,
	1595, 2608, 1594, 179, 1618, 1593, 1592, 1470, 3135, 1655,
	2608, 2598, 1653, 1730, 1722, 1591, 1590, 1589, 184, 1588,
	1586, 1585, 2592, 2593, 153, 1762, 1605, 1606, 1725, 1584,
	1583, 1724, 1582, 1581, 1905, 1469, 1580, 184, 1475, 1579,
	1578, 1577, 1576, 1759, 1623, 1575, 1574, 1551, 1467, 1468,
	1562, 1563, 1638, 2607, 1533, 1531, 1526, 1050, 186, 1041,
	994, 144, 1664, 1637, 1034, 2253, 3431, 2134, 3262, 3190,
	1497, 1499, 2598, 2132, 3144, 1470, 3005, 186, 2988, 1648,
	2984, 1685, 836, 850, 2553, 2213, 1650, 3328, 1749, 3234,
	3192, 1752, 2130, 3004, 2128, 1550, 2608, 2609, 1752, 3414,
	3412, 2690, 185, 1469, 2592, 2593, 2609, 1529, 1639, 1070,
	1635, 1752, 178, 2746, 3451, 2805, 1072, 3280, 1727, 3233,
	179, 185, 2991, 1490, 1066, 3342, 1190, 216, 2598, 603,
	606, 178, 1782, 1088, 603, 606, 2598, 1598, 2836, 179,
	2835, 153, 1626, 1632, 1630, 1625, 1624, 1622, 1654, 1621,
	1620, 1063, 1568, 1721, 2328, 3385, 3036, 2608, 1567, 2571,
	153, 2598, 1822, 1661, 1432, 3072, 1368, 1656, 1071, 1771,
	2570, 799, 216, 216, 1066, 2509, 1581, 909, 1802, 216,
	2613, 1804, 2312, 1581, 1809, 1728, 1067, 1475, 2782, 1739,
	2781, 1755, 2609, 1750, 1745, 3319, 1556, 1405, 216, 1376,
	216, 1902, 216, 1066, 3380, 1377, 216, 2112, 1855, 3016,
	800, 3053, 1006, 2608, 2559, 3040, 2856, 3653, 216, 1491,
	2594, 2595, 2596, 2597, 2599, 2600, 2603, 2601, 2602, 2594,
	2595, 2596, 2597, 2599, 2600, 1786, 2759, 1800, 216, 2636,
	2920, 1064, 2258, 1535, 1587, 1564, 1859, 2774, 1065, 1846,
	1817, 1243, 3570, 2609, 3559, 3567, 2814, 1190, 3264, 1190,
	216, 1190, 1358, 3505, 216, 2723, 1842, 1190, 2432, 2394,
	1190, 216, 3604, 216, 216, 3224, 2490, 2702, 3605, 1231,
	1241, 2265, 793, 1190, 1190, 1190, 3663, 216, 1813, 795,
	791, 1873, 216, 3470, 1957, 789, 1864, 1209, 603, 606,
	1208, 598, 216, 1955, 216, 786, 216, 3371, 216, 2609,
	216, 3560, 3364, 2601, 2602, 2594, 2595, 2596, 2597, 2599,
	2600, 2283, 3055, 1057, 216, 1808, 1819, 216, 3051, 216,
	3050, 780, 1451, 3013, 2281, 1402, 2691, 3012, 216, 2548,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 1072, 1921,
	1403, 1861, 1242, 1871, 2547, 2546, 844, 1884, 1835, 216,
	1886, 1836, 1740, 2704, 1021, 216, 1891, 1449, 216, 656,
	1907, 2545, 2123, 2513, 2346, 2602, 2594, 2595, 2596, 2597,
	2599, 2600, 2338, 1845, 2096, 1900, 2335, 1779, 1063, 1066,
	1088, 1817, 2315, 1866, 1910, 1072, 2246, 865, 2052, 1869,
	1071, 1912, 1438, 836, 1205, 836, 2122, 1918, 1919, 1920,
	1909, 2010, 1356, 2391, 1333, 1984, 1333, 1775, 1351, 2009,
	2745, 1401, 2604, 2605, 2606, 1032, 3298, 1975, 1477, 2603,
	2601, 2602, 2594, 2595, 2596, 2597, 2599, 2600, 1780, 1781,
	2594, 2595, 2596, 2597, 2599, 2600, 2314, 1071, 1204, 657,
	2097, 1898, 1051, 1899, 1276, 3469, 1275, 1030, 1274, 834,
	1273, 1965, 1911, 1295, 2006, 2007, 1776, 2596, 2597, 2599,
	2600, 2283, 603, 606, 1450, 1088, 2272, 1237, 1064, 1970,
	783, 3621, 2238, 3349, 2281, 1065, 2857, 1969, 1664, 1664,
	1916, 1937, 2254, 1473, 1474, 1476, 1477, 2067, 1766, 1834,
	651, 2067, 1767, 2303, 2113, 3556, 1981, 1685, 1685, 1639,
	2083, 2084, 834, 3530, 1415, 2302, 1352, 2332, 216, 1254,
	1973, 1870, 2098, 2095, 1979, 1925, 1063, 2112, 2083, 2109,
	1968, 1995, 1982, 1448, 833, 1744, 1743, 2325, 2326, 1752,
	1754, 829, 1370, 3235, 2325, 2326, 1972, 2292, 1445, 1088,
	216, 1974, 2600, 3622, 1467, 1468, 1252, 2325, 2326, 216,
	1983, 1978, 216, 2075, 2145, 1088, 2149, 2149, 2162, 2073,
	2083, 650, 1391, 2182, 2184, 3351, 815, 1926, 2188, 815,
	815, 1470, 3604, 2860, 1023, 2859, 2471, 833, 2100, 1661,
	1661, 1367, 1768, 1997, 2237, 1251, 1998, 1999, 836, 3028,
	2108, 2244, 1431, 1400, 585, 1770, 835, 1049, 3019, 1469,
	3488, 836, 2903, 2701, 1967, 836, 1064, 2233, 3640, 1924,
	2100, 2236, 3297, 1065, 1392, 3594, 1066, 2220, 712, 1377,
	3557, 1377, 2079, 2497, 2498, 3128, 2812, 1747, 2295, 3624,
	2121, 3127, 2313, 1773, 216, 2125, 2126, 3039, 582, 2811,
	1239, 1022, 1190, 1022, 2106, 2756, 1930, 1964, 1766, 835,
	2204, 1772, 1767, 2219, 2751, 994, 1977, 2229, 2230, 1782,
	214, 2900, 1799, 659, 658, 2768, 1766, 2203, 787, 1357,
	1767, 797, 1088, 1784, 1637, 796, 787, 216, 3445, 1956,
	1730, 788, 2157, 1475, 2811, 216, 2173, 1254, 1954, 2186,
	2703, 787, 591, 836, 2194, 2195, 216, 3555, 144, 2205,
	2100, 2278, 2248, 2209, 2210, 688, 2477, 1412, 2733, 216,
	2094, 1559, 1190, 3650, 649, 1881, 648, 2688, 3052, 2378,
	1686, 1635, 581, 2336, 1773, 216, 1088, 1031, 3220, 1190,
	1931, 216, 216, 2901, 1294, 832, 3486, 1025, 1570, 1025,
	2255, 2524, 1768, 2284, 652, 3124, 3629, 1773, 1236, 3253,
	1748, 2732, 3310, 2735, 1066, 1770, 1651, 216, 3611, 216,
	1768, 3350, 216, 3516, 3455, 2522, 3487, 1525, 2294, 2563,
	3623, 2350, 216, 1770, 2263, 2318, 593, 2737, 1782, 2739,
	2351, 216, 3593, 216, 2208, 216, 1353, 2282, 832, 3641,
	2480, 216, 2405, 2347, 216, 2103, 216, 1413, 216, 1664,
	1966, 2309, 2333, 216, 1190, 1190, 1190, 835, 1190, 2373,
	2262, 1772, 2266, 216, 216, 854, 216, 216, 1685, 1562,
	1563, 2268, 2228, 2317, 3029, 2736, 2515, 216, 2446, 1772,
	2066, 2100, 2343, 3261, 2270, 3118, 2337, 3001, 539, 1044,
	216, 216, 216, 2287, 2305, 216, 3129, 216, 784, 2356,
	216, 2358, 216, 2870, 216, 2316, 2419, 2420, 2327, 2329,
	2330, 2331, 534, 2449, 2297, 2299, 2271, 2350, 2334, 2350,
	1414, 2519, 3554, 3218, 587, 216, 216, 216, 216, 216,
	216, 2269, 216, 2520, 2293, 3211, 2525, 1769, 2479, 1444,
	2074, 2396, 592, 2396, 1803, 2464, 713, 2465, 1379, 1610,
	1661, 1209, 603, 606, 2352, 3254, 2476, 1773, 3294, 2448,
	2462, 2451, 2452, 3208, 2361, 216, 583, 3603, 580, 1181,
	2431, 1458, 3592, 2377, 2414, 1773, 1929, 1355, 2418, 775,
	2407, 2417, 1366, 589, 2459, 1204, 2389, 144, 3627, 2707,
	2453, 2421, 2454, 2400, 2482, 3601, 2484, 3466, 1048, 1541,
	2411, 826, 2412, 1546, 2413, 3389, 3209, 1764, 3079, 1610,
	2798, 1923, 2164, 3066, 2475, 1333, 2049, 1614, 2422, 2461,
	1848, 2433, 586, 1607, 2469, 1756, 1757, 3651, 2466, 1882,
	2467, 1773, 2468, 1042, 1037, 526, 2478, 1471, 1472, 1473,
	1474, 1476, 1477, 775, 3167, 3219, 3125, 1783, 2957, 1457,
	1617, 1741, 2516, 1447, 2682, 3645, 3356, 2485, 2063, 590,
	3628, 3293, 3355, 1811, 216, 826, 3337, 3435, 3080, 1612,
	588, 3223, 3015, 1738, 2496, 776, 1614, 1614, 3222, 2799,
	2521, 2715, 2061, 1810, 1615, 2711, 1525, 2368, 2365, 2523,
	1865, 2487, 3630, 2488, 1857, 1856, 1830, 1769, 2491, 824,
	1995, 775, 1204, 3496, 1988, 2541, 2542, 1613, 2899, 1617,
	1617, 2489, 2537, 1806, 2552, 1769, 3457, 1961, 1734, 3269,
	2551, 3082, 3378, 826, 2362, 2651, 3376, 1457, 2206, 1612,
	1297, 3338, 2722, 1917, 1780, 1781, 1204, 1456, 1204, 776,
	1736, 2721, 2507, 1615, 1615, 2200, 1980, 2047, 2983, 2648,
	2050, 3204, 2647, 1088, 1393, 3205, 1737, 709, 2243, 2514,
	1268, 825, 1807, 3295, 2319, 2643, 2644, 1613, 2242, 2241,
	1458, 2375, 216, 1282, 1280, 535, 833, 1269, 836, 3440,
	216, 711, 2642, 610, 3245, 1616, 2958, 216, 2057, 3168,
	216, 216, 1088, 2959, 3207, 2845, 2058, 776, 2629, 2046,
	2059, 1088, 1863, 2064, 3644, 1989, 3210, 216, 2770, 2669,
	1380, 3608, 2202, 3345, 2645, 1456, 3173, 2201, 702, 2558,
	777, 2672, 216, 3221, 3374, 2972, 2117, 3610, 536, 3499,
	2680, 1021, 3572, 1021, 3335, 3452, 3315, 3166, 2659, 3057,
	2621, 216, 216, 216, 1616, 1616, 2657, 216, 2670, 2671,
	216, 3441, 2708, 2709, 2883, 2660, 1429, 2686, 216, 216,
	216, 216, 216, 2854, 2678, 3458, 3336, 2586, 537, 2724,
	538, 2727, 2697, 1427, 216, 216, 216, 2699, 1409, 2654,
	2650, 2677, 854, 216, 777, 2526, 854, 2372, 2689, 2658,
	1022, 2705, 2637, 3346, 2653, 3500, 216, 1190, 1173, 216,
	2624, 2625, 2626, 1173, 2683, 2320, 2321, 1088, 2673, 2345,
	3206, 2652, 1664, 2712, 1022, 1088, 2311, 3442, 1407, 2725,
	216, 2729, 2730, 216, 216, 2716, 778, 1953, 2261, 1645,
	2048, 1685, 1642, 216, 2668, 2779, 1190, 216, 1390, 1190,
	1190, 1190, 777, 2748, 2680, 2664, 1430, 2060, 1346, 1664,
	216, 2785, 2622, 216, 2684, 2685, 2062, 2750, 216, 2868,
	216, 707, 708, 2867, 2807, 779, 829, 216, 1685, 2446,
	2700, 1281, 1279, 2695, 2696, 1388, 216, 216, 2446, 710,
	2740, 2741, 2706, 1386, 2742, 2766, 1025, 611, 612, 2757,
	778, 2473, 1190, 1190, 2816, 2472, 2456, 1963, 1788, 1384,
	216, 216, 1382, 1374, 216, 1934, 2738, 1771, 1372, 1428,
	1025, 1190, 2744, 1661, 2762, 2763, 2752, 1792, 2764, 1278,
	2665, 2758, 700, 701, 1723, 2789, 1426, 2760, 2116, 779,
	2755, 1408, 2761, 1771, 1573, 216, 1350, 1088, 216, 216,
	1088, 216, 2800, 2753, 2827, 2767, 823, 2754, 778, 1258,
	1661, 1023, 3550, 1023, 2317, 3240, 2808, 3230, 3493, 3267,
	2790, 1789, 2663, 2792, 2793, 2794, 1198, 1813, 216, 1086,
	785, 1406, 3197, 3078, 3034, 1813, 2832, 1952, 3032, 614,
	613, 2806, 2667, 3014, 2784, 1204, 2783, 779, 2911, 2416,
	2392, 1389, 2380, 2843, 2379, 2359, 2813, 2824, 2825, 2826,
	2852, 941, 2847, 2829, 836, 2822, 1845, 2815, 1895, 2866,
	2865, 1088, 2828, 1894, 144, 144, 2838, 2839, 2830, 2831,
	1892, 1887, 1088, 1885, 216, 3396, 2505, 1883, 1387, 1874,
	615, 616, 1827, 1825, 1814, 1817, 1385, 1801, 1798, 1785,
	2908, 212, 1793, 529, 530, 1774, 545, 529, 545, 555,
	560, 2914, 1383, 576, 2853, 1381, 1373, 3590, 2666, 2886,
	2862, 1371, 212, 2803, 1652, 1003, 2863, 3605, 2895, 2896,
	3522, 1460, 1277, 3289, 2869, 3284, 3283, 2447, 1760, 1233,
	699, 2283, 3398, 2301, 212, 2871, 1204, 1204, 1664, 1004,
	3090, 2283, 2283, 1782, 2281, 790, 792, 1424, 1425, 1927,
	1951, 2506, 1794, 1795, 2300, 2298, 1319, 1685, 1950, 1862,
	1932, 1790, 1318, 2006, 2927, 3447, 2891, 3421, 3174, 216,
	1467, 1468, 2322, 2304, 1464, 2902, 2904, 2905, 1731, 2006,
	2937, 540, 2340, 2306, 216, 3492, 2917, 1664, 1664, 3460,
	1088, 1791, 2921, 2350, 2923, 2910, 2969, 2926, 2924, 2076,
	2992, 1204, 3070, 1664, 1664, 2342, 1685, 1685, 1461, 216,
	2965, 2934, 3065, 2936, 1467, 1468, 2998, 2341, 1541, 3000,
	2399, 2187, 1685, 1685, 2961, 1469, 1005, 2987, 551, 1726,
	529, 529, 2922, 1319, 1664, 2308, 1319, 1657, 212, 1661,
	3625, 1470, 2962, 2687, 3643, 2592, 2593, 2307, 1467, 1468,
	2275, 2276, 3462, 1685, 2273, 2274, 216, 1538, 1360, 3010,
	2120, 3003, 2976, 2977, 1359, 2169, 2974, 2906, 2275, 1469,
	2273, 2693, 2124, 144, 2118, 2091, 3145, 2970, 1411, 1796,
	3002, 1410, 2898, 1536, 1534, 2979, 2980, 3659, 1661, 1661,
	1173, 2994, 3432, 216, 216, 216, 3368, 3329, 3327, 3256,
	3191, 3115, 3108, 3096, 1661, 1661, 3076, 3060, 3059, 216,
	3058, 3041, 3031, 3026, 2823, 1190, 2797, 2795, 3045, 2458,
	2457, 3046, 3048, 2409, 2384, 2360, 2078, 1949, 1948, 216,
	854, 1947, 1946, 3054, 1877, 1661, 1173, 3018, 3092, 1876,
	2405, 3073, 1875, 1797, 216, 216, 1190, 1190, 1190, 1860,
	216, 216, 216, 3084, 3087, 216, 216, 1838, 3007, 216,
	216, 1837, 1190, 3033, 1833, 3035, 2716, 1832, 216, 1088,
	3056, 2446, 3074, 3083, 1831, 1829, 1828, 1423, 1422, 1306,
	1021, 1305, 1304, 1303, 1088, 3086, 1302, 1301, 3069, 1300,
	1664, 1299, 2317, 1298, 1296, 1291, 1290, 1289, 1288, 1287,
	1250, 1249, 1248, 1247, 1021, 1992, 3075, 1246, 1245, 1685,
	1244, 1238, 1232, 3116, 1230, 1229, 1079, 1078, 1077, 1022,
	1076, 1047, 3085, 1046, 978, 888, 3088, 1732, 798, 216,
	643, 3094, 3093, 782, 1022, 3348, 1417, 75, 1240, 3104,
	630, 69, 3100, 3099, 3030, 3504, 2731, 3110, 3107, 3114,
	1933, 1378, 1935, 2656, 3111, 3130, 3105, 3106, 3143, 2211,
	3485, 3152, 3131, 1022, 3098, 3113, 3139, 3121, 3126, 2562,
	3101, 3102, 3103, 1173, 3427, 3309, 2115, 1555, 3117, 71,
	876, 961, 3252, 3251, 3198, 3017, 2436, 3249, 3248, 843,
	1091, 1661, 216, 1742, 882, 1664, 1758, 1751, 2257, 2148,
	1665, 885, 1088, 1662, 1088, 1845, 887, 886, 1663, 1557,
	884, 1660, 2374, 2403, 1685, 1025, 1285, 762, 1746, 2072,
	2110, 2557, 1552, 216, 216, 216, 856, 878, 2107, 1040,
	1025, 855, 2661, 3186, 3194, 3195, 216, 2810, 2165, 3165,
	2997, 3216, 3179, 216, 3275, 216, 1987, 646, 216, 216,
	216, 2589, 2092, 1033, 3225, 2170, 2163, 2159, 2393, 1025,
	1088, 216, 216, 1190, 1433, 1527, 1088, 2404, 1190, 1074,
	3182, 859, 2070, 1543, 216, 3176, 3177, 2531, 3178, 3181,
	3184, 1446, 3183, 1035, 2817, 3246, 3217, 2675, 2252, 1088,
	216, 3196, 2677, 3187, 1190, 3519, 1661, 2000, 3227, 3228,
	1023, 1847, 1002, 1001, 1000, 3226, 3215, 3510, 3507, 2777,
	1735, 1045, 2267, 3175, 1519, 2786, 872, 1203, 576, 3243,
	2641, 3180, 1022, 216, 1023, 2846, 3285, 1255, 3446, 1518,
	794, 3437, 3271, 1061, 1060, 1088, 3274, 1059, 212, 2714,
	212, 212, 3237, 1195, 3242, 212, 1651, 3649, 3247, 3027,
	183, 1976, 3270, 212, 1211, 3238, 828, 3259, 180, 3258,
	182, 2169, 1088, 181, 1086, 3043, 2769, 3265, 17, 92,
	3279, 3272, 36, 3288, 16, 119, 118, 117, 1235, 116,
	115, 114, 113, 112, 111, 110, 109, 3239, 108, 3255,
	107, 3307, 1257, 106, 3260, 105, 212, 212, 104, 1195,
	1088, 103, 102, 101, 100, 3296, 99, 98, 216, 97,
	216, 212, 1088, 216, 3301, 3278, 96, 95, 1025, 1293,
	94, 216, 93, 572, 3306, 569, 50, 49, 91, 3307,
	1173, 90, 15, 212, 212, 212, 34, 1195, 13, 2169,
	2169, 2009, 3321, 216, 54, 55, 576, 3332, 212, 212,
	12, 3317, 1908, 29, 30, 81, 3322, 3323, 80, 28,
	14, 27, 699, 25, 216, 10, 8, 7, 216, 3326,
	3331, 31, 1845, 1619, 3330, 216, 11, 149, 1088, 2779,
	1664, 1190, 148, 3382, 74, 147, 73, 216, 146, 145,
	3352, 3377, 72, 23, 9, 141, 3383, 3367, 3071, 1685,
	68, 143, 142, 3405, 3406, 3365, 65, 3325, 216, 216,
	3369, 3358, 140, 139, 66, 1173, 3386, 3395, 138, 3393,
	212, 3375, 137, 67, 3381, 136, 21, 5, 53, 3274,
	216, 6, 3400, 3291, 212, 1664, 216, 3397, 3394, 3392,
	2169, 2169, 2169, 2855, 3399, 85, 216, 86, 32, 560,
	63, 62, 61, 20, 1685, 52, 3391, 19, 173, 172,
	171, 3359, 3360, 170, 165, 164, 169, 3417, 3418, 167,
	166, 3443, 168, 3434, 163, 1022, 1022, 3416, 135, 3433,
	175, 1661, 174, 3401, 177, 161, 157, 3420, 156, 1173,
	160, 3409, 162, 159, 3430, 158, 155, 3454, 3425, 176,
	216, 134, 133, 1190, 3463, 1173, 58, 3465, 132, 216,
	131, 130, 129, 1190, 1190, 128, 57, 18, 2, 1190,
	1, 0, 3476, 216, 0, 216, 0, 1664, 0, 0,
	3461, 0, 0, 0, 2493, 0, 1661, 0, 3386, 3468,
	0, 3467, 0, 3473, 0, 0, 1685, 0, 0, 216,
	0, 3480, 0, 0, 0, 216, 216, 3501, 1088, 1021,
	0, 0, 0, 0, 3474, 3475, 216, 216, 0, 3472,
	3479, 1025, 1025, 3481, 1021, 3482, 0, 216, 3521, 0,
	0, 0, 0, 3523, 0, 0, 0, 2009, 0, 3489,
	3509, 3512, 0, 3506, 0, 3535, 0, 0, 3526, 0,
	3534, 0, 216, 1021, 0, 3502, 0, 3529, 3531, 0,
	0, 0, 2165, 2165, 3561, 3514, 0, 0, 3513, 1204,
	0, 3517, 1173, 3546, 3547, 3549, 3548, 0, 1661, 0,
	0, 0, 0, 0, 0, 3563, 0, 3577, 0, 0,
	0, 216, 0, 3579, 529, 3581, 0, 1022, 3586, 0,
	0, 0, 2405, 0, 0, 3578, 0, 3591, 0, 3587,
	3583, 216, 0, 0, 0, 212, 0, 212, 0, 0,
	212, 0, 0, 0, 3597, 3598, 1173, 0, 0, 3602,
	1211, 3600, 1195, 212, 3524, 216, 0, 216, 3599, 212,
	1211, 545, 3609, 3607, 212, 1211, 3613, 3616, 3521, 3618,
	576, 3620, 3614, 3615, 3619, 3617, 3606, 0, 3509, 0,
	0, 3512, 0, 2165, 2165, 2165, 0, 0, 0, 0,
	0, 0, 3632, 0, 3631, 0, 0, 0, 0, 3636,
	0, 3638, 0, 3584, 3585, 3612, 0, 3588, 0, 0,
	3642, 3211, 0, 1025, 0, 3646, 0, 0, 0, 0,
	3655, 0, 0, 0, 0, 3654, 0, 3656, 0, 0,
	0, 0, 1021, 0, 0, 0, 0, 0, 0, 3208,
	0, 3662, 3201, 0, 3664, 3665, 3667, 3668, 3660, 1023,
	3661, 0, 0, 1609, 3671, 0, 0, 3199, 2169, 2169,
	0, 0, 0, 3203, 1023, 0, 0, 0, 0, 0,
	0, 3647, 3648, 1022, 0, 0, 0, 0, 0, 0,
	0, 1022, 3209, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1023, 1022, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3669, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2169, 2169,
	2169, 2169, 2169, 2169, 2169, 2169, 2169, 2169, 2169, 2169,
	2169, 2169, 2169, 2169, 2169, 2169, 2169, 0, 2169, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1025,
	0, 0, 127, 212, 212, 0, 0, 1025, 59, 0,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1025, 0, 60, 122, 0, 0, 0, 0, 0, 212,
	0, 212, 0, 212, 0, 0, 64, 529, 842, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1878,
	0, 40, 124, 0, 0, 0, 0, 3204, 0, 0,
	0, 3205, 0, 0, 0, 0, 39, 0, 70, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1023, 0, 0, 0, 0, 0, 42, 0,
	0, 576, 0, 43, 0, 699, 0, 0, 76, 0,
	3207, 125, 212, 0, 1195, 212, 0, 41, 87, 0,
	0, 0, 3210, 77, 84, 1021, 1021, 0, 576, 0,
	59, 0, 0, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 212, 212, 60, 212, 0, 212, 0, 212,
	44, 212, 0, 0, 0, 0, 0, 0, 64, 0,
	0, 0, 0, 1173, 0, 1958, 0, 78, 1959, 0,
	1960, 2165, 2165, 0, 0, 0, 0, 0, 0, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	560, 0, 1173, 0, 0, 0, 576, 0, 0, 212,
	0, 1173, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 0, 3206, 0, 0, 0,
	87, 0, 0, 0, 854, 77, 84, 0, 0, 0,
	0, 0, 2592, 2593, 0, 2610, 2611, 2612, 854, 0,
	0, 2165, 2165, 2165, 2165, 2165, 2165, 2165, 2165, 2165,
	2165, 2165, 2165, 2165, 2165, 2165, 2165, 2165, 2165, 2165,
	0, 2165, 0, 0, 0, 0, 79, 2592, 2593, 78,
	2610, 2611, 2612, 0, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2888, 1021, 0, 0,
	0, 0, 0, 56, 0, 0, 2607, 0, 48, 150,
	82, 0, 83, 0, 46, 0, 0, 1173, 126, 0,
	0, 0, 0, 0, 47, 1173, 0, 0, 0, 0,
	0, 184, 0, 0, 0, 0, 0, 0, 2528, 2529,
	0, 2607, 0, 51, 0, 1023, 1023, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 123, 0, 529,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2249,
	0, 186, 0, 0, 212, 0, 0, 0, 0, 0,
	0, 2598, 0, 0, 0, 0, 0, 0, 79, 0,
	0, 529, 0, 0, 121, 0, 0, 0, 212, 0,
	529, 0, 0, 212, 0, 0, 0, 154, 0, 0,
	0, 0, 0, 0, 0, 185, 2598, 0, 0, 0,
	0, 150, 82, 0, 83, 178, 0, 0, 0, 0,
	0, 0, 0, 179, 0, 0, 0, 0, 0, 2615,
	2616, 2617, 0, 184, 0, 0, 0, 1173, 0, 0,
	1173, 0, 0, 1021, 153, 694, 0, 3, 0, 120,
	0, 1021, 0, 0, 0, 842, 2608, 0, 2613, 842,
	0, 0, 0, 0, 1021, 0, 0, 0, 0, 0,
	0, 0, 0, 186, 0, 545, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2608, 0, 0, 0, 1213, 121, 1217, 0, 1223,
	0, 0, 0, 0, 0, 0, 0, 1023, 0, 154,
	0, 1173, 0, 0, 0, 0, 0, 185, 2291, 0,
	0, 0, 1173, 0, 0, 0, 212, 178, 0, 0,
	0, 0, 0, 0, 0, 179, 0, 212, 0, 0,
	2169, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 2609, 0, 0, 0, 153, 0, 0, 2592,
	2593, 0, 2610, 2611, 2612, 0, 212, 0, 0, 0,
	0, 0, 212, 2353, 0, 0, 0, 0, 2887, 0,
	0, 0, 0, 2169, 1344, 0, 0, 2609, 0, 0,
	0, 1347, 0, 0, 0, 0, 0, 0, 212, 0,
	1211, 0, 0, 212, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2388, 0, 0, 0, 0, 0, 0,
	0, 0, 2291, 2607, 529, 0, 2408, 0, 0, 0,
	0, 0, 212, 0, 0, 212, 0, 212, 0, 212,
	1173, 0, 0, 0, 1195, 1397, 0, 0, 0, 0,
	0, 0, 0, 0, 2429, 699, 0, 2291, 2291, 0,
	0, 0, 0, 1023, 0, 2604, 2605, 2606, 212, 0,
	0, 1023, 2603, 2601, 2602, 2594, 2595, 2596, 2597, 2599,
	2600, 212, 1195, 212, 1023, 0, 1211, 0, 1211, 2169,
	0, 1195, 0, 1195, 0, 1195, 0, 0, 2598, 0,
	2604, 2605, 2606, 0, 0, 0, 0, 2603, 2601, 2602,
	2594, 2595, 2596, 2597, 2599, 2600, 212, 212, 212, 212,
	1195, 212, 0, 212, 0, 0, 0, 0, 0, 1520,
	1521, 1522, 1523, 1524, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2613, 0, 0, 0, 0, 0, 212, 0, 0, 1540,
	1467, 1468, 0, 0, 0, 1553, 1510, 1511, 1512, 0,
	0, 0, 0, 1467, 1468, 0, 0, 2879, 2880, 0,
	1498, 0, 0, 2608, 0, 0, 0, 1470, 0, 0,
	0, 0, 1516, 1498, 0, 0, 0, 0, 0, 0,
	1470, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2165, 0, 1469, 0, 0, 0, 1173,
	0, 0, 0, 0, 1489, 0, 0, 0, 1469, 0,
	0, 0, 1486, 0, 1173, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 1486, 2592, 2593, 0, 2610,
	2611, 2612, 0, 0, 0, 1211, 2165, 2938, 2939, 2940,
	2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950,
	2951, 2952, 2953, 2954, 2955, 2956, 0, 2960, 0, 2609,
	0, 0, 0, 0, 1603, 1603, 1603, 0, 0, 1492,
	1493, 1494, 1495, 0, 0, 0, 0, 0, 0, 1475,
	0, 0, 1492, 1493, 1494, 1495, 0, 0, 0, 0,
	2607, 0, 1475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 0, 0, 1517, 0, 0, 0,
	0, 1497, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 212, 1497, 1499, 0, 0, 0, 0,
	0, 0, 1173, 842, 1173, 0, 0, 0, 212, 0,
	1484, 1485, 2165, 529, 0, 0, 0, 0, 0, 0,
	0, 529, 0, 1484, 1485, 1505, 0, 0, 529, 0,
	0, 529, 529, 0, 1490, 2598, 0, 212, 0, 0,
	0, 0, 2604, 2605, 2606, 0, 0, 1490, 1211, 2603,
	2601, 2602, 2594, 2595, 2596, 2597, 2599, 2600, 0, 0,
	1173, 0, 2614, 1211, 0, 0, 1173, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2291, 2291, 212, 0, 0, 2613, 2291, 1173,
	0, 2718, 0, 0, 0, 0, 0, 0, 0, 2291,
	2718, 2291, 2718, 2718, 0, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 212, 212, 212, 0, 0,
	2608, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	1491, 0, 0, 0, 0, 1173, 0, 212, 0, 0,
	1195, 0, 0, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1508, 0, 0, 0,
	0, 2773, 1173, 0, 2775, 2291, 0, 0, 0, 0,
	0, 0, 0, 0, 212, 0, 0, 0, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2388, 0, 0, 1195, 0, 212, 0, 0, 2291,
	1173, 529, 0, 0, 0, 0, 0, 0, 2291, 0,
	0, 0, 1173, 0, 0, 0, 2609, 212, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 212, 2388, 0, 854, 2388, 1509, 1487, 1483, 0,
	1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0,
	1487, 1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474,
	1476, 1477, 0, 0, 0, 0, 2861, 0, 1173, 1195,
	212, 0, 212, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2604,
	2605, 2606, 0, 0, 0, 0, 2603, 2601, 2602, 2594,
	2595, 2596, 2597, 2599, 2600, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2919, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1986, 0, 1990, 0, 0, 0, 0, 0, 2002, 0,
	0, 0, 0, 0, 0, 2011, 2012, 2013, 2014, 2015,
	2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025,
	2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035,
	2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045,
	0, 2051, 0, 2053, 2054, 2055, 2056, 0, 0, 212,
	212, 0, 0, 0, 0, 0, 0, 0, 1173, 0,
	529, 0, 854, 2080, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 529, 0, 0, 1540, 3314,
	0, 0, 2105, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2138, 2139, 2140, 2141, 2142, 2143, 2144,
	0, 0, 3340, 0, 2161, 0, 2172, 2174, 2179, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 576, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3067, 212, 212, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	212, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2291, 212, 0, 0, 0, 0, 0, 0, 3424, 0,
	0, 0, 0, 0, 0, 2429, 2429, 0, 0, 942,
	0, 699, 699, 2291, 0, 0, 2388, 2388, 0, 0,
	699, 2291, 0, 0, 0, 0, 0, 0, 0, 212,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 0, 0, 0, 0, 0, 0,
	3153, 0, 213, 0, 0, 64, 0, 0, 0, 1467,
	1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 1498,
	0, 0, 0, 0, 0, 0, 1470, 70, 2355, 0,
	2357, 1516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 0, 0,
	0, 0, 0, 1211, 1469, 212, 0, 76, 0, 0,
	0, 0, 0, 1489, 0, 0, 0, 87, 212, 0,
	0, 1486, 77, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2291, 2291, 2291, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1211, 0, 0,
	0, 0, 0, 0, 2291, 0, 2718, 0, 0, 1211,
	1211, 212, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 908, 212, 212, 0, 0, 0, 0, 1492, 1493,
	1494, 1495, 0, 0, 0, 2291, 0, 0, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 212, 0, 0, 0, 2470, 0, 0, 0, 0,
	0, 211, 1507, 0, 0, 1517, 0, 0, 0, 0,
	1497, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 0, 1211, 0, 0, 0, 0, 0,
	1513, 0, 1514, 0, 0, 0, 0, 1520, 1521, 1484,
	1485, 0, 0, 0, 604, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 79, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1515, 0, 0, 0, 0, 0, 0, 0, 0,
	2511, 2512, 0, 0, 0, 0, 2518, 1504, 150, 82,
	0, 83, 0, 0, 0, 0, 0, 0, 0, 2291,
	0, 2718, 0, 0, 3334, 2532, 2533, 0, 0, 0,
	184, 2105, 212, 0, 0, 0, 0, 0, 0, 0,
	2540, 0, 694, 0, 0, 0, 120, 0, 0, 0,
	0, 1496, 0, 0, 576, 0, 0, 0, 1024, 0,
	0, 0, 0, 0, 0, 0, 2560, 0, 0, 1491,
	186, 0, 0, 0, 0, 3334, 0, 0, 0, 2291,
	0, 2575, 0, 0, 0, 0, 3388, 0, 0, 0,
	0, 0, 0, 121, 0, 1508, 0, 0, 1211, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 0, 0,
	0, 0, 0, 0, 185, 0, 0, 0, 0, 212,
	212, 0, 0, 0, 178, 0, 0, 0, 0, 2179,
	2179, 2179, 179, 0, 0, 0, 0, 0, 0, 0,
	0, 2919, 0, 0, 1603, 0, 0, 529, 0, 0,
	0, 0, 2646, 153, 0, 0, 0, 3334, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2592, 2593,
	0, 2610, 2611, 2612, 0, 0, 0, 0, 0, 1506,
	0, 0, 1481, 1482, 1488, 1509, 1487, 1483, 0, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0, 0,
	0, 0, 3161, 0, 0, 0, 3160, 0, 0, 0,
	0, 212, 0, 0, 0, 0, 0, 842, 0, 0,
	2718, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 842, 2607, 0, 1211, 0, 1211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 1093, 213, 213,
	1093, 0, 1093, 213, 0, 0, 0, 2734, 0, 0,
	3497, 213, 0, 0, 0, 0, 1211, 212, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 212, 2291, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 212, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 1093, 213, 213, 0, 2598, 0, 0,
	0, 0, 0, 2919, 0, 0, 0, 0, 0, 213,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 0, 0, 0, 0,
	0, 213, 213, 213, 0, 0, 1093, 1093, 60, 0,
	0, 1093, 2291, 0, 0, 1093, 213, 213, 0, 2613,
	0, 0, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3334, 0, 0, 0, 0, 0, 0, 0,
	1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 0,
	0, 0, 2608, 0, 70, 0, 1211, 0, 2291, 1503,
	1498, 0, 0, 0, 0, 0, 1093, 1470, 0, 0,
	0, 0, 1516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 0, 0, 0, 213, 0,
	0, 0, 0, 0, 87, 1469, 0, 0, 0, 77,
	84, 0, 213, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 1486, 0, 0, 0, 0, 2002, 211, 0,
	211, 211, 0, 2874, 2875, 211, 0, 2878, 0, 0,
	0, 2881, 0, 604, 0, 0, 0, 0, 0, 0,
	2885, 0, 0, 78, 0, 0, 0, 0, 2609, 2892,
	0, 0, 2646, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	1493, 1494, 1495, 2912, 0, 0, 211, 211, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 2928, 2929, 0, 2930, 2931, 2932, 0, 0,
	2933, 0, 0, 1507, 2935, 0, 1517, 0, 0, 0,
	0, 1497, 1499, 211, 211, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 211, 211,
	0, 1513, 0, 1514, 0, 2963, 2964, 0, 0, 0,
	1484, 1485, 0, 0, 0, 0, 0, 0, 0, 0,
	2973, 0, 79, 0, 0, 1505, 0, 0, 0, 0,
	0, 2604, 2605, 2606, 1490, 2982, 0, 0, 2603, 2601,
	2602, 2594, 2595, 2596, 2597, 2599, 2600, 0, 0, 0,
	0, 0, 1515, 0, 0, 150, 82, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 59,
	211, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 0, 60, 211, 0, 0, 0, 3011, 694,
	0, 0, 0, 120, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 3020, 3023, 0, 0, 0, 213, 0,
	0, 0, 1496, 0, 0, 0, 0, 186, 0, 1093,
	0, 213, 213, 0, 0, 0, 0, 213, 3042, 70,
	1491, 0, 213, 0, 0, 0, 0, 0, 0, 0,
	121, 0, 0, 0, 1093, 0, 0, 0, 0, 0,
	0, 0, 0, 154, 0, 0, 1508, 0, 0, 76,
	0, 185, 0, 0, 0, 1093, 0, 0, 0, 87,
	0, 178, 0, 0, 77, 84, 0, 0, 0, 179,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1603, 0, 0, 0, 0,
	1338, 0, 0, 0, 3095, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 0, 1481, 1482, 1488, 1509, 1487, 1483, 0,
	1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0,
	3132, 3133, 0, 3498, 0, 0, 3137, 3138, 0, 0,
	0, 3141, 3142, 0, 0, 0, 0, 0, 3146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1093, 213, 3150, 0, 0,
	0, 0, 1093, 0, 3154, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1633, 0, 1024, 0, 0,
	211, 0, 0, 0, 0, 0, 0, 79, 0, 0,
	0, 0, 0, 211, 1633, 0, 0, 0, 0, 604,
	0, 213, 213, 1017, 604, 0, 0, 0, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	150, 82, 0, 83, 0, 0, 0, 213, 0, 213,
	0, 213, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 184, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 694, 0, 0, 0, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 3023, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 186, 0, 0, 0, 1093, 0, 1093, 0,
	1093, 0, 0, 0, 0, 0, 1093, 0, 0, 1093,
	213, 0, 0, 213, 0, 121, 0, 0, 0, 0,
	0, 0, 1093, 1093, 1093, 0, 0, 0, 154, 0,
	0, 213, 0, 0, 0, 0, 185, 0, 0, 0,
	213, 213, 0, 213, 0, 213, 178, 213, 0, 213,
	0, 0, 0, 0, 179, 0, 0, 0, 0, 0,
	0, 0, 0, 3023, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1336, 0, 213, 604, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3302, 3303,
	3304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 213, 0, 0,
	0, 0, 0, 3312, 3313, 0, 0, 0, 0, 0,
	0, 0, 0, 211, 211, 0, 0, 3320, 0, 1093,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 211, 0, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3023, 0,
	0, 0, 0, 0, 0, 217, 3357, 0, 0, 0,
	0, 0, 0, 0, 3363, 0, 0, 842, 0, 211,
	0, 0, 0, 0, 3370, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 211, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 597, 0, 0, 0,
	3023, 3023, 0, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 604, 211, 0, 211, 0, 211, 597, 211,
	0, 211, 0, 0, 0, 0, 0, 1467, 1468, 0,
	1500, 1501, 1502, 1510, 1511, 1512, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 1093, 211,
	0, 0, 0, 3436, 1470, 0, 3439, 0, 0, 1516,
	0, 213, 0, 0, 1093, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 211,
	0, 0, 1469, 0, 0, 0, 0, 0, 0, 0,
	0, 1489, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 3023, 0, 0, 3023, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 1492, 1493, 1494, 1495,
	0, 0, 0, 0, 0, 842, 1475, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1093, 0, 0, 0, 0, 0, 0, 0, 0,
	1507, 0, 0, 1517, 213, 0, 0, 0, 1497, 1499,
	3545, 3545, 3545, 0, 0, 213, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 3564,
	0, 1093, 0, 0, 0, 0, 0, 1484, 1485, 0,
	0, 0, 0, 0, 213, 1093, 0, 0, 1093, 0,
	213, 0, 1505, 0, 1024, 0, 0, 0, 0, 0,
	0, 1490, 0, 0, 0, 0, 3545, 0, 0, 0,
	1083, 0, 0, 0, 0, 0, 213, 1202, 1024, 0,
	0, 213, 0, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3023, 0, 3023, 0, 0, 0,
	213, 0, 0, 213, 0, 213, 0, 213, 0, 0,
	0, 0, 0, 1093, 1093, 1093, 0, 1093, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 1286, 0, 0, 213, 0, 0, 3545,
	0, 0, 0, 0, 0, 0, 0, 1491, 0, 213,
	0, 213, 0, 0, 0, 1310, 1310, 1310, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1342, 1343, 0, 1508, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 213, 213, 213, 0, 213,
	0, 213, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	0, 0, 0, 0, 213, 0, 0, 0, 0, 0,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1416, 0, 0, 0, 211, 0, 0, 0,
	0, 0, 604, 0, 0, 0, 0, 1506, 0, 0,
	1481, 1482, 1488, 1509, 1487, 1483, 0, 1480, 1478, 1479,
	1471, 1472, 1473, 1474, 1476, 1477, 0, 0, 211, 0,
	0, 0, 0, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 211, 0, 0, 211, 0, 211, 0, 211,
	0, 0, 0, 1089, 0, 0, 1191, 0, 1089, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 912, 0, 0, 0, 211, 0,
	0, 0, 0, 0, 0, 0, 877, 89, 0, 0,
	0, 211, 0, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1191, 1191,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 1468, 0, 211, 211, 211, 211,
	0, 211, 0, 211, 0, 0, 0, 0, 0, 0,
	0, 0, 1093, 1498, 0, 0, 0, 0, 0, 0,
	1470, 0, 1191, 1191, 0, 0, 0, 1191, 0, 0,
	0, 1191, 0, 0, 89, 0, 211, 0, 0, 1467,
	1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 1469, 0,
	0, 1093, 0, 0, 0, 0, 0, 1489, 1503, 1498,
	1093, 0, 0, 0, 0, 1486, 1470, 0, 0, 0,
	0, 1516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1191, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1640, 0, 1469, 0, 0, 0, 0, 0,
	0, 816, 213, 1489, 2882, 1649, 0, 0, 0, 0,
	837, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1492, 1493, 1494, 1495, 0, 0, 0, 0,
	0, 0, 1475, 213, 213, 213, 0, 0, 0, 0,
	0, 0, 213, 1012, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 1093, 0, 0, 0,
	0, 0, 0, 0, 1497, 1499, 1093, 0, 1492, 1493,
	1494, 1495, 0, 0, 1093, 0, 0, 0, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 1484, 1485, 1093, 213, 0, 1093, 1093,
	1093, 0, 1507, 0, 0, 1517, 0, 0, 0, 0,
	1497, 1499, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 0, 1024, 0, 0, 0, 0, 0, 0,
	1513, 0, 1514, 0, 0, 213, 213, 0, 1024, 1484,
	1485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1093, 1093, 0, 1505, 0, 0, 0, 0, 213,
	0, 0, 0, 1490, 0, 0, 0, 1633, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 1093, 1504, 213, 1093,
	213, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1491, 211, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1840, 0, 213, 0, 0,
	0, 0, 1852, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 211, 211, 211, 0, 0,
	0, 1286, 0, 1868, 1633, 1868, 0, 0, 0, 1491,
	0, 0, 0, 0, 0, 1089, 0, 211, 0, 0,
	1093, 0, 0, 597, 0, 0, 0, 0, 597, 0,
	0, 1093, 0, 0, 0, 1508, 0, 0, 0, 0,
	1191, 1202, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 0, 0, 211, 0,
	0, 1089, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1852, 0, 1024, 1914, 0, 0,
	1487, 1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474,
	1476, 1477, 0, 0, 0, 1928, 0, 211, 211, 0,
	0, 0, 0, 0, 0, 1938, 0, 1940, 0, 1942,
	0, 1944, 0, 1945, 0, 0, 0, 0, 0, 1506,
	0, 211, 1481, 1482, 1488, 1509, 1487, 1483, 0, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0, 0,
	0, 1962, 2580, 0, 0, 0, 2581, 0, 0, 1093,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 0, 211, 0, 0, 0, 0, 0, 0, 0,
	0, 1310, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 1192, 0, 1090, 0, 211,
	0, 1191, 0, 0, 0, 0, 0, 0, 1089, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 89,
	0, 89, 0, 89, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1192, 1192, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 213, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 0, 0,
	0, 1192, 1192, 0, 0, 0, 1192, 0, 0, 0,
	1192, 0, 0, 0, 0, 0, 0, 0, 837, 89,
	89, 0, 0, 0, 0, 1093, 1093, 1093, 89, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	0, 1093, 1191, 0, 1191, 0, 1191, 213, 1093, 1024,
	1024, 0, 1191, 0, 0, 1191, 0, 0, 0, 0,
	0, 1192, 0, 1093, 0, 0, 0, 0, 1191, 1191,
	1191, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2234, 597, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 1468, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1498, 0, 0, 0, 0, 0,
	0, 1470, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	0, 0, 0, 0, 0, 0, 816, 0, 1489, 0,
	0, 0, 0, 0, 0, 1089, 1486, 0, 0, 0,
	0, 1093, 0, 1093, 1530, 211, 211, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	211, 0, 1539, 0, 0, 0, 1545, 0, 0, 0,
	0, 0, 0, 0, 0, 2877, 0, 0, 0, 0,
	0, 1024, 0, 0, 0, 0, 0, 0, 0, 213,
	0, 0, 0, 1492, 1493, 1494, 1495, 0, 0, 1093,
	213, 213, 1093, 1475, 0, 1093, 0, 1093, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1202, 211,
	1089, 0, 0, 0, 0, 0, 0, 0, 1093, 213,
	0, 0, 0, 1093, 0, 1497, 1499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2371, 0, 0, 0, 0, 1852, 0, 0, 0, 0,
	0, 0, 0, 0, 1484, 1485, 0, 0, 0, 0,
	0, 0, 0, 0, 1093, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2410, 0, 0, 1310, 1490, 1310,
	0, 1310, 0, 0, 1089, 0, 0, 89, 0, 0,
	1631, 1093, 1634, 0, 1090, 0, 0, 0, 0, 0,
	1089, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2455, 0, 0, 0, 0, 0, 0, 0, 0, 1192,
	0, 0, 0, 2460, 0, 2463, 0, 1024, 0, 1093,
	0, 0, 0, 0, 0, 1024, 0, 0, 0, 0,
	1090, 1093, 0, 0, 0, 0, 0, 0, 1633, 0,
	213, 0, 0, 0, 0, 0, 1496, 0, 2481, 1202,
	2483, 1202, 0, 2486, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1191, 0, 0,
	0, 211, 0, 0, 0, 0, 0, 0, 2508, 0,
	0, 0, 211, 211, 0, 0, 0, 1093, 0, 0,
	1093, 0, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 211, 0, 0, 0, 0, 0, 213, 213, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1191, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1192, 1089, 0, 0, 1191, 0, 0, 1090, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1487, 1483, 0, 1480, 1478, 1479, 1471, 1472, 1473,
	1474, 1476, 1477, 1467, 1468, 0, 1500, 1501, 1502, 1510,
	1511, 1512, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1503, 1498, 0, 0, 0, 0, 0, 213,
	1470, 0, 1093, 0, 0, 1516, 0, 0, 0, 0,
	0, 0, 1093, 1093, 0, 0, 0, 0, 1093, 1191,
	1191, 1191, 0, 1191, 0, 0, 0, 0, 1469, 0,
	0, 0, 211, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 0, 1093, 0, 0,
	0, 0, 0, 0, 0, 213, 0, 0, 0, 0,
	0, 1192, 0, 1192, 0, 1192, 213, 0, 0, 0,
	0, 1192, 0, 837, 1192, 837, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1192, 1192, 1192,
	0, 0, 1492, 1493, 1494, 1495, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 0, 0, 0, 211,
	211, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 0, 0, 1517,
	0, 0, 0, 0, 1497, 1499, 2710, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1513, 0, 1514, 0, 0, 0,
	0, 0, 0, 1484, 1485, 0, 0, 2747, 2749, 2371,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 0, 0, 1090, 0, 816, 0, 0, 816,
	816, 211, 0, 0, 0, 1515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 2787, 0, 0, 0,
	2791, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2069, 0, 0, 211, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 211, 837, 1202,
	1202, 0, 0, 0, 0, 0, 0, 0, 211, 1090,
	0, 1539, 0, 1491, 0, 1539, 0, 0, 0, 0,
	0, 0, 0, 2842, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1089, 1508,
	1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1503,
	1498, 0, 2864, 0, 1202, 0, 0, 1470, 0, 0,
	0, 0, 1516, 0, 0, 0, 0, 1089, 0, 1012,
	0, 0, 0, 1090, 0, 0, 1089, 0, 0, 0,
	0, 2872, 0, 0, 0, 1469, 0, 0, 0, 1090,
	0, 0, 0, 1634, 1489, 0, 0, 0, 0, 0,
	0, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1506, 89, 0, 1481, 1482, 1488, 1509,
	1487, 1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474,
	1476, 1477, 0, 0, 0, 0, 2101, 0, 0, 0,
	2102, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	1493, 1494, 1495, 0, 0, 0, 0, 0, 0, 1475,
	0, 0, 1191, 0, 0, 0, 1192, 0, 0, 0,
	0, 0, 1089, 0, 0, 0, 0, 0, 0, 0,
	1089, 0, 0, 1507, 0, 0, 1517, 0, 0, 0,
	0, 1497, 1499, 0, 0, 0, 1090, 0, 0, 0,
	0, 1191, 0, 0, 1191, 1191, 1191, 0, 0, 0,
	0, 1513, 0, 1514, 0, 0, 0, 0, 0, 0,
	1484, 1485, 0, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 680, 0, 1505, 1192, 0, 0, 0,
	0, 0, 0, 0, 1490, 0, 0, 0, 0, 0,
	1090, 0, 0, 1192, 0, 89, 662, 1191, 1191, 0,
	0, 0, 1515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 0, 89, 0, 1191, 0, 1504, 0,
	1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 663,
	0, 0, 0, 0, 0, 0, 0, 0, 664, 1503,
	1498, 0, 1089, 0, 0, 1089, 0, 1470, 0, 0,
	0, 0, 1516, 0, 89, 665, 89, 0, 0, 0,
	0, 0, 1496, 0, 0, 0, 0, 0, 1192, 1192,
	1192, 685, 1192, 0, 0, 1469, 0, 0, 0, 0,
	1491, 0, 0, 89, 1489, 0, 666, 3068, 0, 0,
	0, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3077, 0, 0, 667, 1508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1089, 0, 0, 0,
	0, 0, 0, 0, 0, 668, 0, 1089, 669, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	1493, 1494, 1495, 0, 0, 684, 0, 0, 0, 1475,
	0, 3119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 0, 0, 1517, 0, 0, 0,
	1506, 1497, 1499, 1481, 1482, 1488, 1509, 1487, 1483, 0,
	1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0,
	0, 1513, 0, 1514, 0, 0, 0, 3159, 0, 0,
	1484, 1485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 2069, 0, 0,
	0, 0, 0, 0, 1490, 1089, 0, 0, 0, 0,
	671, 0, 0, 0, 0, 0, 0, 0, 1539, 0,
	0, 0, 1515, 0, 0, 0, 0, 688, 672, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 687, 0, 0, 0,
	0, 0, 0, 673, 0, 0, 674, 0, 0, 0,
	0, 0, 682, 0, 0, 0, 0, 0, 0, 675,
	0, 0, 1496, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1491, 1467, 1468, 3229, 1500, 1501, 1502, 1510, 1511, 1512,
	676, 683, 0, 0, 2371, 0, 0, 0, 677, 0,
	1503, 1498, 0, 0, 0, 0, 1508, 1090, 1470, 0,
	1191, 679, 0, 1516, 0, 0, 678, 0, 1012, 0,
	0, 0, 0, 3266, 0, 0, 0, 0, 686, 0,
	0, 0, 0, 1012, 0, 0, 1469, 0, 0, 681,
	0, 1191, 1191, 1191, 0, 1489, 1090, 0, 0, 0,
	0, 0, 0, 1486, 0, 1090, 0, 1191, 0, 0,
	0, 0, 0, 0, 1089, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1089,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 0, 1481, 1482, 1488, 1509, 1487, 1483, 0,
	1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0,
	1492, 1493, 1494, 1495, 0, 0, 0, 2890, 0, 0,
	1475, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 89, 89, 0, 0, 89, 0, 0,
	0, 0, 0, 0, 1507, 0, 0, 1517, 0, 0,
	0, 1192, 1497, 1499, 3341, 0, 0, 0, 0, 0,
	0, 1090, 0, 0, 0, 0, 0, 89, 89, 1090,
	0, 89, 1513, 0, 1514, 0, 0, 0, 0, 0,
	0, 1484, 1485, 0, 0, 0, 0, 0, 0, 0,
	1192, 0, 0, 1192, 1192, 1192, 1505, 1089, 0, 1089,
	0, 0, 0, 0, 0, 1490, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1012, 0, 1515, 837, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1504,
	0, 3415, 1202, 0, 0, 0, 1192, 1192, 0, 0,
	89, 89, 0, 0, 0, 1089, 0, 0, 1191, 0,
	0, 1089, 0, 1191, 0, 1192, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1496, 1089, 0, 0, 0, 0, 1191,
	0, 1090, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1467, 1468, 0, 1500, 1501,
	1502, 1510, 1511, 1512, 0, 0, 0, 1508, 0, 0,
	1089, 0, 0, 3464, 1503, 1498, 0, 0, 0, 0,
	0, 0, 1470, 0, 0, 0, 0, 1516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 0,
	0, 0, 0, 0, 0, 1090, 0, 0, 0, 0,
	1469, 0, 0, 0, 0, 0, 1090, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 0, 1486, 0, 3503,
	0, 0, 0, 0, 0, 1089, 0, 0, 0, 3518,
	0, 0, 0, 0, 0, 0, 0, 1089, 0, 0,
	3528, 1506, 0, 0, 1481, 1482, 1488, 1509, 1487, 1483,
	0, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477,
	0, 0, 0, 0, 0, 0, 0, 0, 2583, 0,
	0, 0, 0, 0, 1492, 1493, 1494, 1495, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1089, 1012, 1012, 1191, 0, 1507, 0,
	0, 1517, 0, 0, 0, 0, 1497, 1499, 0, 0,
	0, 0, 0, 0, 1090, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1513, 0, 1514, 0,
	0, 0, 0, 0, 0, 1484, 1485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1191, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1191, 1191,
	0, 0, 0, 0, 1191, 0, 0, 1496, 0, 1192,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1012, 0, 0, 0,
	1192, 1192, 1192, 1089, 0, 0, 0, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 1192, 0, 0, 0,
	0, 0, 0, 1090, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 1090, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1503,
	1498, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	0, 0, 1516, 0, 0, 1506, 0, 0, 1481, 1482,
	1488, 1509, 1487, 1483, 0, 1480, 1478, 1479, 1471, 1472,
	1473, 1474, 1476, 1477, 0, 1469, 0, 0, 0, 0,
	0, 0, 2582, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	0, 1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512,
	0, 0, 1012, 0, 0, 0, 1090, 0, 1090, 0,
	1012, 1498, 0, 0, 0, 0, 0, 0, 1470, 0,
	0, 0, 0, 1516, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	1493, 1494, 1495, 0, 0, 0, 1469, 0, 0, 1475,
	0, 0, 0, 0, 0, 1489, 0, 0, 0, 0,
	0, 0, 0, 1486, 1090, 0, 0, 1192, 0, 0,
	1090, 0, 1192, 1507, 0, 0, 1517, 0, 0, 0,
	0, 1497, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 1090, 0, 0, 0, 89, 1192, 0,
	0, 1513, 0, 1514, 0, 0, 0, 0, 0, 0,
	1484, 1485, 0, 0, 0, 0, 0, 0, 89, 0,
	1492, 1493, 1494, 1495, 0, 1505, 0, 0, 0, 0,
	1475, 0, 0, 0, 1490, 0, 0, 0, 0, 1090,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 0, 1507, 0, 0, 1517, 0, 0,
	0, 0, 1497, 1499, 0, 0, 1090, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1513, 0, 1514, 0, 0, 0, 0, 0,
	0, 1484, 1485, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1090, 0, 1505, 0, 0, 0,
	0, 0, 1496, 0, 0, 1490, 1090, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1491, 0, 0, 1515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1508, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1090, 0, 0, 1192, 0, 0, 0, 0,
	0, 0, 0, 1496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2069, 0, 0,
	0, 1491, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1508, 0, 0,
	1506, 0, 0, 1481, 1482, 1488, 1509, 1487, 1483, 0,
	1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 2579, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1192, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1192, 1192, 0,
	0, 1506, 0, 1192, 1481, 1482, 1488, 1509, 1487, 1483,
	0, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1087, 0, 1090, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 1094, 226, 1095, 1096, 1097, 89, 1098, 480,
	1099, 1100, 1101, 1102, 227, 229, 228, 230, 231, 481,
	482, 232, 483, 233, 234, 484, 1103, 235, 236, 237,
	238, 239, 240, 1104, 1105, 241, 485, 486, 487, 1106,
	242, 488, 1107, 1092, 1108, 243, 244, 245, 246, 247,
	248, 0, 1109, 250, 251, 252, 249, 1110, 253, 0,
	254, 255, 256, 1111, 963, 257, 258, 1112, 1113, 1115,
	1114, 1116, 1117, 1118, 259, 260, 261, 262, 263, 264,
	489, 490, 1119, 265, 1120, 267, 266, 1121, 268, 1122,
	1123, 269, 270, 271, 1124, 272, 1125, 273, 274, 1126,
	275, 491, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 492, 493, 1127, 218, 1128, 0, 0, 0, 0,
	286, 287, 288, 494, 289, 290, 0, 291, 1129, 292,
	1130, 1131, 964, 293, 294, 1132, 295, 495, 1133, 496,
	296, 1134, 297, 298, 299, 300, 497, 498, 499, 351,
	966, 301, 302, 1135, 303, 304, 305, 307, 0, 0,
	219, 306, 308, 315, 1136, 965, 309, 500, 311, 310,
	312, 313, 314, 501, 1137, 502, 1138, 316, 967, 503,
	968, 317, 318, 319, 969, 320, 321, 0, 0, 322,
	323, 324, 325, 1139, 327, 326, 1140, 328, 504, 970,
	329, 330, 971, 1141, 331, 332, 1142, 1143, 333, 334,
	335, 0, 336, 337, 339, 341, 338, 340, 342, 344,
	345, 343, 972, 346, 347, 349, 348, 1144, 220, 973,
	350, 1145, 505, 506, 352, 353, 1146, 354, 355, 356,
	1147, 1148, 358, 359, 360, 1149, 1150, 361, 362, 507,
	974, 363, 975, 508, 364, 357, 365, 366, 367, 368,
	369, 370, 371, 1151, 372, 373, 509, 374, 510, 375,
	1152, 376, 0, 377, 378, 379, 380, 381, 382, 511,
	383, 384, 1153, 385, 386, 387, 388, 389, 390, 0,
	392, 393, 394, 391, 395, 396, 397, 398, 1154, 399,
	976, 400, 401, 402, 403, 512, 404, 0, 405, 409,
	410, 411, 412, 413, 414, 415, 1155, 421, 422, 416,
	418, 419, 420, 417, 423, 424, 425, 1156, 426, 406,
	407, 427, 428, 977, 429, 430, 513, 431, 432, 1157,
	433, 434, 435, 436, 408, 437, 441, 442, 438, 439,
	440, 514, 1158, 444, 445, 443, 1159, 446, 447, 448,
	449, 450, 280, 451, 1160, 452, 515, 516, 517, 518,
	1161, 459, 1162, 453, 454, 519, 455, 520, 1163, 456,
	457, 458, 0, 460, 461, 1164, 1165, 462, 463, 464,
	465, 466, 468, 1166, 469, 1167, 467, 470, 471, 472,
	521, 522, 523, 1168, 474, 473, 524, 1169, 1170, 1171,
	1172, 475, 476, 525, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1087,
	0, 0, 0, 0, 0, 0, 0, 2221, 0, 0,
	0, 0, 0, 0, 0, 2222, 221, 222, 223, 224,
	225, 1094, 226, 1095, 1096, 1097, 0, 1098, 480, 1099,
	1100, 1101, 1102, 227, 229, 228, 230, 231, 481, 482,
	232, 483, 233, 234, 484, 1103, 235, 236, 237, 238,
	239, 240, 1104, 1105, 241, 485, 486, 487, 1106, 242,
	488, 1107, 1092, 1108, 243, 244, 245, 246, 247, 248,
	0, 1109, 250, 251, 252, 249, 1110, 253, 0, 254,
	255, 256, 1111, 963, 257, 258, 1112, 1113, 1115, 1114,
	1116, 1117, 1118, 259, 260, 261, 262, 263, 264, 489,
	490, 1119, 265, 1120, 267, 266, 1121, 268, 1122, 1123,
	269, 270, 271, 1124, 272, 1125, 273, 274, 1126, 275,
	491, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	492, 493, 1127, 218, 1128, 0, 0, 0, 0, 286,
	287, 288, 494, 289, 290, 0, 291, 1129, 292, 1130,
	1131, 964, 293, 294, 1132, 295, 495, 1133, 496, 296,
	1134, 297, 298, 299, 300, 497, 498, 499, 351, 966,
	301, 302, 1135, 303, 304, 305, 307, 0, 0, 219,
	306, 308, 315, 1136, 965, 309, 500, 311, 310, 312,
	313, 314, 501, 1137, 502, 1138, 316, 967, 503, 968,
	317, 318, 319, 969, 320, 321, 0, 0, 322, 323,
	324, 325, 1139, 327, 326, 1140, 328, 504, 970, 329,
	330, 971, 1141, 331, 332, 1142, 1143, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 345,
	343, 972, 346, 347, 349, 348, 1144, 220, 973, 350,
	1145, 505, 506, 352, 353, 1146, 354, 355, 356, 1147,
	1148, 358, 359, 360, 1149, 1150, 361, 362, 507, 974,
	363, 975, 508, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 1151, 372, 373, 509, 374, 510, 375, 1152,
	376, 0, 377, 378, 379, 380, 381, 382, 511, 383,
	384, 1153, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 1154, 399, 976,
	400, 401, 402, 403, 512, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 1155, 421, 422, 416, 418,
	419, 420, 417, 423, 424, 425, 1156, 426, 406, 407,
	427, 428, 977, 429, 430, 513, 431, 432, 1157, 433,
	434, 435, 436, 408, 437, 441, 442, 438, 439, 440,
	514, 1158, 444, 445, 443, 1159, 446, 447, 448, 449,
	450, 280, 451, 1160, 452, 515, 516, 517, 518, 1161,
	459, 1162, 453, 454, 519, 455, 520, 1163, 456, 457,
	458, 0, 460, 461, 1164, 1165, 462, 463, 464, 465,
	466, 468, 1166, 469, 1167, 467, 470, 471, 472, 521,
	522, 523, 1168, 474, 473, 524, 1169, 1170, 1171, 1172,
	475, 476, 525, 477, 478, 479, 0, 0, 0, 0,
	1087, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3185, 221, 222, 223,
	224, 225, 1094, 226, 1095, 1096, 1097, 0, 1098, 480,
	1099, 1100, 1101, 1102, 227, 229, 228, 230, 231, 481,
	482, 232, 483, 233, 234, 484, 1103, 235, 236, 237,
	238, 239, 240, 1104, 1105, 241, 485, 486, 487, 1106,
	242, 488, 1107, 1092, 1108, 243, 244, 245, 246, 247,
	248, 0, 1109, 250, 251, 252, 249, 1110, 253, 0,
	254, 255, 256, 1111, 963, 257, 258, 1112, 1113, 1115,
	1114, 1116, 1117, 1118, 259, 260, 261, 262, 263, 264,
	489, 490, 1119, 265, 1120, 267, 266, 1121, 268, 1122,
	1123, 269, 270, 271, 1124, 272, 1125, 273, 274, 1126,
	275, 491, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 492, 493, 1127, 218, 1128, 0, 0, 0, 0,
	286, 287, 288, 494, 289, 290, 0, 291, 1129, 292,
	1130, 1131, 964, 293, 294, 1132, 295, 495, 1133, 496,
	296, 1134, 297, 298, 299, 300, 497, 498, 499, 351,
	966, 301, 302, 1135, 303, 304, 305, 307, 0, 0,
	219, 306, 308, 315, 1136, 965, 309, 500, 311, 310,
	312, 313, 314, 501, 1137, 502, 1138, 316, 967, 503,
	968, 317, 318, 319, 969, 320, 321, 0, 0, 322,
	323, 324, 325, 1139, 327, 326, 1140, 328, 504, 970,
	329, 330, 971, 1141, 331, 332, 1142, 1143, 333, 334,
	335, 0, 336, 337, 339, 341, 338, 340, 342, 344,
	345, 343, 972, 346, 347, 349, 348, 1144, 220, 973,
	350, 1145, 505, 506, 352, 353, 1146, 354, 355, 356,
	1147, 1148, 358, 359, 360, 1149, 1150, 361, 362, 507,
	974, 363, 975, 508, 364, 357, 365, 366, 367, 368,
	369, 370, 371, 1151, 372, 373, 509, 374, 510, 375,
	1152, 376, 0, 377, 378, 379, 380, 381, 382, 511,
	383, 384, 1153, 385, 386, 387, 388, 389, 390, 0,
	392, 393, 394, 391, 395, 396, 397, 398, 1154, 399,
	976, 400, 401, 402, 403, 512, 404, 0, 405, 409,
	410, 411, 412, 413, 414, 415, 1155, 421, 422, 416,
	418, 419, 420, 417, 423, 424, 425, 1156, 426, 406,
	407, 427, 428, 977, 429, 430, 513, 431, 432, 1157,
	433, 434, 435, 436, 408, 437, 441, 442, 438, 439,
	440, 514, 1158, 444, 445, 443, 1159, 446, 447, 448,
	449, 450, 280, 451, 1160, 452, 515, 516, 517, 518,
	1161, 459, 1162, 453, 454, 519, 455, 520, 1163, 456,
	457, 458, 0, 460, 461, 1164, 1165, 462, 463, 464,
	465, 466, 468, 1166, 469, 1167, 467, 470, 471, 472,
	521, 522, 523, 1168, 474, 473, 524, 1169, 1170, 1171,
	1172, 475, 476, 525, 477, 478, 479, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3308, 0, 221, 222, 223, 224, 225, 1094,
	226, 1095, 1096, 1097, 0, 1098, 480, 1099, 1100, 1101,
	1102, 227, 229, 228, 230, 231, 481, 482, 232, 483,
	233, 234, 484, 1103, 235, 236, 237, 238, 239, 240,
	1104, 1105, 241, 485, 486, 487, 1106, 242, 488, 1107,
	1092, 1108, 243, 244, 245, 246, 247, 248, 0, 1109,
	250, 251, 252, 249, 1110, 253, 0, 254, 255, 256,
	1111, 963, 257, 258, 1112, 1113, 1115, 1114, 1116, 1117,
	1118, 259, 260, 261, 262, 263, 264, 489, 490, 1119,
	265, 1120, 267, 266, 1121, 268, 1122, 1123, 269, 270,
	271, 1124, 272, 1125, 273, 274, 1126, 275, 491, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 492, 493,
	1127, 218, 1128, 0, 0, 0, 0, 286, 287, 288,
	494, 289, 290, 0, 291, 1129, 292, 1130, 1131, 964,
	293, 294, 1132, 295, 495, 1133, 496, 296, 1134, 297,
	298, 299, 300, 497, 498, 499, 351, 966, 301, 302,
	1135, 303, 304, 305, 307, 0, 0, 219, 306, 308,
	315, 1136, 965, 309, 500, 311, 310, 312, 313, 314,
	501, 1137, 502, 1138, 316, 967, 503, 968, 317, 318,
	319, 969, 320, 321, 0, 0, 322, 323, 324, 325,
	1139, 327, 326, 1140, 328, 504, 970, 329, 330, 971,
	1141, 331, 332, 1142, 1143, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 345, 343, 972,
	346, 347, 349, 348, 1144, 220, 973, 350, 1145, 505,
	506, 352, 353, 1146, 354, 355, 356, 1147, 1148, 358,
	359, 360, 1149, 1150, 361, 362, 507, 974, 363, 975,
	508, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	1151, 372, 373, 509, 374, 510, 375, 1152, 376, 0,
	377, 378, 379, 380, 381, 382, 511, 383, 384, 1153,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 1154, 399, 976, 400, 401,
	402, 403, 512, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 1155, 421, 422, 416, 418, 419, 420,
	417, 423, 424, 425, 1156, 426, 406, 407, 427, 428,
	977, 429, 430, 513, 431, 432, 1157, 433, 434, 435,
	436, 408, 437, 441, 442, 438, 439, 440, 514, 1158,
	444, 445, 443, 1159, 446, 447, 448, 449, 450, 280,
	451, 1160, 452, 515, 516, 517, 518, 1161, 459, 1162,
	453, 454, 519, 455, 520, 1163, 456, 457, 458, 0,
	460, 461, 1164, 1165, 462, 463, 464, 465, 466, 468,
	1166, 469, 1167, 467, 470, 471, 472, 521, 522, 523,
	1168, 474, 473, 524, 1169, 1170, 1171, 1172, 475, 476,
	525, 477, 478, 479, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3236,
	0, 221, 222, 223, 224, 225, 1094, 226, 1095, 1096,
	1097, 0, 1098, 480, 1099, 1100, 1101, 1102, 227, 229,
	228, 230, 231, 481, 482, 232, 483, 233, 234, 484,
	1103, 235, 236, 237, 238, 239, 240, 1104, 1105, 241,
	485, 486, 487, 1106, 242, 488, 1107, 1092, 1108, 243,
	244, 245, 246, 247, 248, 0, 1109, 250, 251, 252,
	249, 1110, 253, 0, 254, 255, 256, 1111, 963, 257,
	258, 1112, 1113, 1115, 1114, 1116, 1117, 1118, 259, 260,
	261, 262, 263, 264, 489, 490, 1119, 265, 1120, 267,
	266, 1121, 268, 1122, 1123, 269, 270, 271, 1124, 272,
	1125, 273, 274, 1126, 275, 491, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 492, 493, 1127, 218, 1128,
	0, 0, 0, 0, 286, 287, 288, 494, 289, 290,
	0, 291, 1129, 292, 1130, 1131, 964, 293, 294, 1132,
	295, 495, 1133, 496, 296, 1134, 297, 298, 299, 300,
	497, 498, 499, 351, 966, 301, 302, 1135, 303, 304,
	305, 307, 0, 0, 219, 306, 308, 315, 1136, 965,
	309, 500, 311, 310, 312, 313, 314, 501, 1137, 502,
	1138, 316, 967, 503, 968, 317, 318, 319, 969, 320,
	321, 0, 0, 322, 323, 324, 325, 1139, 327, 326,
	1140, 328, 504, 970, 329, 330, 971, 1141, 331, 332,
	1142, 1143, 333, 334, 335, 0, 336, 337, 339, 341,
	338, 340, 342, 344, 345, 343, 972, 346, 347, 349,
	348, 1144, 220, 973, 350, 1145, 505, 506, 352, 353,
	1146, 354, 355, 356, 1147, 1148, 358, 359, 360, 1149,
	1150, 361, 362, 507, 974, 363, 975, 508, 364, 357,
	365, 366, 367, 368, 369, 370, 371, 1151, 372, 373,
	509, 374, 510, 375, 1152, 376, 0, 377, 378, 379,
	380, 381, 382, 511, 383, 384, 1153, 385, 386, 387,
	388, 389, 390, 0, 392, 393, 394, 391, 395, 396,
	397, 398, 1154, 399, 976, 400, 401, 402, 403, 512,
	404, 0, 405, 409, 410, 411, 412, 413, 414, 415,
	1155, 421, 422, 416, 418, 419, 420, 417, 423, 424,
	425, 1156, 426, 406, 407, 427, 428, 977, 429, 430,
	513, 431, 432, 1157, 433, 434, 435, 436, 408, 437,
	441, 442, 438, 439, 440, 514, 1158, 444, 445, 443,
	1159, 446, 447, 448, 449, 450, 280, 451, 1160, 452,
	515, 516, 517, 518, 1161, 459, 1162, 453, 454, 519,
	455, 520, 1163, 456, 457, 458, 0, 460, 461, 1164,
	1165, 462, 463, 464, 465, 466, 468, 1166, 469, 1167,
	467, 470, 471, 472, 521, 522, 523, 1168, 474, 473,
	524, 1169, 1170, 1171, 1172, 475, 476, 525, 477, 478,
	479, 1087, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3120, 0, 221, 222,
	223, 224, 225, 1094, 226, 1095, 1096, 1097, 0, 1098,
	480, 1099, 1100, 1101, 1102, 227, 229, 228, 230, 231,
	481, 482, 232, 483, 233, 234, 484, 1103, 235, 236,
	237, 238, 239, 240, 1104, 1105, 241, 485, 486, 487,
	1106, 242, 488, 1107, 1092, 1108, 243, 244, 245, 246,
	247, 248, 0, 1109, 250, 251, 252, 249, 1110, 253,
	0, 254, 255, 256, 1111, 963, 257, 258, 1112, 1113,
	1115, 1114, 1116, 1117, 1118, 259, 260, 261, 262, 263,
	264, 489, 490, 1119, 265, 1120, 267, 266, 1121, 268,
	1122, 1123, 269, 270, 271, 1124, 272, 1125, 273, 274,
	1126, 275, 491, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 492, 493, 1127, 218, 1128, 0, 0, 0,
	0, 286, 287, 288, 494, 289, 290, 0, 291, 1129,
	292, 1130, 1131, 964, 293, 294, 1132, 295, 495, 1133,
	496, 296, 1134, 297, 298, 299, 300, 497, 498, 499,
	351, 966, 301, 302, 1135, 303, 304, 305, 307, 0,
	0, 219, 306, 308, 315, 1136, 965, 309, 500, 311,
	310, 312, 313, 314, 501, 1137, 502, 1138, 316, 967,
	503, 968, 317, 318, 319, 969, 320, 321, 0, 0,
	322, 323, 324, 325, 1139, 327, 326, 1140, 328, 504,
	970, 329, 330, 971, 1141, 331, 332, 1142, 1143, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 345, 343, 972, 346, 347, 349, 348, 1144, 220,
	973, 350, 1145, 505, 506, 352, 353, 1146, 354, 355,
	356, 1147, 1148, 358, 359, 360, 1149, 1150, 361, 362,
	507, 974, 363, 975, 508, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 1151, 372, 373, 509, 374, 510,
	375, 1152, 376, 0, 377, 378, 379, 380, 381, 382,
	511, 383, 384, 1153, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 1154,
	399, 976, 400, 401, 402, 403, 512, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 1155, 421, 422,
	416, 418, 419, 420, 417, 423, 424, 425, 1156, 426,
	406, 407, 427, 428, 977, 429, 430, 513, 431, 432,
	1157, 433, 434, 435, 436, 408, 437, 441, 442, 438,
	439, 440, 514, 1158, 444, 445, 443, 1159, 446, 447,
	448, 449, 450, 280, 451, 1160, 452, 515, 516, 517,
	518, 1161, 459, 1162, 453, 454, 519, 455, 520, 1163,
	456, 457, 458, 0, 460, 461, 1164, 1165, 462, 463,
	464, 465, 466, 468, 1166, 469, 1167, 467, 470, 471,
	472, 521, 522, 523, 1168, 474, 473, 524, 1169, 1170,
	1171, 1172, 475, 476, 525, 477, 478, 479, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2915, 0, 221, 222, 223, 224, 225,
	1094, 226, 1095, 1096, 1097, 0, 1098, 480, 1099, 1100,
	1101, 1102, 227, 229, 228, 230, 231, 481, 482, 232,
	483, 233, 234, 484, 1103, 235, 236, 237, 238, 239,
	240, 1104, 1105, 241, 485, 486, 487, 1106, 242, 488,
	1107, 1092, 1108, 243, 244, 245, 246, 247, 248, 0,
	1109, 250, 251, 252, 249, 1110, 253, 0, 254, 255,
	256, 1111, 963, 257, 258, 1112, 1113, 1115, 1114, 1116,
	1117, 1118, 259, 260, 261, 262, 263, 264, 489, 490,
	1119, 265, 1120, 267, 266, 1121, 268, 1122, 1123, 269,
	270, 271, 1124, 272, 1125, 273, 274, 1126, 275, 491,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 492,
	493, 1127, 218, 1128, 0, 0, 0, 0, 286, 287,
	288, 494, 289, 290, 0, 291, 1129, 292, 1130, 1131,
	964, 293, 294, 1132, 295, 495, 1133, 496, 296, 1134,
	297, 298, 299, 300, 497, 498, 499, 351, 966, 301,
	302, 1135, 303, 304, 305, 307, 0, 0, 219, 306,
	308, 315, 1136, 965, 309, 500, 311, 310, 312, 313,
	314, 501, 1137, 502, 1138, 316, 967, 503, 968, 317,
	318, 319, 969, 320, 321, 0, 0, 322, 323, 324,
	325, 1139, 327, 326, 1140, 328, 504, 970, 329, 330,
	971, 1141, 331, 332, 1142, 1143, 333, 334, 335, 0,
	336, 337, 339, 341, 338, 340, 342, 344, 345, 343,
	972, 346, 347, 349, 348, 1144, 220, 973, 350, 1145,
	505, 506, 352, 353, 1146, 354, 355, 356, 1147, 1148,
	358, 359, 360, 1149, 1150, 361, 362, 507, 974, 363,
	975, 508, 364, 357, 365, 366, 367, 368, 369, 370,
	371, 1151, 372, 373, 509, 374, 510, 375, 1152, 376,
	0, 377, 378, 379, 380, 381, 382, 511, 383, 384,
	1153, 385, 386, 387, 388, 389, 390, 0, 392, 393,
	394, 391, 395, 396, 397, 398, 1154, 399, 976, 400,
	401, 402, 403, 512, 404, 0, 405, 409, 410, 411,
	412, 413, 414, 415, 1155, 421, 422, 416, 418, 419,
	420, 417, 423, 424, 425, 1156, 426, 406, 407, 427,
	428, 977, 429, 430, 513, 431, 432, 1157, 433, 434,
	435, 436, 408, 437, 441, 442, 438, 439, 440, 514,
	1158, 444, 445, 443, 1159, 446, 447, 448, 449, 450,
	280, 451, 1160, 452, 515, 516, 517, 518, 1161, 459,
	1162, 453, 454, 519, 455, 520, 1163, 456, 457, 458,
	0, 460, 461, 1164, 1165, 462, 463, 464, 465, 466,
	468, 1166, 469, 1167, 467, 470, 471, 472, 521, 522,
	523, 1168, 474, 473, 524, 1169, 1170, 1171, 1172, 475,
	476, 525, 477, 478, 479, 1087, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2907, 0, 221, 222, 223, 224, 225, 1094, 226, 1095,
	1096, 1097, 0, 1098, 480, 1099, 1100, 1101, 1102, 227,
	229, 228, 230, 231, 481, 482, 232, 483, 233, 234,
	484, 1103, 235, 236, 237, 238, 239, 240, 1104, 1105,
	241, 485, 486, 487, 1106, 242, 488, 1107, 1092, 1108,
	243, 244, 245, 246, 247, 248, 0, 1109, 250, 251,
	252, 249, 1110, 253, 0, 254, 255, 256, 1111, 963,
	257, 258, 1112, 1113, 1115, 1114, 1116, 1117, 1118, 259,
	260, 261, 262, 263, 264, 489, 490, 1119, 265, 1120,
	267, 266, 1121, 268, 1122, 1123, 269, 270, 271, 1124,
	272, 1125, 273, 274, 1126, 275, 491, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 492, 493, 1127, 218,
	1128, 0, 0, 0, 0, 286, 287, 288, 494, 289,
	290, 0, 291, 1129, 292, 1130, 1131, 964, 293, 294,
	1132, 295, 495, 1133, 496, 296, 1134, 297, 298, 299,
	300, 497, 498, 499, 351, 966, 301, 302, 1135, 303,
	304, 305, 307, 0, 0, 219, 306, 308, 315, 1136,
	965, 309, 500, 311, 310, 312, 313, 314, 501, 1137,
	502, 1138, 316, 967, 503, 968, 317, 318, 319, 969,
	320, 321, 0, 0, 322, 323, 324, 325, 1139, 327,
	326, 1140, 328, 504, 970, 329, 330, 971, 1141, 331,
	332, 1142, 1143, 333, 334, 335, 0, 336, 337, 339,
	341, 338, 340, 342, 344, 345, 343, 972, 346, 347,
	349, 348, 1144, 220, 973, 350, 1145, 505, 506, 352,
	353, 1146, 354, 355, 356, 1147, 1148, 358, 359, 360,
	1149, 1150, 361, 362, 507, 974, 363, 975, 508, 364,
	357, 365, 366, 367, 368, 369, 370, 371, 1151, 372,
	373, 509, 374, 510, 375, 1152, 376, 0, 377, 378,
	379, 380, 381, 382, 511, 383, 384, 1153, 385, 386,
	387, 388, 389, 390, 0, 392, 393, 394, 391, 395,
	396, 397, 398, 1154, 399, 976, 400, 401, 402, 403,
	512, 404, 0, 405, 409, 410, 411, 412, 413, 414,
	415, 1155, 421, 422, 416, 418, 419, 420, 417, 423,
	424, 425, 1156, 426, 406, 407, 427, 428, 977, 429,
	430, 513, 431, 432, 1157, 433, 434, 435, 436, 408,
	437, 441, 442, 438, 439, 440, 514, 1158, 444, 445,
	443, 1159, 446, 447, 448, 449, 450, 280, 451, 1160,
	452, 515, 516, 517, 518, 1161, 459, 1162, 453, 454,
	519, 455, 520, 1163, 456, 457, 458, 0, 460, 461,
	1164, 1165, 462, 463, 464, 465, 466, 468, 1166, 469,
	1167, 467, 470, 471, 472, 521, 522, 523, 1168, 474,
	473, 524, 1169, 1170, 1171, 1172, 475, 476, 525, 477,
	478, 479, 1087, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2772, 0, 221,
	222, 223, 224, 225, 1094, 226, 1095, 1096, 1097, 0,
	1098, 480, 1099, 1100, 1101, 1102, 227, 229, 228, 230,
	231, 481, 482, 232, 483, 233, 234, 484, 1103, 235,
	236, 237, 238, 239, 240, 1104, 1105, 241, 485, 486,
	487, 1106, 242, 488, 1107, 1092, 1108, 243, 244, 245,
	246, 247, 248, 0, 1109, 250, 251, 252, 249, 1110,
	253, 0, 254, 255, 256, 1111, 963, 257, 258, 1112,
	1113, 1115, 1114, 1116, 1117, 1118, 259, 260, 261, 262,
	263, 264, 489, 490, 1119, 265, 1120, 267, 266, 1121,
	268, 1122, 1123, 269, 270, 271, 1124, 272, 1125, 273,
	274, 1126, 275, 491, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 492, 493, 1127, 218, 1128, 0, 0,
	0, 0, 286, 287, 288, 494, 289, 290, 0, 291,
	1129, 292, 1130, 1131, 964, 293, 294, 1132, 295, 495,
	1133, 496, 296, 1134, 297, 298, 299, 300, 497, 498,
	499, 351, 966, 301, 302, 1135, 303, 304, 305, 307,
	0, 0, 219, 306, 308, 315, 1136, 965, 309, 500,
	311, 310, 312, 313, 314, 501, 1137, 502, 1138, 316,
	967, 503, 968, 317, 318, 319, 969, 320, 321, 0,
	0, 322, 323, 324, 325, 1139, 327, 326, 1140, 328,
	504, 970, 329, 330, 971, 1141, 331, 332, 1142, 1143,
	333, 334, 335, 0, 336, 337, 339, 341, 338, 340,
	342, 344, 345, 343, 972, 346, 347, 349, 348, 1144,
	220, 973, 350, 1145, 505, 506, 352, 353, 1146, 354,
	355, 356, 1147, 1148, 358, 359, 360, 1149, 1150, 361,
	362, 507, 974, 363, 975, 508, 364, 357, 365, 366,
	367, 368, 369, 370, 371, 1151, 372, 373, 509, 374,
	510, 375, 1152, 376, 0, 377, 378, 379, 380, 381,
	382, 511, 383, 384, 1153, 385, 386, 387, 388, 389,
	390, 0, 392, 393, 394, 391, 395, 396, 397, 398,
	1154, 399, 976, 400, 401, 402, 403, 512, 404, 0,
	405, 409, 410, 411, 412, 413, 414, 415, 1155, 421,
	422, 416, 418, 419, 420, 417, 423, 424, 425, 1156,
	426, 406, 407, 427, 428, 977, 429, 430, 513, 431,
	432, 1157, 433, 434, 435, 436, 408, 437, 441, 442,
	438, 439, 440, 514, 1158, 444, 445, 443, 1159, 446,
	447, 448, 449, 450, 280, 451, 1160, 452, 515, 516,
	517, 518, 1161, 459, 1162, 453, 454, 519, 455, 520,
	1163, 456, 457, 458, 0, 460, 461, 1164, 1165, 462,
	463, 464, 465, 466, 468, 1166, 469, 1167, 467, 470,
	471, 472, 521, 522, 523, 1168, 474, 473, 524, 1169,
	1170, 1171, 1172, 475, 476, 525, 477, 478, 479, 1087,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2114, 0, 221, 222, 223, 224,
	225, 1094, 226, 1095, 1096, 1097, 0, 1098, 480, 1099,
	1100, 1101, 1102, 227, 229, 228, 230, 231, 481, 482,
	232, 483, 233, 234, 484, 1103, 235, 236, 237, 238,
	239, 240, 1104, 1105, 241, 485, 486, 487, 1106, 242,
	488, 1107, 1092, 1108, 243, 244, 245, 246, 247, 248,
	0, 1109, 250, 251, 252, 249, 1110, 253, 0, 254,
	255, 256, 1111, 963, 257, 258, 1112, 1113, 1115, 1114,
	1116, 1117, 1118, 259, 260, 261, 262, 263, 264, 489,
	490, 1119, 265, 1120, 267, 266, 1121, 268, 1122, 1123,
	269, 270, 271, 1124, 272, 1125, 273, 274, 1126, 275,
	491, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	492, 493, 1127, 218, 1128, 0, 0, 0, 0, 286,
	287, 288, 494, 289, 290, 0, 291, 1129, 292, 1130,
	1131, 964, 293, 294, 1132, 295, 495, 1133, 496, 296,
	1134, 297, 298, 299, 300, 497, 498, 499, 351, 966,
	301, 302, 1135, 303, 304, 305, 307, 0, 0, 219,
	306, 308, 315, 1136, 965, 309, 500, 311, 310, 312,
	313, 314, 501, 1137, 502, 1138, 316, 967, 503, 968,
	317, 318, 319, 969, 320, 321, 0, 0, 322, 323,
	324, 325, 1139, 327, 326, 1140, 328, 504, 970, 329,
	330, 971, 1141, 331, 332, 1142, 1143, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 345,
	343, 972, 346, 347, 349, 348, 1144, 220, 973, 350,
	1145, 505, 506, 352, 353, 1146, 354, 355, 356, 1147,
	1148, 358, 359, 360, 1149, 1150, 361, 362, 507, 974,
	363, 975, 508, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 1151, 372, 373, 509, 374, 510, 375, 1152,
	376, 0, 377, 378, 379, 380, 381, 382, 511, 383,
	384, 1153, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 1154, 399, 976,
	400, 401, 402, 403, 512, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 1155, 421, 422, 416, 418,
	419, 420, 417, 423, 424, 425, 1156, 426, 406, 407,
	427, 428, 977, 429, 430, 513, 431, 432, 1157, 433,
	434, 435, 436, 408, 437, 441, 442, 438, 439, 440,
	514, 1158, 444, 445, 443, 1159, 446, 447, 448, 449,
	450, 280, 451, 1160, 452, 515, 516, 517, 518, 1161,
	459, 1162, 453, 454, 519, 455, 520, 1163, 456, 457,
	458, 0, 460, 461, 1164, 1165, 462, 463, 464, 465,
	466, 468, 1166, 469, 1167, 467, 470, 471, 472, 521,
	522, 523, 1168, 474, 473, 524, 1169, 1170, 1171, 1172,
	475, 476, 525, 477, 478, 479, 1196, 0, 1087, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1823, 0, 0, 0, 221, 222, 223, 224, 225,
	1094, 226, 1095, 1096, 1097, 0, 1098, 480, 1099, 1100,
	1101, 1102, 227, 229, 228, 230, 231, 481, 482, 232,
	483, 233, 234, 484, 1103, 235, 236, 237, 238, 239,
	240, 1104, 1105, 241, 485, 486, 487, 1106, 242, 488,
	1107, 1092, 1108, 243, 244, 245, 246, 247, 248, 0,
	1109, 250, 251, 252, 249, 1110, 253, 0, 254, 255,
	256, 1111, 963, 257, 258, 1112, 1113, 1115, 1114, 1116,
	1117, 1118, 259, 260, 261, 262, 263, 264, 489, 490,
	1119, 265, 1120, 267, 266, 1121, 268, 1122, 1123, 269,
	270, 271, 1124, 272, 1125, 273, 274, 1126, 275, 491,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 492,
	493, 1127, 218, 1128, 0, 0, 0, 0, 286, 287,
	288, 494, 289, 290, 0, 291, 1129, 292, 1130, 1131,
	964, 293, 294, 1132, 295, 495, 1133, 496, 296, 1134,
	297, 298, 299, 300, 497, 498, 499, 351, 966, 301,
	302, 1135, 303, 304, 305, 307, 0, 0, 219, 306,
	308, 315, 1136, 965, 309, 500, 311, 310, 312, 313,
	314, 501, 1137, 502, 1138, 316, 967, 503, 968, 317,
	318, 319, 969, 320, 321, 0, 0, 322, 323, 324,
	325, 1139, 327, 326, 1140, 328, 504, 970, 329, 330,
	971, 1141, 331, 332, 1142, 1143, 333, 334, 335, 0,
	336, 337, 339, 341, 338, 340, 342, 344, 345, 343,
	972, 346, 347, 349, 348, 1144, 220, 973, 350, 1145,
	505, 506, 352, 353, 1146, 354, 355, 356, 1147, 1148,
	358, 359, 360, 1149, 1150, 361, 362, 507, 974, 363,
	975, 508, 364, 357, 365, 366, 367, 368, 369, 370,
	371, 1151, 372, 373, 509, 374, 510, 375, 1152, 376,
	0, 377, 378, 379, 380, 381, 382, 511, 383, 384,
	1153, 385, 386, 387, 388, 389, 390, 0, 392, 393,
	394, 391, 395, 396, 397, 398, 1154, 399, 976, 400,
	401, 402, 403, 512, 404, 0, 405, 409, 410, 411,
	412, 413, 414, 415, 1155, 421, 422, 416, 418, 419,
	420, 417, 423, 424, 425, 1156, 426, 406, 407, 427,
	428, 977, 429, 430, 513, 431, 432, 1157, 433, 434,
	435, 436, 408, 437, 441, 442, 438, 439, 440, 514,
	1158, 444, 445, 443, 1159, 446, 447, 448, 449, 450,
	280, 451, 1160, 452, 515, 516, 517, 518, 1161, 459,
	1162, 453, 454, 519, 455, 520, 1163, 456, 457, 458,
	0, 460, 461, 1164, 1165, 462, 463, 464, 465, 466,
	468, 1166, 469, 1167, 467, 470, 471, 472, 521, 522,
	523, 1168, 474, 473, 524, 1169, 1170, 1171, 1172, 475,
	476, 525, 477, 478, 479, 1084, 0, 1087, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 1094,
	226, 1095, 1096, 1097, 0, 1098, 480, 1099, 1100, 1101,
	1102, 227, 229, 228, 230, 231, 481, 482, 232, 483,
	233, 234, 484, 1103, 235, 236, 237, 238, 239, 240,
	1104, 1105, 241, 485, 486, 487, 1106, 242, 488, 1107,
	1092, 1108, 243, 244, 245, 246, 247, 248, 0, 1109,
	250, 251, 252, 249, 1110, 253, 0, 254, 255, 256,
	1111, 963, 257, 258, 1112, 1113, 1115, 1114, 1116, 1117,
	1118, 259, 260, 261, 262, 263, 264, 489, 490, 1119,
	265, 1120, 267, 266, 1121, 268, 1122, 1123, 269, 270,
	271, 1124, 272, 1125, 273, 274, 1126, 275, 491, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 492, 493,
	1127, 218, 1128, 0, 0, 0, 0, 286, 287, 288,
	494, 289, 290, 0, 291, 1129, 292, 1130, 1131, 964,
	293, 294, 1132, 295, 495, 1133, 496, 296, 1134, 297,
	298, 299, 300, 497, 498, 499, 351, 966, 301, 302,
	1135, 303, 304, 305, 307, 0, 0, 219, 306, 308,
	315, 1136, 965, 309, 500, 311, 310, 312, 313, 314,
	501, 1137, 502, 1138, 316, 967, 503, 968, 317, 318,
	319, 969, 320, 321, 0, 0, 322, 323, 324, 325,
	1139, 327, 326, 1140, 328, 504, 970, 329, 330, 971,
	1141, 331, 332, 1142, 1143, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 345, 343, 972,
	346, 347, 349, 348, 1144, 220, 973, 350, 1145, 505,
	506, 352, 353, 1146, 354, 355, 356, 1147, 1148, 358,
	359, 360, 1149, 1150, 361, 362, 507, 974, 363, 975,
	508, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	1151, 372, 373, 509, 374, 510, 375, 1152, 376, 0,
	377, 378, 379, 380, 381, 382, 511, 383, 384, 1153,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 1154, 399, 976, 400, 401,
	402, 403, 512, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 1155, 421, 422, 416, 418, 419, 420,
	417, 423, 424, 425, 1156, 426, 406, 407, 427, 428,
	977, 429, 430, 513, 431, 432, 1157, 433, 434, 435,
	436, 408, 437, 441, 442, 438, 439, 440, 514, 1158,
	444, 445, 443, 1159, 446, 447, 448, 449, 450, 280,
	451, 1160, 452, 515, 516, 517, 518, 1161, 459, 1162,
	453, 454, 519, 455, 520, 1163, 456, 457, 458, 0,
	460, 461, 1164, 1165, 462, 463, 464, 465, 466, 468,
	1166, 469, 1167, 467, 470, 471, 472, 521, 522, 523,
	1168, 474, 473, 524, 1169, 1170, 1171, 1172, 475, 476,
	525, 477, 478, 479, 1087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 1094, 226, 1095, 1096,
	1097, 0, 1098, 480, 1099, 1100, 1101, 1102, 227, 229,
	228, 230, 231, 481, 482, 232, 483, 233, 234, 484,
	1103, 235, 236, 237, 238, 239, 240, 1104, 1105, 241,
	485, 486, 487, 1106, 242, 488, 1107, 1092, 1108, 243,
	244, 245, 246, 247, 248, 0, 1109, 250, 251, 252,
	249, 1110, 253, 0, 254, 255, 256, 1111, 963, 257,
	258, 1112, 1113, 1115, 1114, 1116, 1117, 1118, 259, 260,
	261, 262, 263, 264, 489, 490, 1119, 265, 1120, 267,
	266, 1121, 268, 1122, 1123, 269, 270, 271, 1124, 272,
	1125, 273, 274, 1126, 275, 491, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 492, 493, 1127, 218, 1128,
	0, 0, 0, 0, 286, 287, 288, 494, 289, 290,
	0, 291, 1129, 292, 1130, 1131, 964, 293, 294, 1132,
	295, 495, 1133, 496, 296, 1134, 297, 298, 299, 300,
	497, 498, 499, 351, 966, 301, 302, 1135, 303, 304,
	305, 307, 0, 0, 219, 306, 308, 315, 1136, 965,
	309, 500, 311, 310, 312, 313, 314, 501, 1137, 502,
	1138, 316, 967, 503, 968, 317, 318, 319, 969, 320,
	321, 0, 0, 322, 323, 324, 325, 1139, 327, 326,
	1140, 328, 504, 970, 329, 330, 971, 1141, 331, 332,
	1142, 1143, 333, 334, 335, 0, 336, 337, 339, 341,
	338, 340, 342, 344, 345, 343, 972, 346, 347, 349,
	348, 1144, 220, 973, 350, 1145, 505, 506, 352, 353,
	1146, 354, 355, 356, 1147, 1148, 358, 359, 360, 1149,
	1150, 361, 362, 507, 974, 363, 975, 508, 364, 357,
	365, 366, 367, 368, 369, 370, 371, 1151, 372, 373,
	509, 374, 510, 375, 1152, 376, 0, 377, 378, 379,
	380, 381, 382, 511, 383, 384, 1153, 385, 386, 387,
	388, 389, 390, 0, 392, 393, 394, 391, 395, 396,
	397, 398, 1154, 399, 976, 400, 401, 402, 403, 512,
	404, 0, 405, 409, 410, 411, 412, 413, 414, 415,
	1155, 421, 422, 416, 418, 419, 420, 417, 423, 424,
	425, 1156, 426, 406, 407, 427, 428, 977, 429, 430,
	513, 431, 432, 1157, 433, 434, 435, 436, 408, 437,
	441, 442, 438, 439, 440, 514, 1158, 444, 445, 443,
	1159, 446, 447, 448, 449, 450, 280, 451, 1160, 452,
	515, 516, 517, 518, 1161, 459, 1162, 453, 454, 519,
	455, 520, 1163, 456, 457, 458, 0, 460, 461, 1164,
	1165, 462, 463, 464, 465, 466, 468, 1166, 469, 1167,
	467, 470, 471, 472, 521, 522, 523, 1168, 474, 473,
	524, 1169, 1170, 1171, 1172, 475, 476, 525, 477, 478,
	479, 2090, 0, 905, 862, 863, 864, 860, 861, 874,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	221, 222, 223, 224, 225, 2087, 226, 0, 0, 0,
	0, 0, 954, 879, 0, 0, 0, 227, 229, 228,
	230, 231, 481, 920, 899, 931, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 953, 241, 989,
	990, 487, 0, 242, 960, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 963, 257, 258,
	946, 944, 945, 950, 948, 947, 949, 259, 260, 261,
	262, 934, 264, 927, 926, 851, 265, 0, 267, 266,
	0, 268, 2088, 0, 269, 925, 271, 0, 272, 0,
	273, 274, 0, 275, 857, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 980, 981, 870, 218, 0, 0,
	0, 0, 0, 286, 287, 288, 924, 922, 923, 0,
	291, 0, 292, 0, 0, 964, 293, 294, 0, 295,
	987, 0, 880, 296, 0, 297, 298, 299, 300, 955,
	956, 959, 351, 966, 301, 302, 0, 303, 304, 305,
	901, 0, 0, 219, 306, 308, 315, 0, 965, 309,
	913, 904, 915, 917, 918, 919, 914, 0, 906, 0,
	316, 967, 957, 968, 317, 318, 319, 969, 939, 940,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 988, 970, 329, 330, 971, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	340, 342, 344, 893, 343, 972, 346, 347, 349, 348,
	848, 220, 973, 350, 871, 958, 928, 352, 353, 0,
	902, 355, 903, 0, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 974, 363, 975, 982, 364, 357, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 983,
	374, 510, 375, 0, 376, 0, 377, 378, 379, 380,
	381, 382, 921, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 976, 400, 401, 402, 403, 858, 404,
	0, 405, 409, 410, 411, 412, 413, 414, 415, 0,
	421, 422, 894, 895, 897, 898, 417, 423, 424, 425,
	951, 426, 406, 407, 427, 428, 977, 429, 430, 916,
	896, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	962, 438, 439, 440, 984, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 280, 892, 0, 452, 935,
	936, 937, 938, 0, 459, 0, 453, 454, 985, 455,
	986, 869, 456, 457, 458, 0, 460, 461, 0, 852,
	462, 463, 464, 465, 466, 468, 952, 469, 0, 900,
	470, 471, 472, 521, 932, 979, 2086, 474, 473, 524,
	0, 0, 0, 0, 475, 476, 525, 477, 478, 479,
	849, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 0, 0, 845, 846, 2089, 0, 0, 0, 0,
	0, 0, 875, 2085, 0, 838, 873, 905, 862, 863,
	864, 860, 861, 874, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 954, 879, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 920, 899, 931,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 953, 241, 989, 990, 487, 0, 242, 960, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 963, 257, 258, 946, 944, 945, 950, 948, 947,
	949, 259, 260, 261, 262, 934, 264, 927, 926, 851,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 925,
	271, 0, 272, 0, 273, 274, 0, 275, 857, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 980, 981,
	870, 218, 0, 0, 0, 0, 0, 286, 287, 288,
	924, 922, 923, 0, 291, 0, 292, 0, 0, 964,
	293, 294, 0, 295, 987, 0, 880, 296, 0, 297,
	298, 299, 300, 955, 956, 959, 351, 966, 301, 302,
	0, 303, 304, 305, 901, 0, 0, 219, 306, 308,
	315, 0, 965, 309, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 316, 967, 957, 968, 317, 318,
	319, 969, 939, 940, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 988, 970, 329, 330, 971,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 893, 343, 972,
	346, 347, 349, 348, 848, 220, 973, 350, 871, 958,
	928, 352, 353, 0, 902, 355, 903, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 974, 363, 975,
	982, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 983, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 921, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 976, 400, 401,
	402, 403, 858, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 184, 421, 422, 894, 895, 897, 898,
	417, 423, 424, 425, 951, 426, 406, 407, 427, 428,
	977, 429, 430, 916, 896, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 962, 438, 439, 440, 984, 0,
	444, 445, 443, 186, 446, 447, 448, 449, 450, 280,
	892, 0, 452, 935, 936, 937, 938, 0, 459, 0,
	453, 454, 985, 455, 986, 869, 456, 457, 458, 0,
	460, 461, 0, 852, 462, 463, 464, 465, 466, 468,
	952, 469, 0, 900, 470, 471, 472, 1334, 932, 979,
	0, 474, 473, 524, 0, 0, 0, 178, 475, 476,
	525, 477, 478, 479, 849, 179, 0, 0, 0, 0,
	847, 0, 0, 0, 0, 0, 0, 845, 846, 905,
	862, 863, 864, 860, 861, 874, 1544, 1542, 0, 0,
	873, 0, 0, 0, 0, 0, 221, 222, 223, 224,
	225, 0, 226, 0, 0, 0, 0, 0, 954, 879,
	0, 0, 0, 227, 229, 228, 230, 231, 481, 920,
	899, 931, 889, 930, 929, 0, 235, 891, 890, 238,
	239, 240, 881, 953, 241, 989, 990, 487, 0, 242,
	960, 0, 943, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 963, 257, 258, 946, 944, 945, 950,
	948, 947, 949, 259, 260, 261, 262, 934, 264, 927,
	926, 851, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 925, 271, 0, 272, 0, 273, 274, 0, 275,
	857, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	980, 981, 870, 218, 0, 0, 0, 0, 0, 286,
	287, 288, 924, 922, 923, 0, 291, 0, 292, 0,
	0, 964, 293, 294, 0, 295, 987, 0, 880, 296,
	0, 297, 298, 299, 300, 955, 956, 959, 351, 966,
	301, 302, 0, 303, 304, 305, 901, 0, 0, 219,
	306, 308, 315, 0, 965, 309, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 316, 967, 957, 968,
	317, 318, 319, 969, 939, 940, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 988, 970, 329,
	330, 971, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 893,
	343, 972, 346, 347, 349, 348, 848, 220, 973, 350,
	871, 958, 928, 352, 353, 0, 902, 355, 903, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 974,
	363, 975, 982, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 983, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 381, 382, 921, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 976,
	400, 401, 402, 403, 858, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 184, 421, 422, 894, 895,
	897, 898, 417, 423, 424, 425, 951, 426, 406, 407,
	427, 428, 977, 429, 430, 916, 896, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 962, 438, 439, 440,
	984, 0, 444, 445, 443, 186, 446, 447, 448, 449,
	450, 280, 892, 0, 452, 935, 936, 937, 938, 0,
	459, 0, 453, 454, 985, 455, 986, 869, 456, 457,
	458, 0, 460, 461, 0, 852, 462, 463, 464, 465,
	466, 468, 952, 469, 0, 900, 470, 471, 472, 1334,
	932, 979, 0, 474, 473, 524, 0, 0, 0, 178,
	475, 476, 525, 477, 478, 479, 849, 179, 0, 0,
	0, 0, 847, 0, 0, 0, 0, 0, 0, 845,
	846, 905, 862, 863, 864, 860, 861, 874, 1544, 2530,
	0, 0, 873, 0, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	954, 879, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 920, 899, 931, 889, 930, 929, 0, 235, 891,
	890, 238, 239, 240, 881, 953, 241, 989, 990, 487,
	0, 242, 960, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 963, 257, 258, 946, 944,
	945, 950, 948, 947, 949, 259, 260, 261, 262, 934,
	264, 927, 926, 851, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 925, 271, 0, 272, 0, 273, 274,
	0, 275, 857, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 980, 981, 870, 218, 0, 0, 0, 0,
	0, 286, 287, 288, 924, 922, 923, 0, 291, 0,
	292, 0, 0, 964, 293, 294, 0, 295, 987, 0,
	880, 296, 0, 297, 298, 299, 300, 955, 956, 959,
	351, 966, 301, 302, 0, 303, 304, 305, 901, 0,
	0, 219, 306, 308, 315, 0, 965, 309, 913, 904,
	915, 917, 918, 919, 914, 0, 906, 0, 316, 967,
	957, 968, 317, 318, 319, 969, 939, 940, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 988,
	970, 329, 330, 971, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 893, 343, 972, 346, 347, 349, 348, 848, 220,
	973, 350, 871, 958, 928, 352, 353, 0, 902, 355,
	903, 0, 0, 358, 359, 360, 0, 0, 361, 362,
	507, 974, 363, 975, 982, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 983, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	921, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 976, 400, 401, 402, 403, 858, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 184, 421, 422,
	894, 895, 897, 898, 417, 423, 424, 425, 951, 426,
	406, 407, 427, 428, 977, 429, 430, 916, 896, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 962, 438,
	439, 440, 984, 0, 444, 445, 443, 186, 446, 447,
	448, 449, 450, 280, 892, 0, 452, 935, 936, 937,
	938, 0, 459, 0, 453, 454, 985, 455, 986, 869,
	456, 457, 458, 0, 460, 461, 0, 852, 462, 463,
	464, 465, 466, 468, 952, 469, 0, 900, 470, 471,
	472, 1334, 932, 979, 0, 474, 473, 524, 0, 0,
	0, 178, 475, 476, 525, 477, 478, 479, 849, 179,
	0, 0, 0, 0, 847, 0, 0, 0, 0, 0,
	0, 845, 846, 905, 862, 863, 864, 860, 861, 874,
	1544, 1542, 0, 0, 873, 0, 0, 0, 0, 0,
	221, 222, 223, 224, 225, 0, 226, 0, 0, 0,
	0, 0, 954, 879, 0, 0, 0, 227, 229, 228,
	230, 231, 481, 920, 899, 931, 889, 930, 929, 2175,
	235, 891, 890, 238, 239, 240, 881, 953, 241, 989,
	990, 487, 0, 242, 960, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 963, 257, 258,
	946, 944, 945, 950, 948, 947, 949, 259, 260, 261,
	262, 934, 264, 927, 926, 851, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 925, 271, 0, 272, 0,
	273, 274, 0, 275, 857, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 980, 981, 870, 218, 0, 0,
	0, 0, 0, 286, 287, 288, 924, 922, 923, 0,
	291, 0, 292, 0, 2180, 964, 293, 294, 0, 295,
	987, 0, 880, 296, 0, 297, 298, 299, 300, 955,
	956, 959, 351, 966, 301, 302, 0, 303, 304, 305,
	901, 0, 0, 219, 306, 308, 315, 0, 965, 309,
	913, 904, 915, 917, 918, 919, 914, 0, 906, 0,
	316, 967, 957, 968, 317, 318, 319, 969, 939, 940,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 2176,
	328, 988, 970, 329, 330, 971, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	340, 342, 344, 893, 343, 972, 346, 347, 349, 348,
	848, 220, 973, 350, 871, 958, 928, 352, 353, 0,
	902, 355, 903, 0, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 974, 363, 975, 982, 364, 357, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 983,
	374, 510, 375, 0, 376, 0, 377, 378, 379, 380,
	381, 382, 921, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 976, 400, 401, 402, 403, 858, 404,
	0, 405, 409, 410, 411, 412, 413, 414, 415, 0,
	421, 422, 894, 895, 897, 898, 417, 423, 424, 425,
	951, 426, 406, 407, 427, 428, 977, 429, 430, 916,
	896, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	962, 438, 439, 440, 984, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 280, 892, 0, 452, 935,
	936, 937, 938, 0, 459, 2177, 453, 454, 985, 455,
	986, 869, 456, 457, 458, 0, 460, 461, 0, 852,
	462, 463, 464, 465, 466, 468, 952, 469, 0, 900,
	470, 471, 472, 521, 932, 979, 0, 474, 473, 524,
	0, 0, 0, 0, 475, 476, 525, 477, 478, 479,
	849, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 0, 0, 845, 846, 0, 0, 0, 0, 0,
	0, 0, 875, 0, 0, 1399, 873, 905, 862, 863,
	864, 860, 861, 874, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 954, 879, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 920, 899, 931,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 953, 241, 989, 990, 487, 0, 242, 960, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 963, 257, 258, 946, 944, 945, 950, 948, 947,
	949, 259, 260, 261, 262, 934, 264, 927, 926, 851,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 925,
	271, 0, 272, 0, 273, 274, 0, 275, 857, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 980, 981,
	870, 218, 0, 0, 0, 0, 0, 286, 287, 288,
	924, 922, 923, 0, 291, 0, 292, 0, 0, 964,
	293, 294, 0, 295, 987, 0, 880, 296, 0, 297,
	298, 299, 300, 955, 956, 959, 351, 966, 301, 302,
	0, 303, 304, 305, 901, 0, 0, 219, 306, 308,
	315, 0, 965, 309, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 316, 967, 957, 968, 317, 318,
	319, 969, 939, 940, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 988, 970, 329, 330, 971,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 893, 343, 972,
	346, 347, 349, 348, 848, 220, 973, 350, 871, 958,
	928, 352, 353, 0, 902, 355, 903, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 974, 363, 975,
	982, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 983, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 921, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 976, 400, 401,
	402, 403, 858, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 894, 895, 897, 898,
	417, 423, 424, 425, 951, 426, 406, 407, 427, 428,
	977, 429, 430, 916, 896, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 962, 438, 439, 440, 984, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	892, 0, 452, 935, 936, 937, 938, 0, 459, 0,
	453, 454, 985, 455, 986, 869, 456, 457, 458, 0,
	460, 461, 0, 852, 462, 463, 464, 465, 466, 468,
	952, 469, 0, 900, 470, 471, 472, 521, 932, 979,
	0, 474, 473, 524, 1398, 0, 0, 0, 475, 476,
	525, 477, 478, 479, 849, 0, 0, 0, 0, 0,
	847, 0, 0, 0, 0, 0, 0, 845, 846, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 841,
	873, 905, 862, 863, 864, 860, 861, 874, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	954, 879, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 920, 899, 931, 889, 930, 929, 0, 235, 891,
	890, 238, 239, 240, 881, 953, 241, 989, 990, 487,
	0, 242, 960, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 963, 257, 258, 946, 944,
	945, 950, 948, 947, 949, 259, 260, 261, 262, 934,
	264, 927, 926, 851, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 925, 271, 0, 272, 0, 273, 274,
	0, 275, 857, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 980, 981, 870, 218, 0, 0, 0, 0,
	0, 286, 287, 288, 924, 922, 923, 0, 291, 0,
	292, 0, 0, 964, 293, 294, 0, 295, 987, 0,
	880, 296, 0, 297, 298, 299, 300, 955, 956, 959,
	351, 966, 301, 302, 0, 303, 304, 305, 901, 0,
	0, 219, 306, 308, 315, 0, 965, 309, 913, 904,
	915, 917, 918, 919, 914, 0, 906, 0, 316, 967,
	957, 968, 317, 318, 319, 969, 939, 940, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 988,
	970, 329, 330, 971, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 893, 343, 972, 346, 347, 349, 348, 848, 220,
	973, 350, 871, 958, 928, 352, 353, 0, 902, 355,
	903, 853, 0, 358, 359, 360, 0, 0, 361, 362,
	507, 974, 363, 975, 982, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 983, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	921, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 976, 400, 401, 402, 403, 858, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 0, 421, 422,
	894, 895, 897, 898, 417, 423, 424, 425, 951, 426,
	406, 407, 427, 428, 977, 429, 430, 916, 896, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 962, 438,
	439, 440, 984, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 892, 0, 452, 935, 936, 937,
	938, 0, 459, 0, 453, 454, 985, 455, 986, 869,
	456, 457, 458, 0, 460, 461, 0, 852, 462, 463,
	464, 465, 466, 468, 952, 469, 0, 900, 470, 471,
	472, 521, 932, 979, 0, 474, 473, 524, 0, 0,
	0, 0, 475, 476, 525, 477, 478, 479, 849, 0,
	0, 0, 0, 0, 847, 0, 0, 0, 0, 0,
	0, 845, 846, 905, 862, 863, 864, 860, 861, 874,
	875, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	221, 222, 223, 224, 225, 0, 226, 0, 0, 0,
	0, 0, 954, 879, 0, 0, 0, 227, 229, 228,
	230, 231, 481, 920, 899, 931, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 953, 241, 989,
	990, 487, 0, 242, 960, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 3515, 256, 0, 963, 257, 258,
	946, 944, 945, 950, 948, 947, 949, 259, 260, 261,
	262, 934, 264, 927, 926, 851, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 925, 271, 0, 272, 0,
	273, 274, 0, 275, 857, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 980, 981, 870, 218, 0, 0,
	0, 0, 0, 286, 287, 288, 924, 922, 923, 0,
	291, 0, 292, 0, 0, 964, 293, 294, 0, 295,
	987, 0, 880, 296, 0, 297, 298, 299, 300, 955,
	956, 959, 351, 966, 301, 302, 0, 303, 304, 305,
	901, 0, 0, 219, 306, 308, 315, 0, 965, 309,
	913, 904, 915, 917, 918, 919, 914, 0, 906, 0,
	316, 967, 957, 968, 317, 318, 319, 969, 939, 940,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 988, 970, 329, 330, 971, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	340, 342, 344, 893, 343, 972, 346, 347, 349, 348,
	848, 220, 973, 350, 871, 958, 928, 352, 353, 0,
	902, 355, 903, 853, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 974, 363, 975, 982, 364, 357, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 983,
	374, 510, 375, 0, 376, 0, 377, 378, 379, 380,
	381, 382, 921, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 976, 400, 401, 402, 403, 858, 404,
	0, 405, 409, 410, 411, 412, 413, 414, 415, 0,
	421, 422, 894, 895, 897, 898, 417, 423, 424, 425,
	951, 426, 406, 407, 427, 428, 977, 429, 430, 916,
	896, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	962, 438, 439, 440, 984, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 280, 892, 0, 452, 935,
	936, 937, 938, 0, 459, 0, 453, 454, 985, 455,
	986, 869, 456, 457, 458, 0, 460, 461, 0, 852,
	462, 463, 464, 465, 466, 468, 952, 469, 0, 900,
	470, 471, 472, 521, 932, 979, 0, 474, 473, 524,
	0, 0, 0, 0, 475, 476, 525, 477, 478, 479,
	849, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 0, 0, 845, 846, 905, 862, 863, 864, 860,
	861, 874, 875, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 221, 222, 223, 224, 225, 0, 226, 0,
	0, 0, 0, 0, 954, 879, 0, 0, 0, 227,
	229, 228, 230, 231, 481, 920, 899, 931, 889, 930,
	929, 0, 235, 891, 890, 238, 239, 240, 881, 953,
	241, 989, 990, 487, 0, 242, 960, 0, 943, 0,
	243, 244, 245, 246, 247, 248, 0, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 3366, 256, 0, 963,
	257, 258, 946, 944, 945, 950, 948, 947, 949, 259,
	260, 261, 262, 934, 264, 927, 926, 851, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 925, 271, 0,
	272, 0, 273, 274, 0, 275, 857, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 980, 981, 870, 218,
	0, 0, 0, 0, 0, 286, 287, 288, 924, 922,
	923, 0, 291, 0, 292, 0, 0, 964, 293, 294,
	0, 295, 987, 0, 880, 296, 0, 297, 298, 299,
	300, 955, 956, 959, 351, 966, 301, 302, 0, 303,
	304, 305, 901, 0, 0, 219, 306, 308, 315, 0,
	965, 309, 913, 904, 915, 917, 918, 919, 914, 0,
	906, 0, 316, 967, 957, 968, 317, 318, 319, 969,
	939, 940, 0, 0, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 988, 970, 329, 330, 971, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 336, 337, 339,
	341, 338, 340, 342, 344, 893, 343, 972, 346, 347,
	349, 348, 848, 220, 973, 350, 871, 958, 928, 352,
	353, 0, 902, 355, 903, 853, 0, 358, 359, 360,
	0, 0, 361, 362, 507, 974, 363, 975, 982, 364,
	357, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 983, 374, 510, 375, 0, 376, 0, 377, 378,
	379, 380, 381, 382, 921, 383, 384, 0, 385, 386,
	387, 388, 389, 390, 0, 392, 393, 394, 391, 395,
	396, 397, 398, 0, 399, 976, 400, 401, 402, 403,
	858, 404, 0, 405, 409, 410, 411, 412, 413, 414,
	415, 0, 421, 422, 894, 895, 897, 898, 417, 423,
	424, 425, 951, 426, 406, 407, 427, 428, 977, 429,
	430, 916, 896, 432, 0, 433, 434, 435, 436, 408,
	437, 441, 962, 438, 439, 440, 984, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 280, 892, 0,
	452, 935, 936, 937, 938, 0, 459, 0, 453, 454,
	985, 455, 986, 869, 456, 457, 458, 0, 460, 461,
	0, 852, 462, 463, 464, 465, 466, 468, 952, 469,
	0, 900, 470, 471, 472, 521, 932, 979, 0, 474,
	473, 524, 0, 0, 0, 0, 475, 476, 525, 477,
	478, 479, 849, 0, 0, 0, 0, 0, 847, 0,
	0, 0, 0, 0, 0, 845, 846, 905, 862, 863,
	864, 860, 861, 874, 875, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 954, 879, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 920, 899, 931,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 953, 241, 989, 990, 487, 0, 242, 960, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 963, 257, 258, 946, 944, 945, 950, 948, 947,
	949, 259, 260, 261, 262, 934, 264, 927, 926, 851,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 925,
	271, 0, 272, 0, 273, 274, 0, 275, 857, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 980, 981,
	870, 218, 0, 0, 0, 0, 0, 286, 287, 288,
	924, 922, 923, 0, 291, 0, 292, 0, 0, 964,
	293, 294, 0, 295, 987, 0, 880, 296, 0, 297,
	298, 299, 300, 955, 956, 959, 351, 966, 301, 302,
	0, 303, 304, 305, 901, 0, 0, 219, 306, 308,
	315, 0, 965, 309, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 316, 967, 957, 968, 317, 318,
	319, 969, 939, 940, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 988, 970, 329, 330, 971,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 893, 343, 972,
	346, 347, 349, 348, 848, 3089, 973, 350, 871, 958,
	928, 352, 353, 0, 902, 355, 903, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 974, 363, 975,
	982, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 983, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 921, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 976, 400, 401,
	402, 403, 858, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 894, 895, 897, 898,
	417, 423, 424, 425, 951, 426, 406, 407, 427, 428,
	977, 429, 430, 916, 896, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 962, 438, 439, 440, 984, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	892, 0, 452, 935, 936, 937, 938, 0, 459, 0,
	453, 454, 985, 455, 986, 869, 456, 457, 458, 0,
	460, 461, 0, 852, 462, 463, 464, 465, 466, 468,
	952, 469, 0, 900, 470, 471, 472, 521, 932, 979,
	0, 474, 473, 524, 0, 0, 0, 0, 475, 476,
	525, 477, 478, 479, 849, 0, 0, 0, 0, 0,
	847, 0, 0, 0, 0, 0, 0, 845, 846, 1604,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	873, 905, 862, 863, 864, 860, 861, 874, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	954, 879, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 920, 899, 931, 889, 930, 929, 0, 235, 891,
	890, 238, 239, 240, 881, 953, 241, 989, 990, 487,
	0, 242, 960, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 963, 257, 258, 946, 944,
	945, 950, 948, 947, 949, 259, 260, 261, 262, 934,
	264, 927, 926, 851, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 925, 271, 0, 272, 0, 273, 274,
	0, 275, 857, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 980, 981, 870, 218, 0, 0, 0, 0,
	0, 286, 287, 288, 924, 922, 923, 0, 291, 0,
	292, 0, 0, 964, 293, 294, 0, 295, 987, 0,
	880, 296, 0, 297, 298, 299, 300, 955, 956, 959,
	351, 966, 301, 302, 0, 303, 304, 305, 901, 0,
	0, 219, 306, 308, 315, 0, 965, 309, 913, 904,
	915, 917, 918, 919, 914, 0, 906, 0, 316, 967,
	957, 968, 317, 318, 319, 969, 939, 940, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 988,
	970, 329, 330, 971, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 893, 343, 972, 346, 347, 349, 348, 848, 220,
	973, 350, 871, 958, 928, 352, 353, 0, 902, 355,
	903, 0, 0, 358, 359, 360, 0, 0, 361, 362,
	507, 974, 363, 975, 982, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 983, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	921, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 976, 400, 401, 402, 403, 858, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 0, 421, 422,
	894, 895, 897, 898, 417, 423, 424, 425, 951, 426,
	406, 407, 427, 428, 977, 429, 430, 916, 896, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 962, 438,
	439, 440, 984, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 892, 0, 452, 935, 936, 937,
	938, 0, 459, 0, 453, 454, 985, 455, 986, 869,
	456, 457, 458, 0, 460, 461, 0, 852, 462, 463,
	464, 465, 466, 468, 952, 469, 0, 900, 470, 471,
	472, 521, 932, 979, 2894, 474, 473, 524, 0, 0,
	0, 0, 475, 476, 525, 477, 478, 479, 849, 0,
	0, 0, 0, 0, 847, 0, 0, 0, 0, 0,
	0, 845, 846, 905, 862, 863, 864, 860, 861, 874,
	875, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	221, 222, 223, 224, 225, 0, 226, 0, 0, 0,
	0, 0, 954, 879, 0, 0, 0, 227, 229, 228,
	230, 231, 481, 920, 899, 931, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 953, 241, 989,
	990, 487, 0, 242, 960, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 963, 257, 258,
	946, 944, 945, 950, 948, 947, 949, 259, 260, 261,
	262, 934, 264, 927, 926, 851, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 925, 271, 0, 272, 0,
	273, 274, 0, 275, 857, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 980, 981, 870, 218, 0, 0,
	0, 0, 0, 286, 287, 288, 924, 922, 923, 0,
	291, 0, 292, 0, 0, 964, 293, 294, 0, 295,
	987, 0, 880, 296, 0, 297, 298, 299, 300, 955,
	956, 959, 351, 966, 301, 302, 0, 303, 304, 305,
	901, 0, 0, 2004, 306, 308, 315, 0, 965, 309,
	913, 904, 915, 917, 918, 919, 914, 0, 906, 0,
	316, 967, 957, 968, 317, 318, 319, 969, 939, 940,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 988, 970, 329, 330, 971, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	340, 342, 344, 893, 343, 972, 346, 347, 349, 348,
	848, 220, 973, 350, 871, 958, 928, 352, 353, 0,
	902, 355, 903, 0, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 974, 363, 975, 982, 364, 357, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 983,
	374, 510, 375, 2003, 376, 0, 377, 378, 379, 380,
	381, 382, 921, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 976, 400, 401, 402, 403, 858, 404,
	0, 405, 409, 410, 411, 412, 413, 414, 415, 0,
	421, 422, 894, 895, 897, 898, 417, 423, 424, 425,
	951, 426, 406, 407, 427, 428, 977, 429, 430, 916,
	896, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	962, 438, 439, 440, 984, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 280, 892, 0, 452, 935,
	936, 937, 938, 0, 459, 0, 453, 454, 985, 455,
	986, 869, 456, 457, 458, 0, 460, 461, 0, 852,
	462, 463, 464, 465, 466, 468, 952, 469, 0, 900,
	470, 471, 472, 521, 932, 979, 0, 474, 473, 524,
	0, 0, 0, 0, 475, 476, 525, 477, 478, 479,
	849, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 0, 0, 845, 846, 905, 862, 863, 864, 860,
	861, 874, 875, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 221, 222, 223, 224, 225, 0, 226, 0,
	0, 0, 0, 0, 954, 879, 0, 0, 0, 227,
	229, 228, 230, 231, 481, 920, 899, 931, 889, 930,
	929, 0, 235, 891, 890, 238, 239, 240, 881, 953,
	241, 989, 990, 487, 0, 242, 960, 0, 943, 0,
	243, 244, 245, 246, 247, 248, 0, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 963,
	257, 258, 946, 944, 945, 950, 948, 947, 949, 259,
	260, 261, 262, 934, 264, 927, 926, 851, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 925, 271, 0,
	272, 0, 273, 274, 0, 275, 857, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 980, 981, 870, 218,
	0, 0, 0, 0, 0, 286, 287, 288, 924, 922,
	923, 0, 291, 0, 292, 0, 0, 964, 293, 294,
	0, 295, 987, 0, 880, 296, 0, 297, 298, 299,
	300, 955, 956, 959, 351, 966, 301, 302, 0, 303,
	304, 305, 901, 0, 0, 219, 306, 308, 315, 0,
	965, 309, 913, 904, 915, 917, 918, 919, 914, 0,
	906, 0, 316, 967, 957, 968, 317, 318, 319, 969,
	939, 940, 0, 0, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 988, 970, 329, 330, 971, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 336, 337, 339,
	341, 338, 340, 342, 344, 893, 343, 972, 346, 347,
	349, 348, 848, 220, 973, 350, 871, 958, 928, 352,
	353, 0, 902, 355, 903, 853, 0, 358, 359, 360,
	0, 0, 361, 362, 507, 974, 363, 975, 982, 364,
	357, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 983, 374, 510, 375, 0, 376, 0, 377, 378,
	379, 380, 381, 382, 921, 383, 384, 0, 385, 386,
	387, 388, 389, 390, 0, 392, 393, 394, 391, 395,
	396, 397, 398, 0, 399, 976, 400, 401, 402, 403,
	858, 404, 0, 405, 409, 410, 411, 412, 413, 414,
	415, 0, 421, 422, 894, 895, 897, 898, 417, 423,
	424, 425, 951, 426, 406, 407, 427, 428, 977, 429,
	430, 916, 896, 432, 0, 433, 434, 435, 436, 408,
	437, 441, 962, 438, 439, 440, 984, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 280, 892, 0,
	452, 935, 936, 937, 938, 0, 459, 0, 453, 454,
	985, 455, 986, 869, 456, 457, 458, 0, 460, 461,
	0, 852, 462, 463, 464, 465, 466, 468, 952, 469,
	0, 900, 470, 471, 472, 521, 932, 979, 0, 474,
	473, 524, 0, 0, 0, 0, 475, 476, 525, 477,
	478, 479, 849, 0, 0, 0, 0, 0, 847, 0,
	0, 0, 0, 0, 0, 845, 846, 905, 862, 863,
	864, 860, 861, 874, 875, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 954, 879, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 920, 899, 931,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 953, 241, 989, 990, 487, 0, 242, 960, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 963, 257, 258, 946, 944, 945, 950, 948, 947,
	949, 259, 260, 261, 262, 934, 264, 927, 926, 851,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 925,
	271, 0, 272, 0, 273, 274, 0, 275, 857, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 980, 981,
	870, 218, 0, 0, 0, 0, 0, 286, 287, 288,
	924, 922, 923, 0, 291, 0, 292, 0, 0, 964,
	293, 294, 0, 295, 987, 0, 880, 296, 0, 297,
	298, 299, 300, 955, 956, 959, 351, 966, 301, 302,
	0, 303, 304, 305, 901, 0, 0, 219, 306, 308,
	315, 0, 965, 309, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 316, 967, 957, 968, 317, 318,
	319, 969, 939, 940, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 988, 970, 329, 330, 971,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 893, 343, 972,
	346, 347, 349, 348, 848, 220, 973, 350, 871, 958,
	928, 352, 353, 0, 902, 355, 903, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 974, 363, 975,
	982, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 983, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 921, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 976, 400, 401,
	402, 403, 858, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 894, 895, 897, 898,
	417, 423, 424, 425, 951, 426, 406, 407, 427, 428,
	977, 429, 430, 916, 896, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 962, 438, 439, 440, 984, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	892, 0, 452, 935, 936, 937, 938, 0, 459, 0,
	453, 454, 985, 455, 986, 869, 456, 457, 458, 0,
	460, 461, 0, 852, 462, 463, 464, 465, 466, 468,
	952, 469, 0, 900, 470, 471, 472, 521, 932, 979,
	0, 474, 473, 524, 0, 0, 0, 0, 475, 476,
	525, 477, 478, 479, 849, 0, 0, 0, 0, 0,
	847, 0, 0, 0, 0, 0, 0, 845, 846, 1604,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 0,
	873, 905, 862, 863, 864, 860, 861, 874, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	954, 879, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 920, 899, 931, 889, 930, 929, 0, 235, 891,
	890, 238, 239, 240, 881, 953, 241, 989, 990, 487,
	0, 242, 960, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 963, 257, 258, 946, 944,
	945, 950, 948, 947, 949, 259, 260, 261, 262, 934,
	264, 927, 926, 851, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 925, 271, 0, 272, 0, 273, 274,
	0, 275, 857, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 980, 981, 870, 218, 0, 0, 0, 0,
	0, 286, 287, 288, 924, 922, 923, 0, 291, 0,
	292, 0, 2180, 964, 293, 294, 0, 295, 987, 0,
	880, 296, 0, 297, 298, 299, 300, 955, 956, 959,
	351, 966, 301, 302, 0, 303, 304, 305, 901, 0,
	0, 219, 306, 308, 315, 0, 965, 309, 913, 904,
	915, 917, 918, 919, 914, 0, 906, 0, 316, 967,
	957, 968, 317, 318, 319, 969, 939, 940, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 988,
	970, 329, 330, 971, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 893, 343, 972, 346, 347, 349, 348, 848, 220,
	973, 350, 871, 958, 928, 352, 353, 0, 902, 355,
	903, 0, 0, 358, 359, 360, 0, 0, 361, 362,
	507, 974, 363, 975, 982, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 983, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	921, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 976, 400, 401, 402, 403, 858, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 0, 421, 422,
	894, 895, 897, 898, 417, 423, 424, 425, 951, 426,
	406, 407, 427, 428, 977, 429, 430, 916, 896, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 962, 438,
	439, 440, 984, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 892, 0, 452, 935, 936, 937,
	938, 0, 459, 0, 453, 454, 985, 455, 986, 869,
	456, 457, 458, 0, 460, 461, 0, 852, 462, 463,
	464, 465, 466, 468, 952, 469, 0, 900, 470, 471,
	472, 521, 932, 979, 0, 474, 473, 524, 0, 0,
	0, 0, 475, 476, 525, 477, 478, 479, 849, 0,
	0, 0, 0, 0, 847, 0, 0, 0, 0, 0,
	0, 845, 846, 905, 862, 863, 864, 860, 861, 874,
	875, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	221, 222, 223, 224, 225, 0, 226, 0, 0, 0,
	0, 0, 954, 879, 0, 0, 0, 227, 229, 228,
	230, 231, 481, 920, 899, 931, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 953, 241, 989,
	990, 487, 0, 242, 960, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 963, 257, 258,
	946, 944, 945, 950, 948, 947, 949, 259, 260, 261,
	262, 934, 264, 927, 926, 851, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 925, 271, 0, 272, 0,
	273, 274, 0, 275, 857, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 980, 981, 870, 218, 0, 0,
	0, 0, 0, 286, 287, 288, 924, 922, 923, 0,
	291, 0, 292, 0, 0, 964, 293, 294, 0, 295,
	987, 0, 880, 296, 0, 297, 298, 299, 300, 955,
	956, 959, 351, 966, 301, 302, 0, 303, 304, 305,
	901, 0, 0, 219, 306, 308, 315, 0, 965, 309,
	913, 904, 915, 917, 918, 919, 914, 0, 906, 0,
	316, 967, 957, 968, 317, 318, 319, 969, 939, 940,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 988, 970, 329, 330, 971, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	340, 342, 344, 893, 343, 972, 346, 347, 349, 348,
	848, 220, 973, 350, 871, 958, 928, 352, 353, 0,
	902, 355, 903, 0, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 974, 363, 975, 982, 364, 357, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 983,
	374, 510, 375, 0, 376, 0, 377, 378, 379, 380,
	381, 382, 921, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 976, 400, 401, 402, 403, 858, 404,
	0, 405, 409, 410, 411, 412, 413, 414, 415, 0,
	421, 422, 894, 895, 897, 898, 417, 423, 424, 425,
	951, 426, 406, 407, 427, 428, 977, 429, 430, 916,
	896, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	962, 438, 439, 440, 984, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 280, 892, 0, 452, 935,
	936, 937, 938, 0, 459, 0, 453, 454, 985, 455,
	986, 869, 456, 457, 458, 0, 460, 461, 0, 852,
	462, 463, 464, 465, 466, 468, 952, 469, 0, 900,
	470, 471, 472, 521, 932, 979, 0, 474, 473, 524,
	0, 0, 0, 0, 475, 476, 525, 477, 478, 479,
	849, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 0, 0, 845, 846, 0, 0, 0, 0, 0,
	0, 0, 875, 1542, 0, 2185, 873, 905, 862, 863,
	864, 860, 861, 874, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 954, 879, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 920, 899, 931,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 953, 241, 989, 990, 487, 0, 242, 960, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 963, 257, 258, 946, 944, 945, 950, 948, 947,
	949, 259, 260, 261, 262, 934, 264, 927, 926, 851,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 925,
	271, 0, 272, 0, 273, 274, 0, 275, 857, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 980, 981,
	870, 218, 0, 0, 0, 0, 0, 286, 287, 288,
	924, 922, 923, 0, 291, 0, 292, 0, 0, 964,
	293, 294, 0, 295, 987, 0, 880, 296, 0, 297,
	298, 299, 300, 955, 956, 959, 351, 966, 301, 302,
	0, 303, 304, 305, 901, 0, 0, 219, 306, 308,
	315, 0, 965, 309, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 316, 967, 957, 968, 317, 318,
	319, 969, 939, 940, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 988, 970, 329, 330, 971,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 893, 343, 972,
	346, 347, 349, 348, 848, 220, 973, 350, 871, 958,
	928, 352, 353, 0, 902, 355, 903, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 974, 363, 975,
	982, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 983, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 921, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 976, 400, 401,
	402, 403, 858, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 894, 895, 897, 898,
	417, 423, 424, 425, 951, 426, 406, 407, 427, 428,
	977, 429, 430, 916, 896, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 962, 438, 439, 440, 984, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	892, 0, 452, 935, 936, 937, 938, 0, 459, 0,
	453, 454, 985, 455, 986, 869, 456, 457, 458, 0,
	460, 461, 0, 852, 462, 463, 464, 465, 466, 468,
	952, 469, 0, 900, 470, 471, 472, 521, 932, 979,
	0, 474, 473, 524, 0, 0, 0, 0, 475, 476,
	525, 477, 478, 479, 849, 0, 0, 0, 0, 0,
	847, 0, 0, 0, 0, 0, 0, 845, 846, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 2183,
	873, 905, 862, 863, 864, 860, 861, 874, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	954, 879, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 920, 899, 931, 889, 930, 929, 0, 235, 891,
	890, 238, 239, 240, 881, 953, 241, 989, 990, 487,
	0, 242, 960, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 963, 257, 258, 946, 944,
	945, 950, 948, 947, 949, 259, 260, 261, 262, 934,
	264, 927, 926, 851, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 925, 271, 0, 272, 0, 273, 274,
	0, 275, 857, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 980, 981, 870, 218, 0, 0, 0, 0,
	0, 286, 287, 288, 924, 922, 923, 0, 291, 0,
	292, 0, 0, 964, 293, 294, 0, 295, 987, 0,
	880, 296, 0, 297, 298, 299, 300, 955, 956, 959,
	351, 966, 301, 302, 0, 303, 304, 305, 901, 0,
	0, 219, 306, 308, 315, 0, 965, 309, 913, 904,
	915, 917, 918, 919, 914, 0, 906, 0, 316, 967,
	957, 968, 317, 318, 319, 969, 939, 940, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 988,
	970, 329, 330, 971, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 893, 343, 972, 346, 347, 349, 348, 848, 220,
	973, 350, 871, 958, 928, 352, 353, 0, 902, 355,
	903, 0, 0, 358, 359, 360, 0, 0, 361, 362,
	507, 974, 363, 975, 982, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 983, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	921, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 976, 400, 401, 402, 403, 858, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 0, 421, 422,
	894, 895, 897, 898, 417, 423, 424, 425, 951, 426,
	406, 407, 427, 428, 977, 429, 430, 916, 896, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 962, 438,
	439, 440, 984, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 892, 0, 452, 935, 936, 937,
	938, 0, 459, 0, 453, 454, 985, 455, 986, 869,
	456, 457, 458, 0, 460, 461, 0, 852, 462, 463,
	464, 465, 466, 468, 952, 469, 0, 900, 470, 471,
	472, 521, 932, 979, 0, 474, 473, 524, 0, 0,
	0, 0, 475, 476, 525, 477, 478, 479, 849, 0,
	0, 0, 0, 0, 847, 0, 0, 0, 0, 0,
	0, 845, 846, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 0, 2171, 873, 905, 862, 863, 864, 860,
	861, 874, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 222, 223, 224, 225, 0, 226, 0,
	0, 0, 0, 0, 954, 879, 0, 0, 0, 227,
	229, 228, 230, 231, 481, 920, 899, 931, 889, 930,
	929, 0, 235, 891, 890, 238, 239, 240, 881, 953,
	241, 989, 990, 487, 0, 242, 960, 0, 943, 0,
	243, 244, 245, 246, 247, 248, 0, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 963,
	257, 258, 946, 944, 945, 950, 948, 947, 949, 259,
	260, 261, 262, 934, 264, 927, 926, 851, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 925, 271, 0,
	272, 0, 273, 274, 0, 275, 857, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 980, 981, 870, 218,
	0, 0, 0, 0, 0, 286, 287, 288, 924, 922,
	923, 0, 291, 0, 292, 0, 0, 964, 293, 294,
	0, 295, 987, 0, 880, 296, 0, 297, 298, 299,
	300, 955, 956, 959, 351, 966, 301, 302, 0, 303,
	304, 305, 901, 0, 0, 219, 306, 308, 315, 0,
	965, 309, 913, 904, 915, 917, 918, 919, 914, 0,
	906, 0, 316, 967, 957, 968, 317, 318, 319, 969,
	939, 940, 0, 0, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 988, 970, 329, 330, 971, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 336, 337, 339,
	341, 338, 340, 342, 344, 893, 343, 972, 346, 347,
	349, 348, 848, 220, 973, 350, 871, 958, 928, 352,
	353, 0, 902, 355, 903, 0, 0, 358, 359, 360,
	0, 0, 361, 362, 507, 974, 363, 975, 982, 364,
	357, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 983, 374, 510, 375, 0, 376, 0, 377, 378,
	379, 380, 381, 382, 921, 383, 384, 0, 385, 386,
	387, 388, 389, 390, 0, 392, 393, 394, 391, 395,
	396, 397, 398, 0, 399, 976, 400, 401, 402, 403,
	858, 404, 0, 405, 409, 410, 411, 412, 413, 414,
	415, 0, 421, 422, 894, 895, 897, 898, 417, 423,
	424, 425, 951, 426, 406, 407, 427, 428, 977, 429,
	430, 916, 896, 432, 0, 433, 434, 435, 436, 408,
	437, 441, 962, 438, 439, 440, 984, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 280, 892, 0,
	452, 935, 936, 937, 938, 0, 459, 0, 453, 454,
	985, 455, 986, 869, 456, 457, 458, 0, 460, 461,
	0, 852, 462, 463, 464, 465, 466, 468, 952, 469,
	0, 900, 470, 471, 472, 521, 932, 979, 0, 474,
	473, 524, 0, 0, 0, 0, 475, 476, 525, 477,
	478, 479, 849, 0, 0, 0, 0, 0, 847, 0,
	0, 0, 0, 0, 0, 845, 846, 0, 0, 0,
	0, 0, 0, 0, 875, 0, 0, 2160, 873, 905,
	862, 863, 864, 860, 861, 874, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 223, 224,
	225, 0, 226, 0, 0, 0, 0, 0, 954, 879,
	0, 0, 0, 227, 229, 228, 230, 231, 481, 920,
	899, 931, 889, 930, 929, 0, 235, 891, 890, 238,
	239, 240, 881, 953, 241, 989, 990, 487, 0, 242,
	960, 0, 943, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 963, 257, 258, 946, 944, 945, 950,
	948, 947, 949, 259, 260, 261, 262, 934, 264, 927,
	926, 851, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 925, 271, 0, 272, 0, 273, 274, 0, 275,
	857, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	980, 981, 870, 218, 0, 0, 0, 0, 0, 286,
	287, 288, 924, 922, 923, 0, 291, 0, 292, 0,
	0, 964, 293, 294, 0, 295, 987, 0, 880, 296,
	0, 297, 298, 299, 300, 955, 956, 959, 351, 966,
	301, 302, 0, 303, 304, 305, 901, 0, 0, 219,
	306, 308, 315, 0, 965, 309, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 316, 967, 957, 968,
	317, 318, 319, 969, 939, 940, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 988, 970, 329,
	330, 971, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 893,
	343, 972, 346, 347, 349, 348, 848, 220, 973, 350,
	871, 958, 928, 352, 353, 0, 902, 355, 903, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 974,
	363, 975, 982, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 983, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 381, 382, 921, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 976,
	400, 401, 402, 403, 858, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 0, 421, 422, 894, 895,
	897, 898, 417, 423, 424, 425, 951, 426, 406, 407,
	427, 428, 977, 429, 430, 916, 896, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 962, 438, 439, 440,
	984, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 280, 892, 0, 452, 935, 936, 937, 938, 0,
	459, 0, 453, 454, 985, 455, 986, 869, 456, 457,
	458, 0, 460, 461, 0, 852, 462, 463, 464, 465,
	466, 468, 952, 469, 0, 900, 470, 471, 472, 521,
	932, 979, 0, 474, 473, 524, 0, 0, 0, 0,
	475, 476, 525, 477, 478, 479, 849, 0, 0, 0,
	0, 0, 847, 0, 0, 0, 0, 0, 0, 845,
	846, 0, 0, 0, 0, 0, 0, 0, 875, 0,
	0, 2158, 873, 2150, 862, 863, 864, 860, 861, 874,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	221, 222, 223, 224, 225, 0, 226, 0, 0, 0,
	0, 0, 954, 879, 0, 0, 0, 227, 229, 228,
	230, 231, 481, 920, 899, 931, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 953, 241, 989,
	990, 487, 0, 242, 960, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 963, 257, 258,
	946, 944, 945, 950, 948, 947, 949, 259, 260, 261,
	262, 934, 2153, 927, 926, 851, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 925, 271, 0, 272, 0,
	273, 274, 0, 275, 857, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 980, 981, 870, 218, 0, 0,
	0, 0, 0, 286, 287, 288, 924, 922, 923, 0,
	291, 0, 292, 0, 0, 964, 293, 294, 0, 295,
	987, 0, 880, 296, 0, 297, 298, 299, 2154, 955,
	956, 959, 351, 966, 301, 302, 0, 303, 304, 305,
	901, 0, 0, 219, 306, 308, 315, 0, 965, 309,
	913, 904, 915, 917, 918, 919, 914, 0, 906, 0,
	316, 967, 957, 968, 317, 318, 319, 969, 939, 940,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 988, 970, 329, 330, 971, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	2155, 2152, 344, 893, 343, 972, 346, 347, 349, 348,
	848, 220, 973, 350, 871, 958, 928, 352, 353, 0,
	902, 355, 903, 0, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 974, 363, 975, 982, 364, 357, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 983,
	374, 510, 375, 0, 376, 0, 377, 378, 379, 380,
	381, 382, 921, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 976, 400, 401, 402, 403, 858, 404,
	0, 405, 409, 410, 411, 412, 413, 414, 2156, 0,
	421, 422, 894, 895, 897, 898, 417, 423, 424, 425,
	951, 426, 406, 407, 427, 428, 977, 429, 430, 916,
	896, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	962, 438, 439, 440, 984, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 280, 892, 0, 452, 935,
	936, 937, 938, 0, 459, 0, 453, 454, 985, 455,
	986, 869, 456, 457, 458, 0, 460, 461, 0, 852,
	462, 463, 464, 465, 466, 468, 952, 469, 0, 900,
	470, 471, 472, 521, 932, 979, 0, 474, 473, 524,
	0, 0, 0, 0, 475, 476, 525, 477, 2151, 479,
	849, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 0, 0, 845, 846, 0, 0, 0, 0, 0,
	0, 0, 875, 0, 0, 2147, 873, 2150, 862, 863,
	864, 860, 861, 874, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 954, 879, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 920, 899, 931,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 953, 241, 989, 990, 487, 0, 242, 960, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 963, 257, 258, 946, 944, 945, 950, 948, 947,
	949, 259, 260, 261, 262, 934, 2153, 927, 926, 851,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 925,
	271, 0, 272, 0, 273, 274, 0, 275, 857, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 980, 981,
	870, 218, 0, 0, 0, 0, 0, 286, 287, 288,
	924, 922, 923, 0, 291, 0, 292, 0, 0, 964,
	293, 294, 0, 295, 987, 0, 880, 296, 0, 297,
	298, 299, 2154, 955, 956, 959, 351, 966, 301, 302,
	0, 303, 304, 305, 901, 0, 0, 219, 306, 308,
	315, 0, 965, 309, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 316, 967, 957, 968, 317, 318,
	319, 969, 939, 940, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 988, 970, 329, 330, 971,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 2155, 2152, 344, 893, 343, 972,
	346, 347, 349, 348, 848, 220, 973, 350, 871, 958,
	928, 352, 353, 0, 902, 355, 903, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 974, 363, 975,
	982, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 983, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 921, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 976, 400, 401,
	402, 403, 858, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 2156, 0, 421, 422, 894, 895, 897, 898,
	417, 423, 424, 425, 951, 426, 406, 407, 427, 428,
	977, 429, 430, 916, 896, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 962, 438, 439, 440, 984, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	892, 0, 452, 935, 936, 937, 938, 0, 459, 0,
	453, 454, 985, 455, 986, 869, 456, 457, 458, 0,
	460, 461, 0, 852, 462, 463, 464, 465, 466, 468,
	952, 469, 0, 900, 470, 471, 472, 521, 932, 979,
	0, 474, 473, 524, 0, 0, 0, 0, 475, 476,
	525, 477, 2151, 479, 849, 0, 0, 0, 0, 0,
	847, 0, 0, 0, 0, 0, 0, 845, 846, 905,
	862, 863, 864, 860, 861, 874, 875, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 221, 222, 223, 224,
	225, 0, 226, 0, 0, 0, 0, 0, 954, 879,
	0, 0, 0, 227, 229, 228, 230, 231, 481, 920,
	899, 931, 889, 930, 929, 0, 235, 891, 890, 238,
	239, 240, 881, 953, 241, 989, 990, 487, 0, 242,
	960, 0, 943, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 963, 257, 258, 946, 944, 945, 950,
	948, 947, 949, 259, 260, 261, 262, 934, 264, 927,
	926, 851, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 925, 271, 0, 272, 0, 273, 274, 0, 275,
	857, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	980, 981, 870, 218, 0, 0, 0, 0, 0, 286,
	287, 288, 924, 922, 923, 0, 291, 0, 292, 0,
	0, 964, 293, 294, 0, 295, 987, 0, 880, 296,
	0, 297, 298, 299, 300, 955, 956, 959, 351, 966,
	301, 302, 0, 303, 304, 305, 901, 0, 0, 219,
	306, 308, 315, 0, 965, 309, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 316, 967, 957, 968,
	317, 318, 319, 969, 939, 940, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 988, 970, 329,
	330, 971, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 893,
	343, 972, 346, 347, 349, 348, 848, 220, 973, 350,
	871, 958, 928, 352, 353, 0, 902, 355, 903, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 974,
	363, 975, 982, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 983, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 381, 382, 921, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 976,
	400, 401, 402, 403, 858, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 0, 421, 422, 894, 895,
	897, 898, 417, 423, 424, 425, 951, 426, 406, 407,
	427, 428, 977, 429, 430, 916, 896, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 962, 438, 439, 440,
	984, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 280, 892, 0, 452, 935, 936, 937, 938, 0,
	459, 0, 453, 454, 985, 455, 986, 869, 456, 457,
	458, 0, 460, 461, 0, 852, 462, 463, 464, 465,
	466, 468, 952, 469, 0, 900, 470, 471, 472, 521,
	932, 979, 0, 474, 473, 524, 0, 0, 0, 0,
	475, 476, 525, 477, 478, 479, 849, 0, 0, 0,
	0, 0, 847, 0, 0, 0, 0, 0, 0, 845,
	846, 0, 0, 0, 0, 0, 1550, 0, 875, 0,
	0, 0, 873, 905, 862, 863, 864, 860, 861, 874,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	221, 222, 223, 224, 225, 1985, 226, 0, 0, 0,
	0, 0, 954, 879, 0, 0, 0, 227, 229, 228,
	230, 231, 481, 920, 899, 931, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 953, 241, 989,
	990, 487, 0, 242, 960, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 963, 257, 258,
	946, 944, 945, 950, 948, 947, 949, 259, 260, 261,
	262, 934, 264, 927, 926, 851, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 925, 271, 0, 272, 0,
	273, 274, 0, 275, 857, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 980, 981, 870, 218, 0, 0,
	0, 0, 0, 286, 287, 288, 924, 922, 923, 0,
	291, 0, 292, 0, 0, 964, 293, 294, 0, 295,
	987, 0, 880, 296, 0, 297, 298, 299, 300, 955,
	956, 959, 351, 966, 301, 302, 0, 303, 304, 305,
	901, 0, 0, 219, 306, 308, 315, 0, 965, 309,
	913, 904, 915, 917, 918, 919, 914, 0, 906, 0,
	316, 967, 957, 968, 317, 318, 319, 969, 939, 940,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 988, 970, 329, 330, 971, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	340, 342, 344, 893, 343, 972, 346, 347, 349, 348,
	848, 220, 973, 350, 871, 958, 928, 352, 353, 0,
	902, 355, 903, 0, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 974, 363, 975, 982, 364, 357, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 983,
	374, 510, 375, 0, 376, 0, 377, 378, 379, 380,
	381, 382, 921, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 976, 400, 401, 402, 403, 858, 404,
	0, 405, 409, 410, 411, 412, 413, 414, 415, 0,
	421, 422, 894, 895, 897, 898, 417, 423, 424, 425,
	951, 426, 406, 407, 427, 428, 977, 429, 430, 916,
	896, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	962, 438, 439, 440, 984, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 280, 892, 0, 452, 935,
	936, 937, 938, 0, 459, 0, 453, 454, 985, 455,
	986, 869, 456, 457, 458, 0, 460, 461, 0, 852,
	462, 463, 464, 465, 466, 468, 952, 469, 0, 900,
	470, 471, 472, 521, 932, 979, 0, 474, 473, 524,
	0, 0, 0, 0, 475, 476, 525, 477, 478, 479,
	849, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 0, 0, 845, 846, 0, 0, 0, 0, 0,
	0, 0, 875, 0, 0, 1225, 873, 905, 862, 863,
	864, 860, 861, 874, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 954, 879, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 920, 899, 931,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 953, 241, 989, 990, 487, 0, 242, 960, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 963, 257, 258, 946, 944, 945, 950, 948, 947,
	949, 259, 260, 261, 262, 934, 264, 927, 926, 851,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 925,
	271, 0, 272, 0, 273, 274, 0, 275, 857, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 980, 981,
	870, 218, 0, 0, 0, 0, 0, 286, 287, 288,
	924, 922, 923, 0, 291, 0, 292, 0, 0, 964,
	293, 294, 0, 295, 987, 0, 880, 296, 0, 297,
	298, 299, 300, 1224, 956, 959, 351, 966, 301, 302,
	0, 303, 304, 305, 901, 0, 0, 219, 306, 308,
	315, 0, 965, 309, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 316, 967, 957, 968, 317, 318,
	319, 969, 939, 940, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 988, 970, 329, 330, 971,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 893, 343, 972,
	346, 347, 349, 348, 848, 220, 973, 350, 871, 958,
	928, 352, 353, 0, 902, 355, 903, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 974, 363, 975,
	982, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 983, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 921, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 976, 400, 401,
	402, 403, 858, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 894, 895, 897, 898,
	417, 423, 424, 425, 951, 426, 406, 407, 427, 428,
	977, 429, 430, 916, 896, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 962, 438, 439, 440, 984, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	892, 0, 452, 935, 936, 937, 938, 0, 459, 0,
	453, 454, 985, 455, 986, 869, 456, 457, 458, 0,
	460, 461, 0, 852, 462, 463, 464, 465, 466, 468,
	952, 469, 0, 900, 470, 471, 472, 521, 932, 979,
	0, 474, 473, 524, 0, 0, 0, 0, 475, 476,
	525, 477, 478, 479, 849, 0, 0, 0, 0, 0,
	847, 0, 0, 0, 0, 0, 0, 845, 846, 0,
	0, 0, 0, 0, 0, 0, 875, 0, 0, 1219,
	873, 905, 862, 863, 864, 860, 861, 874, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	954, 879, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 920, 899, 931, 889, 930, 929, 0, 235, 891,
	890, 238, 239, 240, 881, 953, 241, 989, 990, 487,
	0, 242, 960, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 963, 257, 258, 946, 944,
	945, 950, 948, 947, 949, 259, 260, 261, 262, 934,
	264, 927, 926, 851, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 925, 271, 0, 272, 0, 273, 274,
	0, 275, 857, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 980, 981, 870, 218, 0, 0, 0, 0,
	0, 286, 287, 288, 924, 922, 923, 0, 291, 0,
	292, 0, 0, 964, 293, 294, 0, 295, 987, 0,
	880, 296, 0, 297, 298, 299, 300, 1218, 956, 959,
	351, 966, 301, 302, 0, 303, 304, 305, 901, 0,
	0, 219, 306, 308, 315, 0, 965, 309, 913, 904,
	915, 917, 918, 919, 914, 0, 906, 0, 316, 967,
	957, 968, 317, 318, 319, 969, 939, 940, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 988,
	970, 329, 330, 971, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 893, 343, 972, 346, 347, 349, 348, 848, 220,
	973, 350, 871, 958, 928, 352, 353, 0, 902, 355,
	903, 0, 0, 358, 359, 360, 0, 0, 361, 362,
	507, 974, 363, 975, 982, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 983, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	921, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 976, 400, 401, 402, 403, 858, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 0, 421, 422,
	894, 895, 897, 898, 417, 423, 424, 425, 951, 426,
	406, 407, 427, 428, 977, 429, 430, 916, 896, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 962, 438,
	439, 440, 984, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 892, 0, 452, 935, 936, 937,
	938, 0, 459, 0, 453, 454, 985, 455, 986, 869,
	456, 457, 458, 0, 460, 461, 0, 852, 462, 463,
	464, 465, 466, 468, 952, 469, 0, 900, 470, 471,
	472, 521, 932, 979, 0, 474, 473, 524, 0, 0,
	0, 0, 475, 476, 525, 477, 478, 479, 849, 0,
	0, 0, 0, 0, 847, 0, 0, 0, 0, 0,
	0, 845, 846, 0, 0, 0, 0, 0, 0, 0,
	875, 0, 0, 1214, 873, 905, 862, 863, 864, 860,
	861, 874, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 222, 223, 224, 225, 0, 226, 0,
	0, 0, 0, 0, 954, 879, 0, 0, 0, 227,
	229, 228, 230, 231, 481, 920, 899, 931, 889, 930,
	929, 0, 235, 891, 890, 238, 239, 240, 881, 953,
	241, 989, 990, 487, 0, 242, 960, 0, 943, 0,
	243, 244, 245, 246, 247, 248, 0, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 963,
	257, 258, 946, 944, 945, 950, 948, 947, 949, 259,
	260, 261, 262, 934, 264, 927, 926, 851, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 925, 271, 0,
	272, 0, 273, 274, 0, 275, 857, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 980, 981, 870, 218,
	0, 0, 0, 0, 0, 286, 287, 288, 924, 922,
	923, 0, 291, 0, 292, 0, 0, 964, 293, 294,
	0, 295, 987, 0, 880, 296, 0, 297, 298, 299,
	300, 955, 956, 959, 351, 966, 301, 302, 0, 303,
	304, 305, 901, 0, 0, 219, 306, 308, 315, 0,
	965, 309, 913, 904, 915, 917, 918, 919, 914, 0,
	906, 0, 316, 967, 957, 968, 317, 318, 319, 969,
	939, 940, 0, 0, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 988, 970, 329, 330, 971, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 336, 337, 339,
	341, 338, 340, 342, 344, 893, 343, 972, 346, 347,
	349, 348, 848, 220, 973, 350, 871, 958, 928, 352,
	353, 0, 902, 355, 903, 0, 0, 358, 359, 360,
	0, 0, 361, 362, 507, 974, 363, 975, 982, 364,
	357, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 983, 374, 510, 375, 0, 376, 0, 377, 378,
	379, 380, 381, 382, 921, 383, 384, 0, 385, 386,
	387, 388, 389, 390, 0, 392, 393, 394, 391, 395,
	396, 397, 398, 0, 399, 976, 400, 401, 402, 403,
	858, 404, 0, 405, 409, 410, 411, 412, 413, 414,
	415, 0, 421, 422, 894, 895, 897, 898, 417, 423,
	424, 425, 951, 426, 406, 407, 427, 428, 977, 429,
	430, 916, 896, 432, 0, 433, 434, 435, 436, 408,
	437, 441, 962, 438, 439, 440, 984, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 280, 892, 0,
	452, 935, 936, 937, 938, 0, 459, 0, 453, 454,
	985, 455, 986, 869, 456, 457, 458, 0, 460, 461,
	0, 852, 462, 463, 464, 465, 466, 468, 952, 469,
	0, 900, 470, 471, 472, 521, 932, 979, 0, 474,
	473, 524, 0, 0, 0, 0, 475, 476, 525, 477,
	478, 479, 849, 0, 0, 0, 0, 0, 847, 0,
	0, 0, 0, 0, 0, 845, 846, 905, 862, 863,
	864, 860, 861, 874, 875, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 954, 879, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 920, 899, 931,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 953, 241, 989, 990, 487, 0, 242, 960, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 963, 257, 258, 946, 944, 945, 950, 948, 947,
	949, 259, 260, 261, 262, 934, 264, 927, 926, 851,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 925,
	271, 0, 272, 0, 273, 274, 0, 275, 857, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 980, 981,
	870, 218, 0, 0, 0, 0, 0, 286, 287, 288,
	924, 922, 923, 0, 291, 0, 292, 0, 0, 964,
	293, 294, 0, 295, 987, 0, 880, 296, 0, 297,
	298, 299, 300, 955, 956, 959, 351, 966, 301, 302,
	0, 303, 304, 305, 901, 0, 0, 219, 306, 308,
	315, 0, 965, 309, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 316, 967, 957, 968, 317, 318,
	319, 969, 939, 940, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 988, 970, 329, 330, 971,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 893, 343, 972,
	346, 347, 349, 348, 848, 220, 973, 350, 871, 958,
	928, 352, 353, 0, 902, 355, 903, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 974, 363, 975,
	982, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 983, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 921, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 976, 400, 401,
	402, 403, 858, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 894, 895, 897, 898,
	417, 423, 424, 425, 951, 426, 406, 407, 427, 428,
	977, 429, 430, 916, 896, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 962, 438, 439, 440, 984, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	892, 0, 452, 935, 936, 937, 938, 0, 459, 0,
	453, 454, 985, 455, 986, 869, 456, 457, 458, 0,
	460, 461, 0, 852, 462, 463, 464, 465, 466, 468,
	952, 469, 0, 900, 470, 471, 472, 521, 932, 979,
	0, 474, 473, 524, 0, 0, 0, 0, 475, 476,
	525, 477, 478, 479, 849, 0, 0, 0, 0, 0,
	847, 0, 0, 0, 0, 0, 0, 845, 846, 905,
	862, 863, 864, 860, 861, 874, 875, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 221, 222, 223, 224,
	225, 0, 226, 0, 0, 0, 0, 0, 954, 879,
	0, 0, 0, 227, 229, 228, 230, 231, 481, 920,
	899, 931, 889, 930, 929, 0, 235, 891, 890, 238,
	239, 240, 881, 953, 241, 989, 990, 487, 0, 242,
	960, 0, 943, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 963, 257, 3544, 946, 944, 945, 950,
	948, 947, 949, 259, 260, 261, 262, 934, 264, 927,
	926, 851, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 925, 271, 0, 272, 0, 273, 274, 0, 275,
	857, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	980, 981, 870, 218, 0, 0, 0, 0, 0, 286,
	287, 288, 924, 922, 923, 0, 291, 0, 292, 0,
	0, 964, 293, 294, 0, 295, 987, 0, 880, 296,
	0, 297, 298, 299, 300, 955, 956, 959, 351, 966,
	301, 302, 0, 303, 304, 305, 901, 0, 0, 219,
	306, 308, 315, 0, 965, 309, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 316, 967, 957, 968,
	317, 318, 319, 969, 939, 940, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 988, 970, 329,
	330, 971, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 893,
	343, 972, 346, 347, 349, 348, 848, 220, 973, 350,
	871, 958, 928, 352, 353, 0, 902, 355, 903, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 974,
	363, 975, 982, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 983, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 381, 382, 921, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 976,
	400, 401, 402, 403, 858, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 0, 421, 422, 894, 895,
	897, 898, 417, 423, 424, 425, 951, 426, 406, 407,
	427, 428, 977, 429, 430, 916, 896, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 962, 438, 439, 440,
	984, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 280, 892, 0, 452, 935, 936, 937, 938, 0,
	459, 0, 453, 454, 985, 455, 986, 869, 456, 457,
	458, 0, 3543, 461, 0, 852, 462, 463, 464, 465,
	466, 468, 952, 469, 0, 900, 470, 471, 472, 521,
	932, 979, 0, 474, 473, 524, 0, 0, 0, 0,
	475, 476, 525, 477, 478, 479, 849, 0, 0, 0,
	0, 0, 847, 0, 0, 0, 0, 0, 0, 845,
	846, 905, 862, 863, 864, 860, 861, 874, 875, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	954, 879, 0, 0, 0, 227, 229, 228, 230, 231,
	3542, 920, 899, 931, 889, 930, 929, 0, 235, 891,
	890, 238, 239, 240, 881, 953, 241, 989, 990, 487,
	0, 242, 960, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 963, 257, 3544, 946, 944,
	945, 950, 948, 947, 949, 259, 260, 261, 262, 934,
	264, 927, 926, 851, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 925, 271, 0, 272, 0, 273, 274,
	0, 275, 857, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 980, 981, 870, 218, 0, 0, 0, 0,
	0, 286, 287, 288, 924, 922, 923, 0, 291, 0,
	292, 0, 0, 964, 293, 294, 0, 295, 987, 0,
	880, 296, 0, 297, 298, 299, 300, 955, 956, 959,
	351, 966, 301, 302, 0, 303, 304, 305, 901, 0,
	0, 219, 306, 308, 315, 0, 965, 309, 913, 904,
	915, 917, 918, 919, 914, 0, 906, 0, 316, 967,
	957, 968, 317, 318, 319, 969, 939, 940, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 988,
	970, 329, 330, 971, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 893, 343, 972, 346, 347, 349, 348, 848, 220,
	973, 350, 871, 958, 928, 352, 353, 0, 902, 355,
	903, 0, 0, 358, 359, 360, 0, 0, 361, 362,
	507, 974, 363, 975, 982, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 983, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	921, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 976, 400, 401, 402, 403, 858, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 0, 421, 422,
	894, 895, 897, 898, 417, 423, 424, 425, 951, 426,
	406, 407, 427, 428, 977, 429, 430, 916, 896, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 962, 438,
	439, 440, 984, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 892, 0, 452, 935, 936, 937,
	938, 0, 459, 0, 453, 454, 985, 455, 986, 869,
	456, 457, 458, 0, 3543, 461, 0, 852, 462, 463,
	464, 465, 466, 468, 952, 469, 0, 900, 470, 471,
	472, 521, 932, 979, 0, 474, 473, 524, 0, 0,
	0, 0, 475, 476, 525, 477, 478, 479, 849, 0,
	0, 0, 0, 0, 847, 0, 0, 0, 0, 0,
	0, 845, 846, 905, 862, 863, 864, 2501, 2502, 874,
	875, 0, 0, 0, 873, 0, 0, 0, 0, 0,
	221, 222, 223, 224, 225, 0, 226, 0, 0, 0,
	0, 0, 954, 879, 0, 0, 0, 227, 229, 228,
	230, 231, 481, 920, 899, 931, 889, 930, 929, 0,
	235, 891, 890, 238, 239, 240, 881, 953, 241, 989,
	990, 487, 0, 242, 960, 0, 943, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 963, 257, 258,
	946, 944, 945, 950, 948, 947, 949, 259, 260, 261,
	262, 934, 264, 927, 926, 851, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 925, 271, 0, 272, 0,
	273, 274, 0, 275, 857, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 980, 981, 870, 218, 0, 0,
	0, 0, 0, 286, 287, 288, 924, 922, 923, 0,
	291, 0, 292, 0, 0, 964, 293, 294, 0, 295,
	987, 0, 880, 296, 0, 297, 298, 299, 300, 955,
	956, 959, 351, 966, 301, 302, 0, 303, 304, 305,
	901, 0, 0, 219, 306, 308, 315, 0, 965, 309,
	913, 904, 915, 917, 918, 919, 914, 0, 906, 0,
	316, 967, 957, 968, 317, 318, 319, 969, 939, 940,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 988, 970, 329, 330, 971, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	340, 342, 344, 893, 343, 972, 346, 347, 349, 348,
	848, 220, 973, 350, 871, 958, 928, 352, 353, 0,
	902, 355, 903, 0, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 974, 363, 975, 982, 364, 357, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 983,
	374, 510, 375, 0, 376, 0, 377, 378, 379, 380,
	381, 382, 921, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 976, 400, 401, 402, 403, 858, 404,
	0, 405, 409, 410, 411, 412, 413, 414, 415, 0,
	421, 422, 894, 895, 897, 898, 417, 423, 424, 425,
	951, 426, 406, 407, 427, 428, 977, 429, 430, 916,
	896, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	962, 438, 439, 440, 984, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 280, 892, 0, 452, 935,
	936, 937, 938, 0, 459, 0, 453, 454, 985, 455,
	986, 869, 456, 457, 458, 0, 460, 461, 0, 852,
	462, 463, 464, 465, 466, 468, 952, 469, 0, 900,
	470, 471, 472, 521, 932, 979, 0, 474, 473, 524,
	0, 0, 0, 0, 475, 476, 525, 477, 478, 479,
	849, 0, 0, 0, 0, 0, 847, 0, 0, 0,
	0, 0, 0, 845, 846, 905, 862, 863, 864, 2499,
	2500, 874, 875, 0, 0, 0, 873, 0, 0, 0,
	0, 0, 221, 222, 223, 224, 225, 0, 226, 0,
	0, 0, 0, 0, 954, 879, 0, 0, 0, 227,
	229, 228, 230, 231, 481, 920, 899, 931, 889, 930,
	929, 0, 235, 891, 890, 238, 239, 240, 881, 953,
	241, 989, 990, 487, 0, 242, 960, 0, 943, 0,
	243, 244, 245, 246, 247, 248, 0, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 963,
	257, 258, 946, 944, 945, 950, 948, 947, 949, 259,
	260, 261, 262, 934, 264, 927, 926, 851, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 925, 271, 0,
	272, 0, 273, 274, 0, 275, 857, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 980, 981, 870, 218,
	0, 0, 0, 0, 0, 286, 287, 288, 924, 922,
	923, 0, 291, 0, 292, 0, 0, 964, 293, 294,
	0, 295, 987, 0, 880, 296, 0, 297, 298, 299,
	300, 955, 956, 959, 351, 966, 301, 302, 0, 303,
	304, 305, 901, 0, 0, 219, 306, 308, 315, 0,
	965, 309, 913, 904, 915, 917, 918, 919, 914, 0,
	906, 0, 316, 967, 957, 968, 317, 318, 319, 969,
	939, 940, 0, 0, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 988, 970, 329, 330, 971, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 336, 337, 339,
	341, 338, 340, 342, 344, 893, 343, 972, 346, 347,
	349, 348, 848, 220, 973, 350, 871, 958, 928, 352,
	353, 0, 902, 355, 903, 0, 0, 358, 359, 360,
	0, 0, 361, 362, 507, 974, 363, 975, 982, 364,
	357, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 983, 374, 510, 375, 0, 376, 0, 377, 378,
	379, 380, 381, 382, 921, 383, 384, 0, 385, 386,
	387, 388, 389, 390, 0, 392, 393, 394, 391, 395,
	396, 397, 398, 0, 399, 976, 400, 401, 402, 403,
	858, 404, 0, 405, 409, 410, 411, 412, 413, 414,
	415, 0, 421, 422, 894, 895, 897, 898, 417, 423,
	424, 425, 951, 426, 406, 407, 427, 428, 977, 429,
	430, 916, 896, 432, 0, 433, 434, 435, 436, 408,
	437, 441, 962, 438, 439, 440, 984, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 280, 892, 0,
	452, 935, 936, 937, 938, 0, 459, 0, 453, 454,
	985, 455, 986, 869, 456, 457, 458, 0, 460, 461,
	0, 852, 462, 463, 464, 465, 466, 468, 952, 469,
	0, 900, 470, 471, 472, 521, 932, 979, 0, 474,
	473, 524, 0, 0, 0, 0, 475, 476, 525, 477,
	478, 479, 849, 0, 0, 0, 0, 0, 847, 0,
	0, 0, 0, 0, 0, 845, 846, 905, 862, 863,
	864, 860, 861, 874, 875, 0, 0, 0, 873, 0,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 954, 879, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 920, 899, 931,
	889, 930, 929, 0, 235, 891, 890, 238, 239, 240,
	881, 953, 241, 989, 990, 487, 0, 242, 960, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 963, 257, 258, 946, 944, 945, 950, 948, 947,
	949, 259, 260, 261, 262, 934, 264, 927, 926, 851,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 925,
	271, 0, 272, 0, 273, 274, 0, 275, 857, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 980, 981,
	870, 218, 0, 0, 0, 0, 0, 286, 287, 288,
	924, 922, 923, 0, 291, 0, 292, 0, 0, 964,
	293, 294, 0, 295, 987, 0, 880, 296, 0, 297,
	298, 299, 300, 955, 956, 959, 351, 966, 301, 302,
	0, 303, 304, 305, 901, 0, 0, 219, 306, 308,
	315, 0, 965, 309, 913, 904, 915, 917, 918, 919,
	914, 0, 906, 0, 316, 967, 957, 968, 317, 318,
	319, 969, 939, 940, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 988, 970, 329, 330, 971,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 893, 343, 972,
	346, 347, 349, 348, 848, 220, 973, 350, 871, 958,
	928, 352, 353, 0, 902, 355, 903, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 974, 363, 975,
	982, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 983, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 921, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 976, 400, 401,
	402, 403, 858, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 894, 895, 897, 898,
	417, 423, 424, 425, 951, 426, 406, 407, 427, 428,
	977, 429, 430, 916, 896, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 962, 438, 439, 440, 984, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	892, 0, 452, 935, 936, 937, 938, 0, 459, 0,
	453, 454, 985, 455, 986, 869, 456, 457, 458, 0,
	460, 461, 0, 852, 462, 463, 464, 465, 466, 468,
	952, 469, 0, 900, 470, 471, 472, 521, 932, 979,
	0, 474, 473, 524, 0, 0, 0, 0, 475, 476,
	525, 477, 478, 479, 849, 0, 0, 0, 0, 0,
	847, 0, 0, 0, 0, 0, 0, 1993, 1994, 905,
	862, 863, 864, 860, 861, 874, 875, 0, 0, 0,
	873, 0, 0, 0, 0, 0, 221, 222, 223, 224,
	225, 0, 226, 0, 0, 0, 0, 0, 954, 879,
	0, 0, 0, 227, 229, 228, 230, 231, 481, 920,
	899, 931, 889, 930, 929, 0, 235, 891, 890, 238,
	239, 240, 881, 953, 241, 989, 990, 487, 0, 242,
	960, 0, 943, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 963, 257, 258, 946, 944, 945, 950,
	948, 947, 949, 259, 260, 261, 262, 934, 264, 927,
	926, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 925, 271, 0, 272, 0, 273, 274, 0, 275,
	857, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	980, 981, 870, 218, 0, 0, 0, 0, 0, 286,
	287, 288, 924, 922, 923, 0, 291, 0, 292, 0,
	0, 964, 293, 294, 0, 295, 987, 0, 880, 296,
	0, 297, 298, 299, 300, 955, 956, 959, 351, 966,
	301, 302, 0, 303, 304, 305, 901, 0, 0, 219,
	306, 308, 315, 0, 965, 309, 913, 904, 915, 917,
	918, 919, 914, 0, 906, 0, 316, 967, 957, 968,
	317, 318, 319, 969, 939, 940, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 988, 970, 329,
	330, 971, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 893,
	343, 972, 346, 347, 349, 348, 0, 220, 973, 350,
	871, 958, 928, 352, 353, 0, 902, 355, 903, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 974,
	363, 975, 982, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 983, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 381, 382, 921, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 976,
	400, 401, 402, 403, 858, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 0, 421, 422, 894, 895,
	897, 898, 417, 423, 424, 425, 951, 426, 406, 407,
	427, 428, 977, 429, 430, 916, 896, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 962, 438, 439, 440,
	984, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 280, 892, 0, 452, 935, 936, 937, 938, 0,
	459, 0, 453, 454, 985, 455, 986, 869, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 465,
	466, 468, 952, 469, 0, 900, 470, 471, 472, 521,
	932, 979, 0, 474, 473, 524, 0, 0, 0, 0,
	475, 476, 525, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 2168, 0, 0, 0, 0, 0, 0, 2166,
	2167, 905, 862, 863, 864, 860, 861, 874, 875, 0,
	0, 0, 873, 0, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	954, 879, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 920, 899, 931, 889, 930, 929, 0, 235, 891,
	890, 238, 239, 240, 881, 953, 241, 989, 990, 487,
	0, 242, 960, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 963, 257, 258, 946, 944,
	945, 950, 948, 947, 949, 259, 260, 261, 262, 934,
	264, 927, 926, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 925, 271, 0, 272, 0, 273, 274,
	0, 275, 857, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 980, 981, 870, 218, 0, 0, 0, 0,
	0, 286, 287, 288, 924, 922, 923, 0, 291, 0,
	292, 0, 0, 964, 293, 294, 0, 295, 987, 0,
	880, 296, 0, 297, 298, 299, 300, 955, 956, 959,
	351, 966, 301, 302, 0, 303, 304, 305, 901, 0,
	0, 219, 306, 308, 315, 0, 965, 309, 913, 904,
	915, 917, 918, 919, 914, 0, 906, 0, 316, 967,
	957, 968, 317, 318, 319, 969, 939, 940, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 988,
	970, 329, 330, 971, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 893, 343, 972, 346, 347, 349, 348, 0, 220,
	973, 350, 871, 958, 928, 352, 353, 0, 902, 355,
	903, 0, 0, 358, 359, 360, 0, 0, 361, 362,
	507, 974, 363, 975, 982, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 983, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	921, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 976, 400, 401, 402, 403, 2494, 2495, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 0, 421, 422,
	894, 895, 897, 898, 417, 423, 424, 425, 951, 426,
	406, 407, 427, 428, 977, 429, 430, 916, 896, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 962, 438,
	439, 440, 984, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 892, 0, 452, 935, 936, 937,
	938, 0, 459, 0, 453, 454, 985, 455, 986, 869,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 465, 466, 468, 952, 469, 0, 900, 470, 471,
	472, 521, 932, 979, 0, 474, 473, 524, 0, 0,
	0, 0, 475, 476, 525, 477, 478, 479, 905, 862,
	863, 864, 860, 861, 874, 0, 0, 0, 0, 0,
	0, 1756, 1757, 0, 0, 221, 222, 223, 224, 225,
	875, 226, 0, 0, 873, 0, 0, 954, 879, 0,
	0, 0, 227, 229, 228, 230, 231, 0, 920, 899,
	931, 889, 930, 929, 0, 235, 891, 890, 238, 239,
	240, 881, 953, 241, 989, 990, 487, 0, 242, 960,
	0, 943, 0, 243, 244, 245, 246, 247, 248, 0,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 963, 257, 3544, 946, 944, 945, 950, 948,
	947, 949, 259, 260, 261, 262, 934, 264, 927, 926,
	851, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	925, 271, 0, 272, 0, 273, 274, 0, 275, 857,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 980,
	981, 870, 218, 0, 0, 0, 0, 0, 286, 287,
	288, 924, 922, 923, 0, 291, 0, 292, 0, 0,
	964, 293, 294, 0, 295, 987, 0, 880, 296, 0,
	297, 298, 299, 300, 955, 956, 959, 351, 0, 301,
	302, 0, 303, 304, 305, 901, 0, 0, 219, 306,
	308, 315, 0, 965, 309, 913, 904, 915, 917, 918,
	919, 914, 0, 906, 0, 316, 0, 957, 0, 317,
	318, 319, 969, 939, 940, 0, 0, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 988, 970, 329, 330,
	0, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	336, 337, 339, 341, 338, 340, 342, 344, 893, 343,
	972, 346, 347, 349, 348, 848, 220, 0, 350, 871,
	958, 928, 352, 353, 0, 902, 355, 903, 0, 0,
	358, 359, 360, 0, 0, 361, 362, 507, 974, 363,
	975, 982, 364, 357, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 373, 983, 374, 510, 375, 0, 376,
	0, 377, 378, 379, 380, 381, 382, 921, 383, 384,
	0, 385, 386, 387, 388, 389, 390, 0, 392, 393,
	394, 391, 395, 396, 397, 398, 0, 399, 976, 400,
	401, 402, 403, 858, 404, 0, 405, 409, 410, 411,
	412, 413, 414, 415, 0, 421, 422, 894, 895, 897,
	898, 417, 423, 424, 425, 951, 426, 406, 407, 427,
	428, 0, 429, 430, 916, 896, 432, 0, 433, 434,
	435, 436, 408, 437, 441, 962, 438, 439, 440, 984,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	280, 892, 0, 452, 935, 936, 937, 938, 0, 459,
	0, 453, 454, 985, 455, 986, 869, 456, 457, 458,
	0, 3543, 461, 0, 852, 462, 463, 464, 465, 466,
	468, 952, 469, 0, 900, 470, 471, 472, 521, 932,
	979, 0, 474, 473, 524, 0, 0, 0, 0, 475,
	476, 525, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 838, 0, 1026, 0, 0, 845, 846,
	0, 0, 0, 0, 0, 0, 0, 875, 0, 0,
	0, 873, 221, 222, 223, 224, 225, 0, 226, 0,
	0, 0, 0, 0, 954, 0, 0, 0, 0, 227,
	229, 228, 230, 231, 481, 482, 232, 483, 233, 234,
	484, 0, 235, 236, 237, 238, 239, 240, 0, 953,
	241, 485, 486, 487, 0, 242, 960, 0, 943, 0,
	243, 244, 245, 246, 247, 248, 0, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 963,
	257, 258, 946, 944, 945, 950, 948, 947, 949, 259,
	260, 261, 262, 263, 264, 489, 490, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 491, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 980, 981, 0, 218,
	0, 0, 0, 0, 0, 286, 287, 288, 494, 289,
	290, 0, 291, 0, 292, 0, 0, 964, 293, 294,
	0, 295, 987, 0, 496, 296, 0, 297, 298, 299,
	300, 955, 956, 959, 351, 966, 301, 302, 0, 303,
	304, 305, 307, 0, 0, 219, 306, 308, 315, 0,
	965, 309, 500, 311, 310, 312, 313, 314, 501, 0,
	502, 0, 316, 967, 957, 968, 317, 318, 319, 969,
	320, 321, 0, 0, 322, 323, 324, 325, 1013, 327,
	326, 0, 328, 988, 970, 329, 330, 971, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 336, 337, 339,
	341, 338, 340, 342, 344, 345, 343, 972, 346, 347,
	349, 348, 0, 220, 973, 350, 0, 958, 506, 352,
	353, 0, 354, 355, 356, 0, 1018, 358, 359, 360,
	0, 0, 361, 362, 507, 974, 363, 975, 982, 364,
	357, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 983, 374, 510, 375, 0, 376, 0, 377, 378,
	379, 380, 381, 382, 511, 383, 384, 0, 385, 386,
	387, 388, 389, 390, 0, 392, 393, 394, 391, 395,
	396, 397, 398, 0, 399, 976, 400, 401, 402, 403,
	512, 1020, 0, 405, 409, 410, 411, 412, 413, 414,
	415, 184, 421, 422, 416, 418, 419, 420, 417, 423,
	424, 425, 951, 426, 406, 407, 427, 428, 977, 429,
	430, 513, 431, 432, 0, 433, 434, 435, 436, 408,
	437, 441, 442, 438, 439, 440, 984, 0, 444, 445,
	443, 186, 446, 447, 448, 449, 450, 280, 451, 0,
	452, 515, 516, 517, 518, 0, 459, 0, 453, 454,
	985, 455, 986, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 465, 466, 468, 952, 469,
	0, 467, 470, 471, 472, 1334, 522, 523, 0, 474,
	473, 524, 1026, 0, 0, 178, 475, 476, 525, 477,
	478, 479, 0, 179, 0, 0, 0, 0, 0, 221,
	222, 223, 224, 225, 0, 226, 0, 0, 0, 0,
	0, 954, 1010, 0, 1636, 0, 227, 229, 228, 230,
	231, 481, 482, 232, 483, 233, 234, 484, 0, 235,
	236, 237, 238, 239, 240, 0, 953, 241, 485, 486,
	487, 0, 242, 960, 0, 943, 0, 243, 244, 245,
	246, 247, 248, 0, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 963, 257, 258, 946,
	944, 945, 950, 948, 947, 949, 259, 260, 261, 262,
	263, 264, 489, 490, 0, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 270, 271, 0, 272, 0, 273,
	274, 0, 275, 491, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 980, 981, 0, 218, 0, 0, 0,
	0, 0, 286, 287, 288, 494, 289, 290, 0, 291,
	0, 292, 0, 0, 964, 293, 294, 0, 295, 987,
	0, 496, 296, 0, 297, 298, 299, 300, 955, 956,
	959, 351, 966, 301, 302, 0, 303, 304, 305, 307,
	0, 0, 219, 306, 308, 315, 0, 965, 309, 500,
	311, 310, 312, 313, 314, 501, 0, 502, 0, 316,
	967, 957, 968, 317, 318, 319, 969, 320, 321, 0,
	0, 322, 323, 324, 325, 1013, 327, 326, 0, 328,
	988, 970, 329, 330, 971, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 336, 337, 339, 341, 338, 340,
	342, 344, 345, 343, 972, 346, 347, 349, 348, 0,
	220, 973, 350, 0, 958, 506, 352, 353, 0, 354,
	355, 356, 0, 1018, 358, 359, 360, 0, 0, 361,
	362, 507, 974, 363, 975, 982, 364, 357, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 983, 374,
	510, 375, 0, 376, 0, 377, 378, 379, 380, 381,
	382, 511, 383, 384, 0, 385, 386, 387, 388, 389,
	390, 0, 392, 393, 394, 391, 395, 396, 397, 398,
	0, 399, 976, 400, 401, 402, 403, 512, 1020, 0,
	405, 409, 410, 411, 412, 413, 414, 415, 184, 421,
	422, 416, 418, 419, 420, 417, 423, 424, 425, 951,
	426, 406, 407, 427, 428, 977, 429, 430, 513, 431,
	432, 0, 433, 434, 435, 436, 408, 437, 441, 442,
	438, 439, 440, 984, 0, 444, 445, 443, 186, 446,
	447, 448, 449, 450, 280, 451, 0, 452, 515, 516,
	517, 518, 0, 459, 0, 453, 454, 985, 455, 986,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 465, 466, 468, 952, 469, 0, 467, 470,
	471, 472, 1334, 522, 523, 0, 474, 473, 524, 2639,
	0, 1026, 178, 475, 476, 525, 477, 478, 479, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 1010,
	954, 1636, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 482, 232, 483, 233, 234, 484, 0, 235, 236,
	237, 238, 239, 240, 0, 953, 241, 485, 486, 487,
	0, 242, 960, 0, 943, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 963, 257, 258, 946, 944,
	945, 950, 948, 947, 949, 259, 260, 261, 262, 263,
	264, 489, 490, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 491, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 980, 981, 0, 218, 0, 0, 0, 0,
	0, 286, 287, 288, 494, 289, 290, 0, 291, 0,
	292, 0, 0, 964, 293, 294, 0, 295, 987, 0,
	496, 296, 0, 297, 298, 299, 300, 955, 956, 959,
	351, 966, 301, 302, 0, 303, 304, 305, 307, 0,
	0, 219, 306, 308, 315, 0, 965, 309, 500, 311,
	310, 312, 313, 314, 501, 0, 502, 0, 316, 967,
	957, 968, 317, 318, 319, 969, 320, 321, 0, 0,
	322, 323, 324, 325, 1013, 327, 326, 0, 328, 988,
	970, 329, 330, 971, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 345, 343, 972, 346, 347, 349, 348, 0, 220,
	973, 350, 0, 958, 506, 352, 353, 0, 354, 355,
	356, 0, 1018, 358, 359, 360, 0, 0, 361, 362,
	507, 974, 363, 975, 982, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 983, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	511, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 976, 400, 401, 402, 403, 512, 1020, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 0, 421, 422,
	416, 418, 419, 420, 417, 423, 424, 425, 951, 426,
	406, 407, 427, 428, 977, 429, 430, 513, 431, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 442, 438,
	439, 440, 984, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 451, 0, 452, 515, 516, 517,
	518, 0, 459, 0, 453, 454, 985, 455, 986, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 465, 466, 468, 952, 469, 0, 467, 470, 471,
	472, 521, 522, 523, 0, 474, 473, 524, 1009, 0,
	1026, 0, 475, 476, 525, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 226, 0, 0, 0, 0, 1010, 954,
	1015, 0, 0, 0, 227, 229, 228, 230, 231, 481,
	482, 232, 483, 233, 234, 484, 0, 235, 236, 237,
	238, 239, 240, 0, 953, 241, 485, 486, 487, 0,
	242, 960, 0, 943, 0, 243, 244, 245, 246, 247,
	248, 0, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 963, 257, 258, 946, 944, 945,
	950, 948, 947, 949, 259, 260, 261, 262, 263, 264,
	489, 490, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 491, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 980, 981, 0, 218, 0, 0, 0, 0, 0,
	286, 287, 288, 494, 289, 290, 0, 291, 0, 292,
	0, 0, 964, 293, 294, 0, 295, 987, 0, 496,
	296, 0, 297, 298, 299, 300, 955, 956, 959, 351,
	966, 301, 302, 0, 303, 304, 305, 307, 0, 0,
	219, 306, 308, 315, 0, 965, 309, 500, 311, 310,
	312, 313, 314, 501, 0, 502, 0, 316, 967, 957,
	968, 317, 318, 319, 969, 320, 321, 0, 0, 322,
	323, 324, 325, 1013, 327, 326, 0, 328, 988, 970,
	329, 330, 971, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 336, 337, 339, 341, 338, 340, 342, 344,
	345, 343, 972, 346, 347, 349, 348, 0, 220, 973,
	350, 0, 958, 506, 352, 353, 0, 354, 355, 356,
	0, 1018, 358, 359, 360, 0, 0, 361, 362, 507,
	974, 363, 975, 982, 364, 357, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 983, 374, 510, 375,
	0, 376, 0, 377, 378, 379, 380, 381, 382, 511,
	383, 384, 0, 385, 386, 387, 388, 389, 390, 0,
	392, 393, 394, 391, 395, 396, 397, 398, 0, 399,
	976, 400, 401, 402, 403, 512, 1020, 0, 405, 409,
	410, 411, 412, 413, 414, 415, 0, 421, 422, 416,
	418, 419, 420, 417, 423, 424, 425, 951, 426, 406,
	407, 427, 428, 977, 429, 430, 513, 431, 432, 0,
	433, 434, 435, 436, 408, 437, 441, 442, 438, 439,
	440, 984, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 280, 451, 0, 452, 515, 516, 517, 518,
	0, 459, 0, 453, 454, 985, 455, 986, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	465, 466, 468, 952, 469, 0, 467, 470, 471, 472,
	521, 522, 523, 0, 474, 473, 524, 1026, 0, 0,
	0, 475, 476, 525, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 954, 1010, 0, 1015,
	0, 227, 229, 228, 230, 231, 481, 482, 232, 483,
	233, 234, 484, 0, 235, 236, 237, 238, 239, 240,
	0, 953, 241, 485, 486, 487, 0, 242, 960, 0,
	943, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 963, 257, 258, 946, 944, 945, 950, 948, 947,
	949, 259, 260, 261, 262, 263, 264, 489, 490, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 491, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 980, 981,
	0, 218, 0, 0, 0, 0, 0, 286, 287, 288,
	494, 289, 290, 0, 291, 0, 292, 0, 0, 964,
	293, 294, 0, 295, 987, 0, 496, 296, 0, 297,
	298, 299, 300, 955, 956, 959, 351, 966, 301, 302,
	0, 303, 304, 305, 307, 0, 0, 219, 306, 308,
	315, 0, 965, 309, 500, 311, 310, 312, 313, 314,
	501, 0, 502, 0, 316, 967, 957, 968, 317, 318,
	319, 969, 320, 321, 0, 0, 322, 323, 324, 325,
	1013, 327, 326, 0, 328, 988, 970, 329, 330, 971,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 345, 343, 972,
	346, 347, 349, 348, 0, 220, 973, 350, 0, 958,
	506, 352, 353, 0, 354, 355, 356, 0, 1018, 358,
	359, 360, 0, 0, 361, 362, 507, 974, 363, 975,
	982, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 983, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 511, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 976, 400, 401,
	402, 403, 512, 1020, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 416, 418, 419, 420,
	417, 423, 424, 425, 951, 426, 406, 407, 427, 428,
	977, 429, 430, 513, 431, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 442, 438, 439, 440, 984, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	451, 0, 452, 515, 516, 517, 518, 0, 459, 0,
	453, 454, 985, 455, 986, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 465, 466, 468,
	952, 469, 0, 467, 470, 471, 472, 521, 522, 523,
	0, 474, 473, 524, 1026, 0, 0, 0, 475, 476,
	525, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 0, 226, 0, 0,
	0, 0, 0, 954, 1010, 0, 1015, 0, 227, 229,
	228, 230, 231, 481, 482, 232, 483, 233, 234, 484,
	0, 235, 236, 237, 238, 239, 240, 0, 953, 241,
	485, 486, 487, 0, 242, 960, 0, 943, 0, 243,
	244, 245, 246, 247, 248, 0, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 963, 257,
	258, 946, 944, 945, 950, 948, 947, 949, 259, 260,
	261, 262, 263, 264, 489, 490, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 491, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 980, 981, 0, 218, 0,
	0, 0, 0, 0, 286, 287, 288, 494, 289, 290,
	0, 291, 0, 292, 0, 0, 964, 293, 294, 0,
	295, 987, 0, 496, 296, 0, 297, 298, 299, 300,
	955, 956, 959, 351, 966, 301, 302, 0, 303, 304,
	305, 307, 0, 0, 219, 306, 308, 315, 0, 965,
	309, 500, 311, 310, 312, 313, 314, 501, 0, 502,
	0, 316, 967, 957, 968, 317, 318, 319, 969, 320,
	321, 0, 0, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 988, 970, 329, 330, 971, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 336, 337, 339, 341,
	338, 340, 342, 344, 345, 343, 972, 346, 347, 349,
	348, 0, 220, 973, 350, 0, 958, 506, 352, 353,
	0, 354, 355, 356, 0, 0, 358, 359, 360, 0,
	0, 361, 362, 507, 974, 363, 975, 982, 364, 357,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	983, 374, 510, 375, 0, 376, 0, 377, 378, 379,
	380, 381, 382, 511, 383, 384, 0, 385, 386, 387,
	388, 389, 390, 0, 392, 393, 394, 391, 395, 396,
	397, 398, 0, 399, 976, 400, 401, 402, 403, 512,
	1020, 0, 405, 409, 410, 411, 412, 413, 414, 415,
	0, 421, 422, 416, 418, 419, 420, 417, 423, 424,
	425, 951, 426, 406, 407, 427, 428, 977, 429, 430,
	513, 431, 432, 0, 433, 434, 435, 436, 408, 437,
	441, 442, 438, 439, 440, 984, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 280, 451, 0, 452,
	515, 516, 517, 518, 0, 459, 0, 453, 454, 985,
	455, 986, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 465, 466, 468, 952, 469, 0,
	467, 470, 471, 472, 521, 522, 523, 0, 474, 473,
	524, 838, 0, 1189, 0, 475, 476, 525, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	221, 222, 223, 224, 225, 0, 226, 0, 0, 0,
	0, 0, 480, 1531, 0, 0, 0, 227, 229, 228,
	230, 231, 481, 482, 232, 483, 233, 234, 484, 0,
	235, 236, 237, 238, 239, 240, 0, 0, 241, 485,
	486, 487, 0, 242, 488, 0, 1092, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 963, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 489, 490, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 491, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 492, 493, 0, 218, 0, 0,
	0, 0, 0, 286, 287, 288, 494, 289, 290, 0,
	291, 0, 292, 0, 0, 964, 293, 294, 0, 295,
	495, 0, 496, 296, 0, 297, 298, 299, 300, 497,
	498, 499, 351, 966, 301, 302, 0, 303, 304, 305,
	307, 0, 0, 0, 306, 308, 315, 0, 965, 309,
	500, 311, 310, 312, 313, 314, 501, 0, 502, 0,
	316, 967, 503, 968, 317, 318, 319, 969, 320, 321,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 504, 970, 329, 330, 971, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	340, 342, 344, 345, 343, 972, 346, 347, 349, 348,
	0, 0, 973, 350, 0, 505, 506, 352, 353, 0,
	354, 355, 356, 0, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 974, 363, 975, 508, 364, 357, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 509,
	374, 510, 375, 0, 376, 0, 377, 378, 379, 380,
	381, 382, 511, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 976, 400, 401, 402, 403, 512, 404,
	0, 405, 409, 410, 411, 412, 413, 414, 415, 184,
	421, 422, 416, 418, 419, 420, 417, 423, 424, 425,
	0, 426, 406, 407, 427, 428, 977, 429, 430, 513,
	431, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	442, 438, 439, 440, 514, 0, 444, 445, 443, 186,
	446, 447, 448, 449, 450, 280, 451, 0, 452, 515,
	516, 517, 518, 0, 459, 0, 453, 454, 519, 455,
	520, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 465, 466, 468, 0, 469, 0, 467,
	470, 471, 472, 1334, 522, 523, 0, 474, 473, 524,
	1331, 0, 1189, 178, 475, 476, 525, 477, 478, 479,
	0, 179, 0, 0, 0, 0, 0, 0, 0, 221,
	222, 223, 224, 225, 0, 226, 0, 0, 0, 0,
	0, 480, 153, 0, 0, 0, 227, 229, 228, 230,
	231, 481, 482, 232, 483, 233, 234, 484, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 485, 486,
	487, 0, 242, 488, 0, 1092, 0, 243, 244, 245,
	246, 247, 248, 0, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 963, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	263, 264, 489, 490, 0, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 270, 271, 0, 272, 0, 273,
	274, 0, 275, 491, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 492, 493, 0, 218, 0, 0, 0,
	0, 0, 286, 287, 288, 494, 289, 290, 0, 291,
	0, 292, 0, 0, 964, 293, 294, 0, 295, 495,
	0, 496, 296, 0, 297, 298, 299, 300, 497, 498,
	499, 351, 966, 301, 302, 0, 303, 304, 305, 307,
	0, 0, 0, 306, 308, 315, 0, 965, 309, 500,
	311, 310, 312, 313, 314, 501, 0, 502, 0, 316,
	967, 503, 968, 317, 318, 319, 969, 320, 321, 0,
	0, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	504, 970, 329, 330, 971, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 336, 337, 339, 341, 338, 340,
	342, 344, 345, 343, 972, 346, 347, 349, 348, 0,
	0, 973, 350, 0, 505, 506, 352, 353, 0, 354,
	355, 356, 0, 0, 358, 359, 360, 0, 0, 361,
	362, 507, 974, 363, 975, 508, 364, 357, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 509, 374,
	510, 375, 0, 376, 0, 377, 378, 379, 380, 381,
	382, 511, 383, 384, 0, 385, 386, 387, 388, 389,
	390, 0, 392, 393, 394, 391, 395, 396, 397, 398,
	0, 399, 976, 400, 401, 402, 403, 512, 404, 0,
	405, 409, 410, 411, 412, 413, 414, 415, 184, 421,
	422, 416, 418, 419, 420, 417, 423, 424, 425, 0,
	426, 406, 407, 427, 428, 977, 429, 430, 513, 431,
	432, 0, 433, 434, 435, 436, 408, 437, 441, 442,
	438, 439, 440, 514, 0, 444, 445, 443, 186, 446,
	447, 448, 449, 450, 280, 451, 0, 452, 515, 516,
	517, 518, 0, 459, 0, 453, 454, 519, 455, 520,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 1334, 522, 523, 0, 474, 473, 524, 0,
	0, 0, 178, 475, 476, 525, 477, 478, 479, 0,
	179, 0, 0, 0, 0, 1189, 1188, 0, 0, 0,
	0, 1186, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 153, 221, 222, 223, 224, 225, 0, 226, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 227,
	229, 228, 230, 231, 481, 482, 232, 483, 233, 234,
	484, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 485, 486, 487, 0, 242, 488, 0, 1092, 0,
	243, 244, 245, 246, 247, 248, 0, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 963,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 263, 264, 489, 490, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 491, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 492, 493, 0, 218,
	0, 0, 0, 0, 0, 286, 287, 288, 494, 289,
	290, 0, 291, 0, 292, 0, 0, 964, 293, 294,
	0, 295, 495, 0, 496, 296, 0, 297, 298, 299,
	300, 497, 498, 499, 351, 966, 301, 302, 0, 303,
	304, 305, 307, 0, 0, 0, 306, 308, 315, 0,
	965, 309, 500, 311, 310, 312, 313, 314, 501, 0,
	502, 0, 316, 967, 503, 968, 317, 318, 319, 969,
	320, 321, 0, 0, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 504, 970, 329, 330, 971, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 336, 337, 339,
	341, 338, 340, 342, 344, 345, 343, 972, 346, 347,
	349, 348, 0, 0, 973, 350, 0, 505, 506, 352,
	353, 0, 354, 355, 356, 0, 0, 358, 359, 360,
	0, 0, 361, 362, 507, 974, 363, 975, 508, 364,
	357, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 509, 374, 510, 375, 0, 376, 0, 377, 378,
	379, 380, 381, 382, 511, 383, 384, 0, 385, 386,
	387, 388, 389, 390, 0, 392, 393, 394, 391, 395,
	396, 397, 398, 0, 399, 976, 400, 401, 402, 403,
	512, 404, 0, 405, 409, 410, 411, 412, 413, 414,
	415, 0, 421, 422, 416, 418, 419, 420, 417, 423,
	424, 425, 0, 426, 406, 407, 427, 428, 977, 429,
	430, 513, 431, 432, 0, 433, 434, 435, 436, 408,
	437, 441, 442, 438, 439, 440, 514, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 280, 451, 0,
	452, 515, 516, 517, 518, 0, 459, 0, 453, 454,
	519, 455, 520, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 465, 466, 468, 0, 469,
	0, 467, 470, 471, 472, 521, 522, 523, 0, 474,
	473, 524, 0, 0, 0, 0, 475, 476, 525, 477,
	478, 479, 1189, 1188, 0, 0, 0, 0, 1186, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 221,
	222, 223, 224, 225, 1818, 226, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 227, 229, 228, 230,
	231, 481, 482, 232, 483, 233, 234, 484, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 485, 486,
	487, 0, 242, 488, 0, 1092, 0, 243, 244, 245,
	246, 247, 248, 0, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 963, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	263, 264, 489, 490, 0, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 270, 271, 0, 272, 0, 273,
	274, 0, 275, 491, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 492, 493, 0, 218, 0, 0, 0,
	0, 0, 286, 287, 288, 494, 289, 290, 0, 291,
	0, 292, 0, 0, 964, 293, 294, 0, 295, 495,
	0, 496, 296, 0, 297, 298, 299, 300, 497, 498,
	499, 351, 966, 301, 302, 0, 303, 304, 305, 307,
	0, 0, 0, 306, 308, 315, 0, 965, 309, 500,
	311, 310, 312, 313, 314, 501, 0, 502, 0, 316,
	967, 503, 968, 317, 318, 319, 969, 320, 321, 0,
	0, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	504, 970, 329, 330, 971, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 336, 337, 339, 341, 338, 340,
	342, 344, 345, 343, 972, 346, 347, 349, 348, 0,
	0, 973, 350, 0, 505, 506, 352, 353, 0, 354,
	355, 356, 0, 0, 358, 359, 360, 0, 0, 361,
	362, 507, 974, 363, 975, 508, 364, 357, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 509, 374,
	510, 375, 0, 376, 0, 377, 378, 379, 380, 381,
	382, 511, 383, 384, 0, 385, 386, 387, 388, 389,
	390, 0, 392, 393, 394, 391, 395, 396, 397, 398,
	0, 399, 976, 400, 401, 402, 403, 512, 404, 0,
	405, 409, 410, 411, 412, 413, 414, 415, 0, 421,
	422, 416, 418, 419, 420, 417, 423, 424, 425, 0,
	426, 406, 407, 427, 428, 977, 429, 430, 513, 431,
	432, 0, 433, 434, 435, 436, 408, 437, 441, 442,
	438, 439, 440, 514, 0, 444, 445, 443, 0, 446,
	447, 448, 449, 450, 280, 451, 0, 452, 515, 516,
	517, 518, 0, 459, 0, 453, 454, 519, 455, 520,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 521, 522, 523, 0, 474, 473, 524, 0,
	0, 0, 0, 475, 476, 525, 477, 478, 479, 1189,
	1188, 0, 0, 0, 0, 1186, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 223, 224,
	225, 2837, 226, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 227, 229, 228, 230, 231, 481, 482,
	232, 483, 233, 234, 484, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 485, 486, 487, 0, 242,
	488, 0, 1092, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 963, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 489,
	490, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	491, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	492, 493, 0, 218, 0, 0, 0, 0, 0, 286,
	287, 288, 494, 289, 290, 0, 291, 0, 292, 0,
	0, 964, 293, 294, 0, 295, 495, 0, 496, 296,
	0, 297, 298, 299, 300, 497, 498, 499, 351, 966,
	301, 302, 0, 303, 304, 305, 307, 0, 0, 0,
	306, 308, 315, 0, 965, 309, 500, 311, 310, 312,
	313, 314, 501, 0, 502, 0, 316, 967, 503, 968,
	317, 318, 319, 969, 320, 321, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 504, 970, 329,
	330, 971, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 345,
	343, 972, 346, 347, 349, 348, 0, 0, 973, 350,
	0, 505, 506, 352, 353, 0, 354, 355, 356, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 974,
	363, 975, 508, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 509, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 381, 382, 511, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 976,
	400, 401, 402, 403, 512, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 0, 421, 422, 416, 418,
	419, 420, 417, 423, 424, 425, 0, 426, 406, 407,
	427, 428, 977, 429, 430, 513, 431, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 442, 438, 439, 440,
	514, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 280, 451, 0, 452, 515, 516, 517, 518, 0,
	459, 0, 453, 454, 519, 455, 520, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 465,
	466, 468, 0, 469, 0, 467, 470, 471, 472, 521,
	522, 523, 0, 474, 473, 524, 1026, 0, 0, 0,
	475, 476, 525, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 0, 226,
	0, 0, 0, 0, 0, 954, 0, 0, 1340, 0,
	227, 229, 228, 230, 231, 481, 482, 232, 483, 233,
	234, 484, 0, 235, 236, 237, 238, 239, 240, 0,
	953, 241, 485, 486, 487, 0, 242, 960, 0, 943,
	0, 243, 244, 245, 246, 247, 248, 0, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	963, 257, 258, 946, 944, 945, 950, 948, 947, 949,
	259, 260, 261, 262, 263, 264, 489, 490, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 491, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 980, 981, 0,
	218, 0, 0, 0, 0, 0, 286, 287, 288, 494,
	289, 290, 0, 291, 0, 292, 0, 0, 964, 293,
	294, 0, 295, 987, 0, 496, 296, 0, 297, 298,
	299, 300, 955, 956, 959, 351, 966, 301, 302, 0,
	303, 304, 305, 307, 0, 0, 219, 306, 308, 315,
	0, 965, 309, 500, 311, 310, 312, 313, 314, 501,
	0, 502, 0, 316, 967, 957, 968, 317, 318, 319,
	969, 320, 321, 0, 0, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 988, 970, 329, 330, 971, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 336, 337,
	339, 341, 338, 340, 342, 344, 345, 343, 972, 346,
	347, 349, 348, 0, 220, 973, 350, 0, 958, 506,
	352, 353, 0, 354, 355, 356, 0, 0, 358, 359,
	360, 0, 0, 361, 362, 507, 974, 363, 975, 982,
	364, 357, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 983, 374, 510, 375, 0, 376, 0, 377,
	378, 379, 380, 381, 382, 511, 383, 384, 0, 385,
	386, 387, 388, 389, 390, 0, 392, 393, 394, 391,
	395, 396, 397, 398, 0, 399, 976, 400, 401, 402,
	403, 512, 404, 0, 405, 409, 410, 411, 412, 413,
	414, 415, 0, 421, 422, 416, 418, 419, 420, 417,
	423, 424, 425, 951, 426, 406, 407, 427, 428, 977,
	429, 430, 513, 431, 432, 0, 433, 434, 435, 436,
	408, 437, 441, 442, 438, 439, 440, 984, 0, 444,
	445, 443, 0, 446, 447, 448, 449, 450, 280, 451,
	0, 452, 515, 516, 517, 518, 0, 459, 0, 453,
	454, 985, 455, 986, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 465, 466, 468, 952,
	469, 0, 467, 470, 471, 472, 521, 522, 523, 0,
	474, 473, 524, 838, 0, 215, 0, 475, 476, 525,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 222, 223, 224, 225, 0, 226, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 227,
	229, 228, 230, 231, 481, 482, 232, 483, 233, 234,
	484, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 485, 486, 487, 0, 242, 488, 0, 0, 0,
	243, 244, 245, 246, 247, 248, 0, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 0,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 263, 264, 489, 490, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 491, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 286, 287, 288, 494, 289,
	290, 0, 291, 0, 292, 0, 0, 0, 293, 294,
	0, 295, 495, 0, 496, 296, 0, 297, 298, 299,
	300, 497, 498, 499, 351, 0, 301, 302, 0, 303,
	304, 305, 307, 0, 0, 0, 306, 308, 315, 0,
	0, 309, 500, 311, 310, 312, 313, 314, 501, 0,
	502, 0, 316, 0, 503, 0, 317, 318, 319, 0,
	320, 321, 0, 0, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 504, 0, 329, 330, 0, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 336, 337, 339,
	341, 338, 340, 342, 344, 345, 343, 0, 346, 347,
	349, 348, 0, 0, 0, 350, 0, 505, 506, 352,
	353, 0, 354, 355, 356, 0, 0, 358, 359, 360,
	0, 0, 361, 362, 507, 0, 363, 0, 508, 364,
	357, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 509, 374, 510, 375, 0, 376, 0, 377, 378,
	379, 380, 381, 382, 511, 383, 384, 0, 385, 386,
	387, 388, 389, 390, 0, 392, 393, 394, 391, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	512, 404, 0, 405, 409, 410, 411, 412, 413, 414,
	415, 184, 421, 422, 416, 418, 419, 420, 417, 423,
	424, 425, 0, 426, 406, 407, 427, 428, 0, 429,
	430, 513, 431, 432, 0, 433, 434, 435, 436, 408,
	437, 441, 442, 438, 439, 440, 514, 0, 444, 445,
	443, 186, 446, 447, 448, 449, 450, 280, 451, 0,
	452, 515, 516, 517, 518, 0, 459, 0, 453, 454,
	519, 455, 520, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 465, 466, 468, 0, 469,
	0, 467, 470, 471, 472, 1334, 522, 523, 0, 474,
	473, 524, 215, 0, 0, 178, 475, 476, 525, 477,
	478, 479, 0, 179, 0, 0, 0, 0, 0, 221,
	222, 223, 224, 225, 0, 226, 0, 0, 0, 0,
	0, 480, 0, 0, 153, 0, 227, 229, 228, 230,
	231, 481, 482, 232, 483, 233, 234, 484, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 485, 486,
	487, 0, 242, 488, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 0, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	263, 264, 489, 490, 0, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 270, 271, 0, 272, 0, 273,
	274, 0, 275, 491, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 492, 493, 0, 218, 0, 0, 0,
	0, 0, 286, 287, 288, 494, 289, 290, 0, 291,
	0, 292, 0, 0, 0, 293, 294, 0, 295, 495,
	0, 496, 296, 0, 297, 298, 299, 300, 497, 498,
	499, 351, 0, 301, 302, 0, 303, 304, 305, 307,
	0, 0, 219, 306, 308, 315, 0, 0, 309, 500,
	311, 310, 312, 313, 314, 501, 0, 502, 0, 316,
	0, 503, 0, 317, 318, 319, 0, 320, 321, 0,
	0, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	504, 0, 329, 330, 0, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 336, 337, 339, 341, 338, 340,
	342, 344, 345, 343, 0, 346, 347, 349, 348, 0,
	220, 0, 350, 0, 505, 506, 352, 353, 0, 354,
	355, 356, 0, 0, 358, 359, 360, 0, 0, 361,
	362, 507, 0, 363, 0, 508, 364, 357, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 509, 374,
	510, 375, 0, 376, 0, 377, 378, 379, 380, 381,
	382, 511, 383, 384, 0, 385, 386, 387, 388, 389,
	390, 0, 392, 393, 394, 391, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 512, 404, 0,
	405, 409, 410, 411, 412, 413, 414, 415, 0, 421,
	422, 416, 418, 419, 420, 417, 423, 424, 425, 0,
	426, 406, 407, 427, 428, 0, 429, 430, 513, 431,
	432, 0, 433, 434, 435, 436, 408, 437, 441, 442,
	438, 439, 440, 514, 0, 444, 445, 443, 0, 446,
	447, 448, 449, 450, 280, 451, 0, 452, 515, 516,
	517, 518, 0, 459, 0, 453, 454, 519, 455, 520,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 521, 522, 523, 0, 474, 473, 524, 215,
	0, 0, 0, 475, 476, 525, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 223, 224,
	225, 0, 226, 0, 0, 0, 0, 0, 480, 0,
	0, 1641, 0, 227, 229, 228, 230, 231, 481, 482,
	232, 483, 233, 234, 484, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 485, 486, 487, 0, 242,
	488, 0, 0, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 489,
	490, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	491, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	492, 493, 0, 218, 0, 0, 0, 0, 0, 286,
	287, 288, 494, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 495, 0, 496, 296,
	0, 297, 298, 299, 300, 497, 498, 499, 351, 0,
	301, 302, 0, 303, 304, 305, 307, 0, 0, 219,
	306, 308, 315, 0, 0, 309, 500, 311, 310, 312,
	313, 314, 501, 0, 502, 0, 316, 0, 503, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 504, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 345,
	343, 0, 346, 347, 349, 348, 0, 220, 0, 350,
	0, 505, 506, 352, 353, 0, 354, 355, 356, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 0,
	363, 0, 508, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 509, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 381, 382, 511, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 512, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 0, 421, 422, 416, 418,
	419, 420, 417, 423, 424, 425, 0, 426, 406, 407,
	427, 428, 0, 429, 430, 513, 431, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 442, 438, 439, 440,
	514, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 280, 451, 0, 452, 515, 516, 517, 518, 0,
	459, 0, 453, 454, 519, 455, 520, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 465,
	466, 468, 0, 469, 0, 467, 470, 471, 472, 521,
	522, 523, 0, 474, 473, 524, 215, 0, 0, 0,
	475, 476, 525, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 0, 226,
	0, 0, 0, 0, 0, 480, 2788, 0, 0, 0,
	227, 229, 228, 230, 231, 481, 482, 232, 483, 233,
	234, 484, 0, 235, 236, 237, 238, 239, 240, 0,
	0, 241, 485, 486, 487, 0, 242, 488, 0, 0,
	0, 243, 244, 245, 246, 247, 248, 0, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	0, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 263, 264, 489, 490, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 491, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 286, 287, 288, 494,
	289, 290, 0, 291, 0, 292, 0, 0, 0, 293,
	294, 0, 295, 495, 0, 496, 296, 0, 297, 298,
	299, 300, 497, 498, 499, 351, 0, 301, 302, 0,
	303, 304, 305, 307, 0, 0, 0, 306, 308, 315,
	0, 0, 309, 500, 311, 310, 312, 313, 314, 501,
	0, 502, 0, 316, 0, 503, 0, 317, 318, 319,
	0, 320, 321, 0, 0, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 504, 0, 329, 330, 0, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 336, 337,
	339, 341, 338, 340, 342, 344, 345, 343, 0, 346,
	347, 349, 348, 0, 0, 0, 350, 0, 505, 506,
	352, 353, 0, 354, 355, 356, 0, 0, 358, 359,
	360, 0, 0, 361, 362, 507, 0, 363, 0, 508,
	364, 357, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 509, 374, 510, 375, 0, 376, 0, 377,
	378, 379, 380, 381, 382, 511, 383, 384, 0, 385,
	386, 387, 388, 389, 390, 0, 392, 393, 394, 391,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 512, 404, 0, 405, 409, 410, 411, 412, 413,
	414, 415, 0, 421, 422, 416, 418, 419, 420, 417,
	423, 424, 425, 0, 426, 406, 407, 427, 428, 0,
	429, 430, 513, 431, 432, 0, 433, 434, 435, 436,
	408, 437, 441, 442, 438, 439, 440, 514, 0, 444,
	445, 443, 0, 446, 447, 448, 449, 450, 280, 451,
	0, 452, 515, 516, 517, 518, 0, 459, 0, 453,
	454, 519, 455, 520, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 521, 522, 523, 0,
	474, 473, 524, 215, 0, 0, 0, 475, 476, 525,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	221, 222, 223, 224, 225, 0, 226, 0, 0, 0,
	0, 0, 480, 0, 0, 2406, 0, 227, 229, 228,
	230, 231, 481, 482, 232, 483, 233, 234, 484, 0,
	235, 236, 237, 238, 239, 240, 0, 0, 241, 485,
	486, 487, 0, 242, 488, 0, 0, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 489, 490, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 491, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 286, 287, 288, 494, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	495, 0, 496, 296, 0, 297, 298, 299, 300, 497,
	498, 499, 351, 0, 301, 302, 0, 303, 304, 305,
	307, 0, 0, 0, 306, 308, 315, 0, 0, 309,
	500, 311, 310, 312, 313, 314, 501, 0, 502, 0,
	316, 0, 503, 0, 317, 318, 319, 0, 320, 321,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 504, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	340, 342, 344, 345, 343, 0, 346, 347, 349, 348,
	0, 0, 0, 350, 0, 505, 506, 352, 353, 0,
	354, 355, 356, 0, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 0, 363, 0, 508, 364, 357, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 509,
	374, 510, 375, 0, 376, 0, 377, 378, 379, 380,
	381, 382, 511, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 512, 404,
	0, 405, 409, 410, 411, 412, 413, 414, 415, 0,
	421, 422, 416, 418, 419, 420, 417, 423, 424, 425,
	0, 426, 406, 407, 427, 428, 0, 429, 430, 513,
	431, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	442, 438, 439, 440, 514, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 280, 451, 0, 452, 515,
	516, 517, 518, 0, 459, 0, 453, 454, 519, 455,
	520, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 465, 466, 468, 0, 469, 0, 467,
	470, 471, 472, 521, 522, 523, 0, 474, 473, 524,
	215, 0, 0, 0, 475, 476, 525, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 226, 0, 0, 0, 0, 0, 480,
	0, 0, 2918, 0, 227, 229, 228, 230, 231, 481,
	482, 232, 483, 233, 234, 484, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 485, 486, 487, 0,
	242, 488, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	489, 490, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 491, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	286, 287, 288, 494, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 495, 0, 496,
	296, 0, 297, 298, 299, 300, 497, 498, 499, 351,
	0, 301, 302, 0, 303, 304, 305, 307, 0, 0,
	0, 306, 308, 315, 0, 0, 309, 500, 311, 310,
	312, 313, 314, 501, 0, 502, 0, 316, 0, 503,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 504, 0,
	329, 330, 0, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 336, 337, 339, 341, 338, 340, 342, 344,
	345, 343, 0, 346, 347, 349, 348, 0, 0, 0,
	350, 0, 505, 506, 352, 353, 0, 354, 355, 356,
	0, 0, 358, 359, 360, 0, 0, 361, 362, 507,
	0, 363, 0, 508, 364, 357, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 509, 374, 510, 375,
	0, 376, 0, 377, 378, 379, 380, 381, 382, 511,
	383, 384, 0, 385, 386, 387, 388, 389, 390, 0,
	392, 393, 394, 391, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 512, 404, 0, 405, 409,
	410, 411, 412, 413, 414, 415, 0, 421, 422, 416,
	418, 419, 420, 417, 423, 424, 425, 0, 426, 406,
	407, 427, 428, 0, 429, 430, 513, 431, 432, 0,
	433, 434, 435, 436, 408, 437, 441, 442, 438, 439,
	440, 514, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 280, 451, 0, 452, 515, 516, 517, 518,
	0, 459, 0, 453, 454, 519, 455, 520, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	521, 522, 523, 0, 474, 473, 524, 706, 0, 596,
	0, 475, 476, 525, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 223, 224,
	225, 0, 226, 0, 0, 0, 0, 0, 480, 1906,
	0, 0, 0, 227, 229, 228, 230, 231, 481, 482,
	232, 483, 233, 234, 484, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 485, 486, 487, 0, 242,
	488, 0, 0, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 602, 262, 263, 264, 489,
	490, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	491, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	492, 493, 0, 218, 0, 0, 0, 0, 0, 286,
	287, 288, 494, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 495, 0, 496, 296,
	0, 297, 298, 299, 300, 497, 498, 499, 351, 0,
	301, 302, 0, 303, 304, 305, 307, 0, 0, 219,
	306, 308, 315, 0, 0, 309, 500, 311, 310, 312,
	313, 314, 501, 0, 502, 0, 316, 0, 503, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 504, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 345,
	343, 0, 346, 347, 349, 348, 0, 220, 0, 350,
	0, 505, 506, 352, 353, 0, 354, 355, 356, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 0,
	363, 0, 508, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 509, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 381, 382, 511, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 512, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 0, 421, 422, 416, 418,
	419, 420, 417, 423, 424, 425, 0, 426, 406, 407,
	427, 428, 0, 429, 430, 513, 431, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 442, 438, 439, 440,
	514, 0, 444, 445, 443, 601, 446, 447, 448, 449,
	450, 280, 451, 0, 452, 515, 516, 517, 518, 0,
	459, 0, 453, 454, 519, 455, 520, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 465,
	466, 468, 0, 469, 0, 467, 470, 471, 472, 521,
	522, 523, 0, 474, 473, 524, 0, 595, 0, 596,
	475, 476, 525, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 223, 224,
	225, 605, 226, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 227, 229, 228, 230, 231, 481, 482,
	232, 483, 233, 234, 484, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 485, 486, 487, 0, 242,
	488, 0, 0, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 602, 262, 263, 264, 489,
	490, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	491, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	492, 493, 0, 218, 0, 0, 0, 0, 0, 286,
	287, 288, 494, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 495, 0, 496, 296,
	0, 297, 298, 299, 300, 497, 498, 499, 351, 0,
	301, 302, 0, 303, 304, 305, 307, 0, 0, 219,
	306, 308, 315, 0, 0, 309, 500, 311, 310, 312,
	313, 314, 501, 0, 502, 0, 316, 0, 503, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 504, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 345,
	343, 0, 346, 347, 349, 348, 0, 220, 0, 350,
	0, 505, 506, 352, 353, 0, 354, 355, 356, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 0,
	363, 0, 508, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 509, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 381, 382, 511, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 512, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 0, 421, 422, 416, 418,
	419, 420, 417, 423, 424, 425, 0, 426, 406, 407,
	427, 428, 0, 429, 430, 513, 431, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 442, 438, 439, 440,
	514, 0, 444, 445, 443, 601, 446, 447, 448, 449,
	450, 280, 451, 0, 452, 515, 516, 517, 518, 0,
	459, 0, 453, 454, 519, 455, 520, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 465,
	466, 468, 0, 469, 0, 467, 470, 471, 472, 521,
	522, 523, 0, 474, 473, 524, 596, 0, 0, 0,
	475, 476, 525, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 0, 226,
	0, 605, 0, 0, 0, 480, 0, 0, 0, 0,
	227, 229, 228, 230, 231, 481, 482, 232, 483, 233,
	234, 484, 0, 235, 236, 237, 238, 239, 240, 0,
	0, 241, 485, 486, 487, 0, 242, 488, 0, 0,
	0, 243, 244, 245, 246, 247, 248, 0, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	0, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 602, 262, 263, 264, 489, 490, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 491, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 492, 493, 0,
	218, 0, 0, 0, 0, 0, 286, 287, 288, 494,
	289, 290, 0, 291, 0, 292, 0, 0, 0, 293,
	294, 0, 295, 495, 0, 496, 296, 0, 297, 298,
	299, 300, 497, 498, 499, 351, 0, 301, 302, 0,
	303, 304, 305, 307, 0, 0, 219, 306, 308, 315,
	0, 0, 309, 500, 311, 310, 312, 313, 314, 501,
	0, 502, 0, 316, 0, 503, 0, 317, 318, 319,
	0, 320, 321, 0, 0, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 504, 0, 329, 330, 0, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 336, 337,
	339, 341, 338, 340, 342, 344, 345, 343, 0, 346,
	347, 349, 348, 0, 220, 0, 350, 0, 505, 506,
	352, 353, 0, 354, 355, 356, 0, 0, 358, 359,
	360, 0, 0, 361, 362, 507, 0, 363, 0, 508,
	364, 357, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 509, 374, 510, 375, 0, 376, 0, 377,
	378, 379, 380, 381, 382, 511, 383, 384, 0, 385,
	386, 387, 388, 389, 390, 0, 392, 393, 394, 391,
	395, 396, 397, 398, 0, 399, 0, 1936, 401, 402,
	403, 512, 404, 0, 405, 409, 410, 411, 412, 413,
	414, 415, 0, 421, 422, 416, 418, 419, 420, 417,
	423, 424, 425, 0, 426, 406, 407, 427, 428, 0,
	429, 430, 513, 431, 432, 0, 433, 434, 435, 436,
	408, 437, 441, 442, 438, 439, 440, 514, 0, 444,
	445, 443, 601, 446, 447, 448, 449, 450, 280, 451,
	0, 452, 515, 516, 517, 518, 0, 459, 0, 453,
	454, 519, 455, 520, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 521, 522, 523, 0,
	474, 473, 524, 596, 0, 0, 0, 475, 476, 525,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	221, 222, 223, 224, 225, 0, 226, 0, 605, 0,
	0, 0, 480, 0, 0, 0, 0, 227, 229, 228,
	230, 231, 481, 482, 232, 483, 233, 234, 484, 0,
	235, 236, 237, 238, 239, 240, 0, 0, 241, 485,
	486, 487, 0, 242, 488, 0, 0, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 602,
	262, 263, 264, 489, 490, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 491, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 492, 493, 0, 218, 0, 0,
	0, 0, 0, 286, 287, 288, 494, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	495, 0, 496, 296, 0, 297, 298, 299, 300, 497,
	498, 499, 351, 0, 301, 302, 0, 303, 304, 305,
	307, 0, 0, 219, 306, 308, 315, 0, 0, 309,
	500, 311, 310, 312, 313, 314, 501, 0, 502, 0,
	316, 0, 503, 0, 317, 318, 319, 0, 320, 321,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 504, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	340, 342, 344, 345, 343, 0, 346, 347, 349, 348,
	0, 220, 0, 350, 0, 505, 506, 352, 353, 0,
	354, 355, 356, 0, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 0, 363, 0, 508, 364, 357, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 509,
	374, 510, 375, 0, 376, 0, 377, 378, 379, 380,
	381, 382, 511, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 512, 404,
	0, 405, 409, 410, 411, 412, 413, 414, 415, 0,
	421, 422, 416, 418, 419, 420, 417, 423, 424, 425,
	0, 426, 406, 407, 427, 428, 0, 429, 430, 513,
	431, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	442, 438, 439, 440, 514, 0, 444, 445, 443, 601,
	446, 447, 448, 449, 450, 280, 451, 0, 452, 515,
	516, 517, 518, 0, 459, 0, 453, 454, 519, 455,
	520, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 465, 466, 468, 0, 469, 0, 467,
	470, 471, 472, 521, 522, 523, 0, 474, 473, 524,
	215, 0, 0, 0, 475, 476, 525, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 226, 0, 605, 0, 0, 0, 480,
	0, 0, 0, 0, 227, 229, 228, 230, 231, 481,
	482, 232, 483, 233, 234, 484, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 485, 486, 487, 0,
	242, 488, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	489, 490, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 491, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 492, 493, 0, 218, 0, 0, 0, 0, 0,
	286, 287, 288, 494, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 495, 0, 496,
	296, 0, 297, 298, 299, 300, 497, 498, 499, 351,
	0, 301, 302, 0, 303, 304, 305, 307, 0, 0,
	219, 306, 308, 315, 0, 0, 309, 500, 311, 310,
	312, 313, 314, 501, 0, 502, 0, 316, 0, 503,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 504, 0,
	329, 330, 0, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 336, 337, 339, 341, 338, 340, 342, 344,
	345, 343, 0, 346, 347, 349, 348, 0, 220, 0,
	350, 0, 505, 506, 352, 353, 0, 354, 355, 356,
	0, 0, 358, 359, 360, 0, 0, 361, 362, 507,
	0, 363, 0, 508, 364, 357, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 509, 374, 510, 375,
	0, 376, 0, 377, 378, 379, 380, 381, 382, 511,
	383, 384, 0, 385, 386, 387, 388, 389, 390, 0,
	392, 393, 394, 391, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 512, 404, 0, 405, 409,
	410, 411, 412, 413, 414, 415, 0, 421, 422, 416,
	418, 419, 420, 417, 423, 424, 425, 0, 426, 406,
	407, 427, 428, 0, 429, 430, 513, 431, 432, 0,
	433, 434, 435, 436, 408, 437, 441, 442, 438, 439,
	440, 514, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 280, 451, 0, 452, 515, 516, 517, 518,
	0, 459, 0, 453, 454, 519, 455, 520, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	521, 522, 523, 0, 474, 473, 524, 0, 0, 0,
	0, 475, 476, 525, 477, 478, 479, 1365, 0, 1189,
	1188, 0, 0, 0, 0, 1186, 0, 0, 0, 0,
	0, 0, 605, 0, 0, 0, 221, 222, 223, 224,
	225, 0, 226, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 227, 229, 228, 230, 231, 481, 482,
	232, 483, 233, 234, 484, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 485, 486, 487, 0, 242,
	488, 0, 1092, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 963, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 489,
	490, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	491, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	492, 493, 0, 218, 0, 0, 0, 0, 0, 1364,
	287, 288, 494, 289, 290, 0, 291, 0, 292, 0,
	0, 964, 293, 294, 0, 295, 495, 0, 496, 296,
	0, 297, 298, 299, 300, 497, 498, 499, 351, 966,
	301, 302, 0, 303, 304, 305, 307, 0, 0, 0,
	306, 308, 315, 0, 965, 309, 500, 311, 310, 312,
	313, 314, 501, 0, 502, 0, 316, 967, 503, 968,
	317, 318, 319, 969, 320, 321, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 504, 970, 329,
	330, 971, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 345,
	343, 972, 346, 347, 349, 348, 0, 0, 973, 350,
	0, 505, 506, 352, 353, 0, 354, 355, 356, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 974,
	363, 975, 508, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 509, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 1363, 382, 511, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 976,
	400, 401, 402, 403, 512, 404, 0, 405, 409, 410,
	411, 1362, 413, 414, 415, 0, 421, 422, 416, 418,
	419, 420, 417, 423, 424, 425, 0, 426, 406, 407,
	427, 428, 977, 429, 430, 513, 431, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 442, 438, 439, 440,
	514, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 280, 451, 0, 452, 515, 516, 517, 518, 0,
	459, 0, 453, 454, 519, 455, 520, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 465,
	466, 468, 0, 469, 0, 467, 470, 471, 472, 521,
	522, 523, 0, 474, 473, 524, 0, 0, 0, 0,
	475, 476, 525, 477, 478, 479, 1329, 0, 1189, 1188,
	0, 0, 0, 0, 1186, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 226, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 227, 229, 228, 230, 231, 481, 482, 232,
	483, 233, 234, 484, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 485, 486, 487, 0, 242, 488,
	0, 1092, 0, 243, 244, 245, 246, 247, 248, 0,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 963, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 489, 490,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 491,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 492,
	493, 0, 218, 0, 0, 0, 0, 0, 286, 287,
	288, 494, 289, 290, 0, 291, 0, 292, 0, 0,
	964, 293, 294, 0, 295, 495, 0, 496, 296, 0,
	297, 298, 299, 300, 1328, 498, 499, 351, 966, 301,
	302, 0, 303, 304, 305, 307, 0, 0, 0, 306,
	308, 315, 0, 965, 309, 500, 311, 310, 312, 313,
	314, 501, 0, 502, 0, 316, 967, 503, 968, 317,
	318, 319, 969, 320, 321, 0, 0, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 504, 970, 329, 330,
	971, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	336, 337, 339, 341, 338, 340, 342, 344, 345, 343,
	972, 346, 347, 349, 348, 0, 0, 973, 350, 0,
	505, 506, 352, 353, 0, 354, 355, 356, 0, 0,
	358, 359, 360, 0, 0, 361, 362, 507, 974, 363,
	975, 508, 364, 357, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 373, 509, 374, 510, 375, 0, 376,
	0, 377, 378, 379, 380, 381, 382, 511, 383, 384,
	0, 385, 386, 387, 388, 389, 390, 0, 392, 393,
	394, 391, 395, 396, 397, 398, 0, 399, 976, 400,
	401, 402, 403, 512, 404, 0, 405, 409, 410, 411,
	412, 413, 414, 415, 0, 421, 422, 416, 418, 419,
	420, 417, 423, 424, 425, 0, 426, 406, 407, 427,
	428, 977, 429, 430, 513, 431, 432, 0, 433, 434,
	435, 436, 408, 437, 441, 442, 438, 439, 440, 514,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	280, 451, 0, 452, 515, 516, 517, 518, 0, 459,
	0, 453, 454, 519, 455, 520, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 521, 522,
	523, 0, 474, 473, 524, 0, 0, 0, 0, 475,
	476, 525, 477, 478, 479, 1325, 0, 1189, 1188, 0,
	0, 0, 0, 1186, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 482, 232, 483,
	233, 234, 484, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 485, 486, 487, 0, 242, 488, 0,
	1092, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 963, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 263, 264, 489, 490, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 491, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 492, 493,
	0, 218, 0, 0, 0, 0, 0, 286, 287, 288,
	494, 289, 290, 0, 291, 0, 292, 0, 0, 964,
	293, 294, 0, 295, 495, 0, 496, 296, 0, 297,
	298, 299, 300, 1324, 498, 499, 351, 966, 301, 302,
	0, 303, 304, 305, 307, 0, 0, 0, 306, 308,
	315, 0, 965, 309, 500, 311, 310, 312, 313, 314,
	501, 0, 502, 0, 316, 967, 503, 968, 317, 318,
	319, 969, 320, 321, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 504, 970, 329, 330, 971,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 345, 343, 972,
	346, 347, 349, 348, 0, 0, 973, 350, 0, 505,
	506, 352, 353, 0, 354, 355, 356, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 974, 363, 975,
	508, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 509, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 511, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 976, 400, 401,
	402, 403, 512, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 416, 418, 419, 420,
	417, 423, 424, 425, 0, 426, 406, 407, 427, 428,
	977, 429, 430, 513, 431, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 442, 438, 439, 440, 514, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	451, 0, 452, 515, 516, 517, 518, 0, 459, 0,
	453, 454, 519, 455, 520, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 465, 466, 468,
	0, 469, 0, 467, 470, 471, 472, 521, 522, 523,
	0, 474, 473, 524, 0, 0, 0, 0, 475, 476,
	525, 477, 478, 479, 1264, 0, 1189, 1188, 0, 0,
	0, 0, 1186, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 0, 226,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	227, 229, 228, 230, 231, 481, 482, 232, 483, 233,
	234, 484, 0, 235, 236, 237, 238, 239, 240, 0,
	0, 241, 485, 486, 487, 0, 242, 488, 0, 1092,
	0, 243, 244, 245, 246, 247, 248, 0, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	963, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 263, 264, 489, 490, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 491, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 492, 493, 0,
	218, 0, 0, 0, 0, 0, 286, 287, 288, 494,
	289, 290, 0, 291, 0, 292, 0, 0, 964, 293,
	294, 0, 295, 495, 0, 496, 296, 0, 297, 298,
	299, 300, 1263, 498, 499, 351, 966, 301, 302, 0,
	303, 304, 305, 307, 0, 0, 0, 306, 308, 315,
	0, 965, 309, 500, 311, 310, 312, 313, 314, 501,
	0, 502, 0, 316, 967, 503, 968, 317, 318, 319,
	969, 320, 321, 0, 0, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 504, 970, 329, 330, 971, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 336, 337,
	339, 341, 338, 340, 342, 344, 345, 343, 972, 346,
	347, 349, 348, 0, 0, 973, 350, 0, 505, 506,
	352, 353, 0, 354, 355, 356, 0, 0, 358, 359,
	360, 0, 0, 361, 362, 507, 974, 363, 975, 508,
	364, 357, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 509, 374, 510, 375, 0, 376, 0, 377,
	378, 379, 380, 381, 382, 511, 383, 384, 0, 385,
	386, 387, 388, 389, 390, 0, 392, 393, 394, 391,
	395, 396, 397, 398, 0, 399, 976, 400, 401, 402,
	403, 512, 404, 0, 405, 409, 410, 411, 412, 413,
	414, 415, 0, 421, 422, 416, 418, 419, 420, 417,
	423, 424, 425, 0, 426, 406, 407, 427, 428, 977,
	429, 430, 513, 431, 432, 0, 433, 434, 435, 436,
	408, 437, 441, 442, 438, 439, 440, 514, 0, 444,
	445, 443, 0, 446, 447, 448, 449, 450, 280, 451,
	0, 452, 515, 516, 517, 518, 0, 459, 0, 453,
	454, 519, 455, 520, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 521, 522, 523, 0,
	474, 473, 524, 0, 0, 0, 0, 475, 476, 525,
	477, 478, 479, 1261, 0, 1189, 1188, 0, 0, 0,
	0, 1186, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 222, 223, 224, 225, 0, 226, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 227,
	229, 228, 230, 231, 481, 482, 232, 483, 233, 234,
	484, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 485, 486, 487, 0, 242, 488, 0, 1092, 0,
	243, 244, 245, 246, 247, 248, 0, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 963,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 263, 264, 489, 490, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 491, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 492, 493, 0, 218,
	0, 0, 0, 0, 0, 286, 287, 288, 494, 289,
	290, 0, 291, 0, 292, 0, 0, 964, 293, 294,
	0, 295, 495, 0, 496, 296, 0, 297, 298, 299,
	300, 1260, 498, 499, 351, 966, 301, 302, 0, 303,
	304, 305, 307, 0, 0, 0, 306, 308, 315, 0,
	965, 309, 500, 311, 310, 312, 313, 314, 501, 0,
	502, 0, 316, 967, 503, 968, 317, 318, 319, 969,
	320, 321, 0, 0, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 504, 970, 329, 330, 971, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 336, 337, 339,
	341, 338, 340, 342, 344, 345, 343, 972, 346, 347,
	349, 348, 0, 0, 973, 350, 0, 505, 506, 352,
	353, 0, 354, 355, 356, 0, 0, 358, 359, 360,
	0, 0, 361, 362, 507, 974, 363, 975, 508, 364,
	357, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 509, 374, 510, 375, 0, 376, 0, 377, 378,
	379, 380, 381, 382, 511, 383, 384, 0, 385, 386,
	387, 388, 389, 390, 0, 392, 393, 394, 391, 395,
	396, 397, 398, 0, 399, 976, 400, 401, 402, 403,
	512, 404, 0, 405, 409, 410, 411, 412, 413, 414,
	415, 0, 421, 422, 416, 418, 419, 420, 417, 423,
	424, 425, 0, 426, 406, 407, 427, 428, 977, 429,
	430, 513, 431, 432, 0, 433, 434, 435, 436, 408,
	437, 441, 442, 438, 439, 440, 514, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 280, 451, 0,
	452, 515, 516, 517, 518, 0, 459, 0, 453, 454,
	519, 455, 520, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 465, 466, 468, 0, 469,
	0, 467, 470, 471, 472, 521, 522, 523, 0, 474,
	473, 524, 0, 0, 0, 0, 475, 476, 525, 477,
	478, 479, 1182, 0, 1189, 1188, 0, 0, 0, 0,
	1186, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 0, 226, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 227, 229,
	228, 230, 231, 481, 482, 232, 483, 233, 234, 484,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	485, 486, 487, 0, 242, 488, 0, 1092, 0, 243,
	244, 245, 246, 247, 248, 0, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 963, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 489, 490, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 491, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 492, 493, 0, 218, 0,
	0, 0, 0, 0, 286, 287, 288, 494, 289, 290,
	0, 291, 0, 292, 0, 0, 964, 293, 294, 0,
	295, 495, 0, 496, 296, 0, 297, 298, 299, 300,
	1184, 498, 499, 351, 966, 301, 302, 0, 303, 304,
	305, 307, 0, 0, 0, 306, 308, 315, 0, 965,
	309, 500, 311, 310, 312, 313, 314, 501, 0, 502,
	0, 316, 967, 503, 968, 317, 318, 319, 969, 320,
	321, 0, 0, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 504, 970, 329, 330, 971, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 336, 337, 339, 341,
	338, 340, 342, 344, 345, 343, 972, 346, 347, 349,
	348, 0, 0, 973, 350, 0, 505, 506, 352, 353,
	0, 354, 355, 356, 0, 0, 358, 359, 360, 0,
	0, 361, 362, 507, 974, 363, 975, 508, 364, 357,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	509, 374, 510, 375, 0, 376, 0, 377, 378, 379,
	380, 381, 382, 511, 383, 384, 0, 385, 386, 387,
	388, 389, 390, 0, 392, 393, 394, 391, 395, 396,
	397, 398, 0, 399, 976, 400, 401, 402, 403, 512,
	404, 0, 405, 409, 410, 411, 412, 413, 414, 415,
	0, 421, 422, 416, 418, 419, 420, 417, 423, 424,
	425, 0, 426, 406, 407, 427, 428, 977, 429, 430,
	513, 431, 432, 0, 433, 434, 435, 436, 408, 437,
	441, 442, 438, 439, 440, 514, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 280, 451, 0, 452,
	515, 516, 517, 518, 0, 459, 0, 453, 454, 519,
	455, 520, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 521, 522, 523, 0, 474, 473,
	524, 0, 0, 0, 0, 475, 476, 525, 477, 478,
	479, 1189, 1188, 0, 0, 0, 0, 1186, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 482, 232, 483, 233, 234, 484, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 485, 486, 487,
	0, 242, 488, 0, 1092, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 963, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 489, 490, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 491, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 492, 493, 0, 218, 0, 0, 0, 0,
	0, 286, 287, 288, 494, 289, 290, 0, 291, 0,
	292, 0, 0, 964, 293, 294, 0, 295, 495, 0,
	496, 296, 0, 297, 298, 299, 300, 497, 498, 499,
	351, 966, 301, 302, 0, 303, 304, 305, 307, 0,
	0, 0, 306, 308, 315, 0, 965, 309, 500, 311,
	310, 312, 313, 314, 501, 0, 502, 0, 316, 967,
	503, 968, 317, 318, 319, 969, 320, 321, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 504,
	970, 329, 330, 971, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 345, 343, 972, 346, 347, 349, 348, 0, 0,
	973, 350, 0, 505, 506, 352, 353, 0, 354, 355,
	356, 0, 0, 358, 359, 360, 0, 0, 361, 362,
	507, 974, 363, 975, 508, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 509, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	511, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 976, 400, 401, 402, 403, 512, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 0, 421, 422,
	416, 418, 419, 420, 417, 423, 424, 425, 0, 426,
	406, 407, 427, 428, 977, 429, 430, 513, 431, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 442, 438,
	439, 440, 514, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 451, 0, 452, 515, 516, 517,
	518, 0, 459, 0, 453, 454, 519, 455, 520, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 465, 466, 468, 0, 469, 0, 467, 470, 471,
	472, 521, 522, 523, 0, 474, 473, 524, 1189, 1188,
	0, 0, 475, 476, 525, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 226, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 227, 229, 228, 230, 231, 481, 482, 232,
	483, 233, 234, 484, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 485, 486, 487, 0, 242, 488,
	0, 1092, 0, 243, 244, 245, 246, 247, 248, 0,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 963, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 489, 490,
	1729, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 491,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 492,
	493, 0, 218, 0, 0, 0, 0, 0, 286, 287,
	288, 494, 289, 290, 0, 291, 0, 292, 0, 0,
	964, 293, 294, 0, 295, 495, 0, 496, 296, 0,
	297, 298, 299, 300, 497, 498, 499, 351, 966, 301,
	302, 0, 303, 304, 305, 307, 0, 0, 0, 306,
	308, 315, 0, 965, 309, 500, 311, 310, 312, 313,
	314, 501, 0, 502, 0, 316, 967, 503, 968, 317,
	318, 319, 969, 320, 321, 0, 0, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 504, 970, 329, 330,
	971, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	336, 337, 339, 341, 338, 340, 342, 344, 345, 343,
	972, 346, 347, 349, 348, 0, 0, 973, 350, 0,
	505, 506, 352, 353, 0, 354, 355, 356, 0, 0,
	358, 359, 360, 0, 0, 361, 362, 507, 974, 363,
	975, 508, 364, 357, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 373, 509, 374, 510, 375, 0, 376,
	0, 377, 378, 379, 380, 381, 382, 511, 383, 384,
	0, 385, 386, 387, 388, 389, 390, 0, 392, 393,
	394, 391, 395, 396, 397, 398, 0, 399, 976, 400,
	401, 402, 403, 512, 404, 0, 405, 409, 410, 411,
	412, 413, 414, 415, 0, 421, 422, 416, 418, 419,
	420, 417, 423, 424, 425, 0, 426, 406, 407, 427,
	428, 977, 429, 430, 513, 431, 432, 0, 433, 434,
	435, 436, 408, 437, 441, 442, 438, 439, 440, 514,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	280, 451, 0, 452, 515, 516, 517, 518, 0, 459,
	0, 453, 454, 519, 455, 520, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 521, 522,
	523, 0, 474, 473, 524, 1189, 1188, 0, 0, 475,
	476, 525, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 221, 222, 223, 224, 225, 0, 226, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 227,
	229, 228, 230, 231, 481, 482, 232, 483, 233, 234,
	484, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 485, 486, 487, 0, 242, 488, 0, 1092, 0,
	243, 244, 245, 246, 247, 248, 0, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 963,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 263, 264, 489, 490, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 491, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 492, 493, 0, 218,
	0, 0, 0, 0, 0, 286, 287, 288, 494, 289,
	290, 0, 291, 0, 292, 0, 0, 964, 293, 294,
	0, 295, 495, 0, 496, 296, 0, 297, 298, 299,
	300, 497, 498, 499, 351, 966, 301, 302, 0, 303,
	304, 305, 307, 0, 0, 0, 306, 308, 315, 0,
	965, 309, 500, 311, 310, 312, 313, 314, 501, 0,
	502, 0, 316, 967, 503, 968, 317, 318, 319, 969,
	320, 321, 0, 0, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 504, 970, 329, 330, 971, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 336, 337, 339,
	341, 338, 340, 342, 344, 345, 343, 972, 346, 347,
	349, 348, 0, 0, 973, 350, 0, 505, 506, 352,
	353, 0, 354, 355, 356, 0, 0, 358, 359, 360,
	0, 0, 361, 362, 507, 974, 363, 975, 508, 364,
	357, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 509, 374, 510, 375, 0, 376, 0, 377, 378,
	379, 380, 381, 382, 511, 383, 384, 0, 385, 386,
	387, 388, 389, 390, 0, 392, 393, 394, 391, 395,
	396, 397, 398, 0, 399, 976, 400, 401, 402, 403,
	512, 404, 0, 405, 409, 410, 411, 412, 413, 414,
	415, 0, 421, 422, 416, 418, 419, 420, 417, 423,
	424, 425, 0, 426, 406, 407, 427, 428, 977, 429,
	430, 513, 431, 432, 0, 433, 434, 435, 436, 408,
	437, 441, 442, 438, 439, 440, 514, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 280, 451, 0,
	452, 515, 516, 517, 518, 0, 459, 0, 453, 454,
	519, 455, 520, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 465, 466, 468, 0, 469,
	0, 467, 470, 471, 472, 521, 522, 523, 1189, 474,
	473, 524, 0, 0, 0, 0, 475, 476, 525, 477,
	478, 479, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 226, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 227, 229, 228, 230, 231, 481, 482, 232,
	483, 233, 234, 484, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 485, 486, 487, 0, 242, 488,
	0, 1092, 0, 243, 244, 245, 246, 247, 248, 0,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 963, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 489, 490,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 491,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 492,
	493, 0, 218, 0, 0, 0, 0, 0, 286, 287,
	288, 494, 289, 290, 0, 291, 0, 292, 0, 0,
	964, 293, 294, 0, 295, 495, 0, 496, 296, 0,
	297, 298, 299, 300, 497, 498, 499, 351, 966, 301,
	302, 0, 303, 304, 305, 307, 0, 0, 0, 306,
	308, 315, 0, 965, 309, 500, 311, 310, 312, 313,
	314, 501, 0, 502, 0, 316, 967, 503, 968, 317,
	318, 319, 969, 320, 321, 0, 0, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 504, 970, 329, 330,
	971, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	336, 337, 339, 341, 338, 340, 342, 344, 345, 343,
	972, 346, 347, 349, 348, 0, 0, 973, 350, 0,
	505, 506, 352, 353, 0, 354, 355, 356, 0, 0,
	358, 359, 360, 0, 0, 361, 362, 507, 974, 363,
	975, 508, 364, 357, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 373, 509, 374, 510, 375, 0, 376,
	0, 377, 378, 379, 380, 381, 382, 511, 383, 384,
	0, 385, 386, 387, 388, 389, 390, 0, 392, 393,
	394, 391, 395, 396, 397, 398, 0, 399, 976, 400,
	401, 402, 403, 512, 404, 0, 405, 409, 410, 411,
	412, 413, 414, 415, 0, 421, 422, 416, 418, 419,
	420, 417, 423, 424, 425, 0, 426, 406, 407, 427,
	428, 977, 429, 430, 513, 431, 432, 0, 433, 434,
	435, 436, 408, 437, 441, 442, 438, 439, 440, 514,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	280, 451, 0, 452, 515, 516, 517, 518, 0, 459,
	0, 453, 454, 519, 455, 520, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 521, 522,
	523, 215, 474, 473, 524, 0, 0, 0, 0, 475,
	476, 525, 477, 478, 479, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 482, 232, 483, 233, 234, 484, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 485, 486, 487,
	2292, 242, 488, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 2289, 253,
	0, 254, 255, 256, 0, 0, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 489, 490, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 2296, 491, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 492, 493, 0, 2443, 0, 0, 0, 0,
	0, 286, 287, 288, 494, 289, 290, 0, 291, 0,
	292, 2295, 0, 0, 293, 294, 0, 295, 495, 0,
	496, 296, 0, 297, 298, 299, 300, 497, 498, 499,
	351, 0, 301, 302, 0, 303, 304, 305, 307, 0,
	0, 2440, 306, 308, 315, 0, 0, 309, 500, 311,
	310, 312, 313, 314, 501, 0, 502, 0, 2442, 0,
	503, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 504,
	0, 329, 330, 2439, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 345, 343, 0, 346, 347, 349, 348, 0, 0,
	0, 350, 0, 505, 506, 352, 353, 0, 354, 355,
	356, 0, 0, 358, 359, 360, 0, 0, 361, 362,
	507, 0, 363, 0, 508, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 509, 374, 510,
	375, 2294, 376, 0, 377, 378, 379, 380, 381, 382,
	511, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 512, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 0, 421, 422,
	416, 418, 419, 420, 417, 423, 424, 425, 0, 426,
	406, 407, 427, 428, 0, 429, 430, 513, 431, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 442, 438,
	439, 440, 514, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 451, 0, 452, 515, 516, 517,
	518, 0, 459, 0, 453, 454, 519, 455, 520, 0,
	456, 457, 458, 0, 460, 461, 0, 2441, 462, 463,
	464, 465, 466, 468, 0, 469, 0, 467, 470, 471,
	472, 521, 522, 523, 215, 474, 473, 524, 0, 0,
	0, 0, 475, 476, 525, 477, 478, 479, 0, 0,
	0, 221, 222, 223, 224, 225, 0, 226, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 227, 229,
	228, 230, 231, 481, 482, 232, 483, 233, 234, 484,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	485, 486, 487, 2292, 242, 488, 0, 0, 2286, 243,
	244, 245, 246, 247, 248, 0, 0, 250, 251, 252,
	249, 2289, 253, 0, 254, 255, 256, 0, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 489, 490, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 2296, 491, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 492, 493, 0, 0, 0,
	0, 0, 0, 0, 286, 287, 288, 494, 289, 290,
	0, 291, 0, 292, 2295, 0, 0, 293, 294, 0,
	295, 495, 0, 496, 296, 0, 297, 298, 299, 300,
	2285, 498, 499, 351, 0, 301, 302, 0, 303, 304,
	305, 307, 0, 0, 0, 306, 308, 315, 0, 0,
	309, 500, 311, 310, 312, 313, 314, 501, 0, 502,
	0, 316, 0, 503, 0, 317, 318, 319, 0, 320,
	321, 0, 0, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 504, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 336, 337, 339, 341,
	338, 340, 342, 344, 345, 343, 0, 346, 347, 349,
	348, 0, 0, 0, 350, 0, 505, 506, 352, 353,
	0, 354, 355, 356, 0, 0, 358, 359, 360, 0,
	0, 361, 362, 507, 0, 363, 0, 508, 364, 357,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	509, 374, 510, 375, 2294, 376, 0, 377, 378, 379,
	380, 381, 382, 511, 383, 384, 0, 385, 386, 387,
	388, 389, 390, 0, 392, 393, 394, 391, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 512,
	404, 0, 405, 409, 410, 411, 412, 413, 414, 415,
	0, 421, 422, 416, 418, 419, 420, 417, 423, 424,
	425, 0, 426, 406, 407, 427, 428, 0, 429, 430,
	513, 431, 432, 0, 433, 434, 435, 436, 408, 437,
	441, 442, 438, 439, 440, 514, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 280, 451, 0, 452,
	515, 516, 517, 518, 0, 459, 0, 453, 454, 519,
	455, 520, 0, 456, 457, 458, 0, 460, 461, 0,
	2293, 462, 463, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 521, 522, 523, 0, 474, 473,
	524, 1418, 0, 215, 0, 475, 476, 525, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	221, 222, 223, 224, 225, 0, 226, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 227, 229, 228,
	230, 231, 481, 482, 232, 483, 233, 234, 484, 0,
	235, 236, 237, 238, 239, 240, 0, 0, 241, 485,
	486, 487, 0, 242, 488, 0, 0, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 489, 490, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 491, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 492, 493, 0, 218, 0, 0,
	0, 0, 0, 286, 287, 288, 494, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	495, 0, 496, 296, 0, 297, 298, 299, 300, 497,
	498, 499, 351, 0, 301, 302, 0, 303, 304, 305,
	307, 0, 0, 219, 306, 308, 315, 0, 0, 309,
	500, 311, 310, 312, 313, 314, 501, 0, 502, 0,
	316, 0, 503, 0, 317, 318, 319, 0, 320, 321,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 504, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	340, 342, 344, 345, 343, 0, 346, 347, 349, 348,
	0, 220, 0, 350, 0, 505, 506, 352, 353, 0,
	354, 355, 356, 0, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 0, 363, 0, 508, 364, 357, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 509,
	374, 510, 375, 0, 376, 0, 377, 378, 379, 380,
	381, 382, 511, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 512, 404,
	0, 405, 409, 410, 411, 412, 413, 414, 415, 0,
	1421, 422, 416, 418, 419, 420, 417, 423, 424, 425,
	0, 426, 406, 407, 427, 428, 0, 429, 430, 513,
	431, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	442, 438, 439, 440, 514, 0, 444, 445, 443, 1419,
	446, 447, 448, 449, 450, 280, 451, 0, 452, 515,
	516, 517, 518, 0, 459, 0, 453, 454, 519, 455,
	520, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 465, 466, 468, 0, 469, 0, 467,
	470, 471, 472, 521, 522, 523, 0, 1420, 473, 524,
	1177, 0, 215, 0, 475, 476, 525, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 221,
	222, 223, 224, 225, 0, 226, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 227, 229, 228, 230,
	231, 481, 482, 232, 483, 233, 234, 484, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 485, 486,
	487, 0, 242, 488, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 0, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	263, 264, 489, 490, 0, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 270, 271, 0, 272, 0, 273,
	274, 0, 275, 491, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 492, 493, 0, 218, 0, 0, 0,
	0, 0, 286, 287, 288, 494, 289, 290, 0, 291,
	0, 292, 0, 0, 0, 293, 294, 0, 295, 495,
	0, 496, 296, 0, 297, 298, 299, 300, 1179, 498,
	499, 351, 0, 301, 302, 0, 303, 304, 305, 307,
	0, 0, 219, 306, 308, 315, 0, 0, 309, 500,
	311, 310, 312, 313, 314, 501, 0, 502, 0, 316,
	0, 503, 0, 317, 318, 319, 0, 320, 321, 0,
	0, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	504, 0, 329, 330, 0, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 336, 337, 339, 341, 338, 340,
	342, 344, 345, 343, 0, 346, 347, 349, 348, 0,
	220, 0, 350, 0, 505, 506, 352, 353, 0, 354,
	355, 356, 0, 1018, 358, 359, 360, 0, 0, 361,
	362, 507, 0, 363, 0, 508, 364, 357, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 509, 374,
	510, 375, 0, 376, 0, 377, 378, 379, 380, 381,
	382, 511, 383, 384, 0, 385, 386, 387, 388, 389,
	390, 0, 392, 393, 394, 391, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 512, 404, 0,
	405, 409, 410, 411, 412, 413, 414, 415, 0, 421,
	422, 416, 418, 419, 420, 417, 423, 424, 425, 0,
	426, 406, 407, 427, 428, 0, 429, 430, 513, 431,
	432, 0, 433, 434, 435, 436, 408, 437, 441, 442,
	438, 439, 440, 514, 0, 444, 445, 443, 0, 446,
	447, 448, 449, 450, 280, 451, 0, 452, 515, 516,
	517, 518, 0, 459, 0, 453, 454, 519, 455, 520,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 521, 522, 523, 0, 474, 473, 524, 1174,
	0, 215, 0, 475, 476, 525, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 482, 232, 483, 233, 234, 484, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 485, 486, 487,
	0, 242, 488, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 0, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 489, 490, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 491, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 492, 493, 0, 218, 0, 0, 0, 0,
	0, 286, 287, 288, 494, 289, 290, 0, 291, 0,
	292, 0, 0, 0, 293, 294, 0, 295, 495, 0,
	496, 296, 0, 297, 298, 299, 300, 1176, 498, 499,
	351, 0, 301, 302, 0, 303, 304, 305, 307, 0,
	0, 219, 306, 308, 315, 0, 0, 309, 500, 311,
	310, 312, 313, 314, 501, 0, 502, 0, 316, 0,
	503, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 504,
	0, 329, 330, 0, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 345, 343, 0, 346, 347, 349, 348, 0, 220,
	0, 350, 0, 505, 506, 352, 353, 0, 354, 355,
	356, 0, 1018, 358, 359, 360, 0, 0, 361, 362,
	507, 0, 363, 0, 508, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 509, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	511, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 512, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 0, 421, 422,
	416, 418, 419, 420, 417, 423, 424, 425, 0, 426,
	406, 407, 427, 428, 0, 429, 430, 513, 431, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 442, 438,
	439, 440, 514, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 451, 0, 452, 515, 516, 517,
	518, 0, 459, 0, 453, 454, 519, 455, 520, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 465, 466, 468, 0, 469, 0, 467, 470, 471,
	472, 521, 522, 523, 0, 474, 473, 524, 1080, 0,
	215, 0, 475, 476, 525, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 226, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 227, 229, 228, 230, 231, 481,
	482, 232, 483, 233, 234, 484, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 485, 486, 487, 0,
	242, 488, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	489, 490, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 491, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 492, 493, 0, 218, 0, 0, 0, 0, 0,
	286, 287, 288, 494, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 495, 0, 496,
	296, 0, 297, 298, 299, 300, 1082, 498, 499, 351,
	0, 301, 302, 0, 303, 304, 305, 307, 0, 0,
	219, 306, 308, 315, 0, 0, 309, 500, 311, 310,
	312, 313, 314, 501, 0, 502, 0, 316, 0, 503,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 504, 0,
	329, 330, 0, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 336, 337, 339, 341, 338, 340, 342, 344,
	345, 343, 0, 346, 347, 349, 348, 0, 220, 0,
	350, 0, 505, 506, 352, 353, 0, 354, 355, 356,
	0, 1018, 358, 359, 360, 0, 0, 361, 362, 507,
	0, 363, 0, 508, 364, 357, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 509, 374, 510, 375,
	0, 376, 0, 377, 378, 379, 380, 381, 382, 511,
	383, 384, 0, 385, 386, 387, 388, 389, 390, 0,
	392, 393, 394, 391, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 512, 404, 0, 405, 409,
	410, 411, 412, 413, 414, 415, 0, 421, 422, 416,
	418, 419, 420, 417, 423, 424, 425, 0, 426, 406,
	407, 427, 428, 0, 429, 430, 513, 431, 432, 0,
	433, 434, 435, 436, 408, 437, 441, 442, 438, 439,
	440, 514, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 280, 451, 0, 452, 515, 516, 517, 518,
	0, 459, 0, 453, 454, 519, 455, 520, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	521, 522, 523, 0, 474, 473, 524, 554, 0, 215,
	0, 475, 476, 525, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 223, 553,
	225, 543, 226, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 227, 229, 228, 230, 231, 481, 482,
	232, 483, 233, 234, 484, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 485, 486, 487, 0, 242,
	488, 0, 0, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 546, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 489,
	490, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	491, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 286,
	287, 288, 494, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 547, 295, 495, 0, 496, 296,
	0, 297, 298, 299, 300, 497, 498, 499, 351, 0,
	301, 302, 0, 303, 304, 305, 307, 0, 0, 0,
	306, 308, 315, 0, 0, 309, 500, 311, 310, 312,
	313, 314, 501, 0, 502, 0, 316, 0, 503, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 504, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 345,
	343, 0, 346, 347, 349, 348, 0, 0, 0, 350,
	0, 505, 506, 352, 353, 0, 354, 355, 356, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 0,
	363, 0, 508, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 509, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 381, 382, 511, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 512, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 548, 421, 422, 416, 418,
	419, 420, 417, 423, 424, 425, 0, 426, 406, 407,
	427, 428, 0, 429, 430, 513, 431, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 442, 438, 439, 440,
	514, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 280, 451, 0, 452, 515, 516, 517, 518, 0,
	459, 0, 453, 454, 519, 455, 520, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 465,
	466, 468, 0, 469, 0, 467, 470, 471, 472, 521,
	522, 523, 0, 474, 473, 524, 542, 0, 215, 0,
	475, 476, 525, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	543, 226, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 227, 229, 228, 230, 231, 481, 482, 232,
	483, 233, 234, 484, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 485, 486, 487, 0, 242, 488,
	0, 0, 0, 243, 244, 245, 246, 247, 248, 0,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 546, 0, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 489, 490,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 491,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 286, 287,
	288, 494, 289, 290, 0, 291, 0, 292, 0, 0,
	0, 293, 294, 547, 295, 495, 0, 496, 296, 0,
	297, 298, 299, 300, 497, 498, 499, 351, 0, 301,
	302, 0, 303, 304, 305, 307, 0, 0, 0, 306,
	308, 315, 0, 0, 309, 500, 311, 310, 312, 313,
	314, 501, 0, 502, 0, 316, 0, 503, 0, 317,
	318, 319, 0, 320, 321, 0, 0, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 504, 0, 329, 330,
	0, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	336, 337, 339, 341, 338, 340, 342, 344, 345, 343,
	0, 346, 347, 349, 348, 0, 0, 0, 350, 0,
	505, 506, 352, 353, 0, 354, 355, 356, 0, 0,
	358, 359, 360, 0, 0, 361, 362, 507, 0, 363,
	0, 508, 364, 357, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 373, 509, 374, 510, 375, 0, 376,
	0, 377, 378, 379, 380, 381, 382, 511, 383, 384,
	0, 385, 386, 387, 388, 389, 390, 0, 392, 393,
	394, 391, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 512, 404, 0, 405, 409, 410, 411,
	412, 413, 414, 415, 548, 421, 422, 416, 418, 419,
	420, 417, 423, 424, 425, 0, 426, 406, 407, 427,
	428, 0, 429, 430, 513, 431, 432, 0, 433, 434,
	435, 436, 408, 437, 441, 442, 438, 439, 440, 514,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	280, 451, 0, 452, 515, 516, 517, 518, 0, 459,
	0, 453, 454, 519, 455, 520, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 521, 522,
	523, 215, 474, 473, 524, 0, 0, 0, 0, 475,
	476, 525, 477, 478, 479, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 482, 232, 483, 233, 234, 484, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 485, 486, 487,
	0, 242, 488, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 0, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 489, 490, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 491, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 492, 493, 0, 218, 0, 0, 0, 0,
	0, 286, 287, 288, 494, 289, 290, 0, 291, 0,
	292, 0, 0, 0, 293, 294, 0, 295, 495, 0,
	496, 296, 0, 297, 298, 299, 300, 497, 498, 499,
	351, 0, 301, 302, 0, 303, 304, 305, 307, 0,
	0, 219, 306, 308, 315, 0, 0, 309, 500, 311,
	310, 312, 313, 314, 501, 0, 502, 0, 316, 0,
	503, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 504,
	0, 329, 330, 0, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 345, 343, 0, 346, 347, 349, 348, 0, 220,
	0, 350, 0, 505, 506, 352, 353, 0, 354, 355,
	356, 0, 1018, 358, 359, 360, 0, 0, 361, 362,
	507, 0, 363, 0, 508, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 509, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	511, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 512, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 0, 421, 422,
	416, 418, 419, 420, 417, 423, 424, 425, 0, 426,
	406, 407, 427, 428, 0, 429, 430, 513, 431, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 442, 438,
	439, 440, 514, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 451, 0, 452, 515, 516, 517,
	518, 0, 459, 0, 453, 454, 519, 455, 520, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 465, 466, 468, 0, 469, 0, 467, 470, 471,
	472, 521, 522, 523, 0, 474, 473, 524, 2370, 0,
	215, 0, 475, 476, 525, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 226, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 227, 229, 228, 230, 231, 481,
	482, 232, 483, 233, 234, 484, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 485, 486, 487, 0,
	242, 488, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	489, 490, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 491, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 492, 493, 0, 218, 0, 0, 0, 0, 0,
	286, 287, 288, 494, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 495, 0, 496,
	296, 0, 297, 298, 299, 300, 497, 498, 499, 351,
	0, 301, 302, 0, 303, 304, 305, 307, 0, 0,
	219, 306, 308, 315, 0, 0, 309, 500, 311, 310,
	312, 313, 314, 501, 0, 502, 0, 316, 0, 503,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 504, 0,
	329, 330, 0, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 336, 337, 339, 341, 338, 340, 342, 344,
	345, 343, 0, 346, 347, 349, 348, 0, 220, 0,
	350, 0, 505, 506, 352, 353, 0, 354, 355, 356,
	0, 0, 358, 359, 360, 0, 0, 361, 362, 507,
	0, 363, 0, 508, 364, 357, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 509, 374, 510, 375,
	0, 376, 0, 377, 378, 379, 380, 381, 382, 511,
	383, 384, 0, 385, 386, 387, 388, 389, 390, 0,
	392, 393, 394, 391, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 512, 404, 0, 405, 409,
	410, 411, 412, 413, 414, 415, 0, 421, 422, 416,
	418, 419, 420, 417, 423, 424, 425, 0, 426, 406,
	407, 427, 428, 0, 429, 430, 513, 431, 432, 0,
	433, 434, 435, 436, 408, 437, 441, 442, 438, 439,
	440, 514, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 280, 451, 0, 452, 515, 516, 517, 518,
	0, 459, 0, 453, 454, 519, 455, 520, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	521, 522, 523, 0, 474, 473, 524, 1915, 0, 215,
	0, 475, 476, 525, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 223, 224,
	225, 0, 226, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 227, 229, 228, 230, 231, 481, 482,
	232, 483, 233, 234, 484, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 485, 486, 487, 0, 242,
	488, 0, 0, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 489,
	490, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	491, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	492, 493, 0, 218, 0, 0, 0, 0, 0, 286,
	287, 288, 494, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 495, 0, 496, 296,
	0, 297, 298, 299, 300, 497, 498, 499, 351, 0,
	301, 302, 0, 303, 304, 305, 307, 0, 0, 219,
	306, 308, 315, 0, 0, 309, 500, 311, 310, 312,
	313, 314, 501, 0, 502, 0, 316, 0, 503, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 504, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 345,
	343, 0, 346, 347, 349, 348, 0, 220, 0, 350,
	0, 505, 506, 352, 353, 0, 354, 355, 356, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 0,
	363, 0, 508, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 509, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 381, 382, 511, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 512, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 0, 421, 422, 416, 418,
	419, 420, 417, 423, 424, 425, 0, 426, 406, 407,
	427, 428, 0, 429, 430, 513, 431, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 442, 438, 439, 440,
	514, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 280, 451, 0, 452, 515, 516, 517, 518, 0,
	459, 0, 453, 454, 519, 455, 520, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 465,
	466, 468, 0, 469, 0, 467, 470, 471, 472, 521,
	522, 523, 215, 474, 473, 524, 0, 0, 0, 0,
	475, 476, 525, 477, 478, 479, 0, 0, 0, 221,
	222, 223, 224, 225, 0, 226, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 227, 229, 228, 230,
	231, 481, 482, 232, 483, 233, 234, 484, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 485, 486,
	487, 0, 242, 488, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 0, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	263, 264, 489, 490, 0, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 270, 271, 0, 272, 0, 273,
	274, 0, 275, 491, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 492, 493, 0, 218, 0, 0, 0,
	0, 0, 286, 287, 288, 494, 289, 290, 0, 291,
	0, 292, 0, 0, 0, 293, 294, 0, 295, 495,
	0, 496, 296, 0, 297, 298, 299, 300, 497, 498,
	499, 351, 0, 301, 302, 0, 303, 304, 305, 307,
	0, 0, 219, 306, 308, 315, 0, 0, 309, 500,
	311, 310, 312, 313, 314, 501, 0, 502, 0, 316,
	0, 503, 0, 317, 318, 319, 0, 320, 321, 0,
	0, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	504, 0, 329, 330, 0, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 336, 337, 339, 341, 338, 340,
	342, 344, 345, 343, 0, 346, 347, 349, 348, 0,
	220, 0, 350, 0, 505, 506, 352, 353, 0, 354,
	355, 356, 0, 0, 358, 359, 360, 0, 0, 361,
	362, 507, 0, 363, 0, 508, 364, 357, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 509, 374,
	510, 375, 0, 376, 0, 377, 378, 379, 380, 381,
	382, 511, 383, 384, 0, 385, 386, 387, 388, 389,
	390, 0, 392, 393, 394, 391, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 512, 404, 0,
	405, 409, 410, 411, 412, 413, 414, 415, 0, 421,
	422, 416, 418, 419, 420, 417, 423, 424, 425, 0,
	426, 406, 407, 427, 428, 0, 429, 430, 513, 431,
	432, 0, 433, 434, 435, 436, 408, 437, 441, 442,
	438, 439, 440, 514, 0, 444, 445, 443, 1851, 446,
	447, 448, 449, 450, 280, 451, 0, 452, 515, 516,
	517, 518, 0, 459, 0, 453, 454, 519, 455, 520,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 521, 522, 523, 0, 474, 473, 524, 1844,
	0, 215, 0, 475, 476, 525, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 482, 232, 483, 233, 234, 484, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 485, 486, 487,
	0, 242, 488, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 0, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 489, 490, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 491, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 492, 493, 0, 218, 0, 0, 0, 0,
	0, 286, 287, 288, 494, 289, 290, 0, 291, 0,
	292, 0, 0, 0, 293, 294, 0, 295, 495, 0,
	496, 296, 0, 297, 298, 299, 300, 1843, 498, 499,
	351, 0, 301, 302, 0, 303, 304, 305, 307, 0,
	0, 219, 306, 308, 315, 0, 0, 309, 500, 311,
	310, 312, 313, 314, 501, 0, 502, 0, 316, 0,
	503, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 504,
	0, 329, 330, 0, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 345, 343, 0, 346, 347, 349, 348, 0, 220,
	0, 350, 0, 505, 506, 352, 353, 0, 354, 355,
	356, 0, 0, 358, 359, 360, 0, 0, 361, 362,
	507, 0, 363, 0, 508, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 509, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	511, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 512, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 0, 421, 422,
	416, 418, 419, 420, 417, 423, 424, 425, 0, 426,
	406, 407, 427, 428, 0, 429, 430, 513, 431, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 442, 438,
	439, 440, 514, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 451, 0, 452, 515, 516, 517,
	518, 0, 459, 0, 453, 454, 519, 455, 520, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 465, 466, 468, 0, 469, 0, 467, 470, 471,
	472, 521, 522, 523, 0, 474, 473, 524, 1839, 0,
	215, 0, 475, 476, 525, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 226, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 227, 229, 228, 230, 231, 481,
	482, 232, 483, 233, 234, 484, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 485, 486, 487, 0,
	242, 488, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	489, 490, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 491, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 492, 493, 0, 218, 0, 0, 0, 0, 0,
	286, 287, 288, 494, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 495, 0, 496,
	296, 0, 297, 298, 299, 300, 1841, 498, 499, 351,
	0, 301, 302, 0, 303, 304, 305, 307, 0, 0,
	219, 306, 308, 315, 0, 0, 309, 500, 311, 310,
	312, 313, 314, 501, 0, 502, 0, 316, 0, 503,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 504, 0,
	329, 330, 0, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 336, 337, 339, 341, 338, 340, 342, 344,
	345, 343, 0, 346, 347, 349, 348, 0, 220, 0,
	350, 0, 505, 506, 352, 353, 0, 354, 355, 356,
	0, 0, 358, 359, 360, 0, 0, 361, 362, 507,
	0, 363, 0, 508, 364, 357, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 509, 374, 510, 375,
	0, 376, 0, 377, 378, 379, 380, 381, 382, 511,
	383, 384, 0, 385, 386, 387, 388, 389, 390, 0,
	392, 393, 394, 391, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 512, 404, 0, 405, 409,
	410, 411, 412, 413, 414, 415, 0, 421, 422, 416,
	418, 419, 420, 417, 423, 424, 425, 0, 426, 406,
	407, 427, 428, 0, 429, 430, 513, 431, 432, 0,
	433, 434, 435, 436, 408, 437, 441, 442, 438, 439,
	440, 514, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 280, 451, 0, 452, 515, 516, 517, 518,
	0, 459, 0, 453, 454, 519, 455, 520, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	521, 522, 523, 0, 474, 473, 524, 1316, 0, 215,
	0, 475, 476, 525, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 223, 224,
	225, 0, 226, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 227, 229, 228, 230, 231, 481, 482,
	232, 483, 233, 234, 484, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 485, 486, 487, 0, 242,
	488, 0, 0, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 489,
	490, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	491, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	492, 493, 0, 218, 0, 0, 0, 0, 0, 286,
	287, 288, 494, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 495, 0, 496, 296,
	0, 297, 298, 299, 300, 1315, 498, 499, 351, 0,
	301, 302, 0, 303, 304, 305, 307, 0, 0, 219,
	306, 308, 315, 0, 0, 309, 500, 311, 310, 312,
	313, 314, 501, 0, 502, 0, 316, 0, 503, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 504, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 345,
	343, 0, 346, 347, 349, 348, 0, 220, 0, 350,
	0, 505, 506, 352, 353, 0, 354, 355, 356, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 0,
	363, 0, 508, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 509, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 381, 382, 511, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 512, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 0, 421, 422, 416, 418,
	419, 420, 417, 423, 424, 425, 0, 426, 406, 407,
	427, 428, 0, 429, 430, 513, 431, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 442, 438, 439, 440,
	514, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 280, 451, 0, 452, 515, 516, 517, 518, 0,
	459, 0, 453, 454, 519, 455, 520, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 465,
	466, 468, 0, 469, 0, 467, 470, 471, 472, 521,
	522, 523, 0, 474, 473, 524, 1313, 0, 215, 0,
	475, 476, 525, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 226, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 227, 229, 228, 230, 231, 481, 482, 232,
	483, 233, 234, 484, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 485, 486, 487, 0, 242, 488,
	0, 0, 0, 243, 244, 245, 246, 247, 248, 0,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 0, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 489, 490,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 491,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 492,
	493, 0, 218, 0, 0, 0, 0, 0, 286, 287,
	288, 494, 289, 290, 0, 291, 0, 292, 0, 0,
	0, 293, 294, 0, 295, 495, 0, 496, 296, 0,
	297, 298, 299, 300, 1312, 498, 499, 351, 0, 301,
	302, 0, 303, 304, 305, 307, 0, 0, 219, 306,
	308, 315, 0, 0, 309, 500, 311, 310, 312, 313,
	314, 501, 0, 502, 0, 316, 0, 503, 0, 317,
	318, 319, 0, 320, 321, 0, 0, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 504, 0, 329, 330,
	0, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	336, 337, 339, 341, 338, 340, 342, 344, 345, 343,
	0, 346, 347, 349, 348, 0, 220, 0, 350, 0,
	505, 506, 352, 353, 0, 354, 355, 356, 0, 0,
	358, 359, 360, 0, 0, 361, 362, 507, 0, 363,
	0, 508, 364, 357, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 373, 509, 374, 510, 375, 0, 376,
	0, 377, 378, 379, 380, 381, 382, 511, 383, 384,
	0, 385, 386, 387, 388, 389, 390, 0, 392, 393,
	394, 391, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 512, 404, 0, 405, 409, 410, 411,
	412, 413, 414, 415, 0, 421, 422, 416, 418, 419,
	420, 417, 423, 424, 425, 0, 426, 406, 407, 427,
	428, 0, 429, 430, 513, 431, 432, 0, 433, 434,
	435, 436, 408, 437, 441, 442, 438, 439, 440, 514,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	280, 451, 0, 452, 515, 516, 517, 518, 0, 459,
	0, 453, 454, 519, 455, 520, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 521, 522,
	523, 0, 474, 473, 524, 1309, 0, 215, 0, 475,
	476, 525, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 482, 232, 483,
	233, 234, 484, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 485, 486, 487, 0, 242, 488, 0,
	0, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 0, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 263, 264, 489, 490, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 491, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 492, 493,
	0, 218, 0, 0, 0, 0, 0, 286, 287, 288,
	494, 289, 290, 0, 291, 0, 292, 0, 0, 0,
	293, 294, 0, 295, 495, 0, 496, 296, 0, 297,
	298, 299, 300, 1308, 498, 499, 351, 0, 301, 302,
	0, 303, 304, 305, 307, 0, 0, 219, 306, 308,
	315, 0, 0, 309, 500, 311, 310, 312, 313, 314,
	501, 0, 502, 0, 316, 0, 503, 0, 317, 318,
	319, 0, 320, 321, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 504, 0, 329, 330, 0,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 345, 343, 0,
	346, 347, 349, 348, 0, 220, 0, 350, 0, 505,
	506, 352, 353, 0, 354, 355, 356, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 0, 363, 0,
	508, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 509, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 511, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 512, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 416, 418, 419, 420,
	417, 423, 424, 425, 0, 426, 406, 407, 427, 428,
	0, 429, 430, 513, 431, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 442, 438, 439, 440, 514, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	451, 0, 452, 515, 516, 517, 518, 0, 459, 0,
	453, 454, 519, 455, 520, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 465, 466, 468,
	0, 469, 0, 467, 470, 471, 472, 521, 522, 523,
	0, 474, 473, 524, 1284, 0, 215, 0, 475, 476,
	525, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 0, 226,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	227, 229, 228, 230, 231, 481, 482, 232, 483, 233,
	234, 484, 0, 235, 236, 237, 238, 239, 240, 0,
	0, 241, 485, 486, 487, 0, 242, 488, 0, 0,
	0, 243, 244, 245, 246, 247, 248, 0, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	0, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 263, 264, 489, 490, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 491, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 492, 493, 0,
	218, 0, 0, 0, 0, 0, 286, 287, 288, 494,
	289, 290, 0, 291, 0, 292, 0, 0, 0, 293,
	294, 0, 295, 495, 0, 496, 296, 0, 297, 298,
	299, 300, 497, 498, 499, 351, 0, 301, 302, 0,
	303, 304, 305, 307, 0, 0, 219, 306, 308, 315,
	0, 0, 309, 500, 311, 310, 312, 313, 314, 501,
	0, 502, 0, 316, 0, 503, 0, 317, 318, 319,
	0, 320, 321, 0, 0, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 504, 0, 329, 330, 0, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 336, 337,
	339, 341, 338, 340, 342, 344, 345, 343, 0, 346,
	347, 349, 348, 0, 220, 0, 350, 0, 505, 506,
	352, 353, 0, 354, 355, 356, 0, 0, 358, 359,
	360, 0, 0, 361, 362, 507, 0, 363, 0, 508,
	364, 357, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 509, 374, 510, 375, 0, 376, 0, 377,
	378, 379, 380, 381, 382, 511, 383, 384, 0, 385,
	386, 387, 388, 389, 390, 0, 392, 393, 394, 391,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 512, 404, 0, 405, 409, 410, 411, 412, 413,
	414, 415, 0, 421, 422, 416, 418, 419, 420, 417,
	423, 424, 425, 0, 426, 406, 407, 427, 428, 0,
	429, 430, 513, 431, 432, 0, 433, 434, 435, 436,
	408, 437, 441, 442, 438, 439, 440, 514, 0, 444,
	445, 443, 0, 446, 447, 448, 449, 450, 280, 451,
	0, 452, 515, 516, 517, 518, 0, 459, 0, 453,
	454, 519, 455, 520, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 521, 522, 523, 0,
	474, 473, 524, 1199, 0, 215, 0, 475, 476, 525,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 222, 223, 224, 225, 0, 226, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 227,
	229, 228, 230, 231, 481, 482, 232, 483, 233, 234,
	484, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 485, 486, 487, 0, 242, 488, 0, 0, 0,
	243, 244, 245, 246, 247, 248, 0, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 0,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 263, 264, 489, 490, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 491, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 492, 493, 0, 218,
	0, 0, 0, 0, 0, 286, 287, 288, 494, 289,
	290, 0, 291, 0, 292, 0, 0, 0, 293, 294,
	0, 295, 495, 0, 496, 296, 0, 297, 298, 299,
	300, 1201, 498, 499, 351, 0, 301, 302, 0, 303,
	304, 305, 307, 0, 0, 219, 306, 308, 315, 0,
	0, 309, 500, 311, 310, 312, 313, 314, 501, 0,
	502, 0, 316, 0, 503, 0, 317, 318, 319, 0,
	320, 321, 0, 0, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 504, 0, 329, 330, 0, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 336, 337, 339,
	341, 338, 340, 342, 344, 345, 343, 0, 346, 347,
	349, 348, 0, 220, 0, 350, 0, 505, 506, 352,
	353, 0, 354, 355, 356, 0, 0, 358, 359, 360,
	0, 0, 361, 362, 507, 0, 363, 0, 508, 364,
	357, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 509, 374, 510, 375, 0, 376, 0, 377, 378,
	379, 380, 381, 382, 511, 383, 384, 0, 385, 386,
	387, 388, 389, 390, 0, 392, 393, 394, 391, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	512, 404, 0, 405, 409, 410, 411, 412, 413, 414,
	415, 0, 421, 422, 416, 418, 419, 420, 417, 423,
	424, 425, 0, 426, 406, 407, 427, 428, 0, 429,
	430, 513, 431, 432, 0, 433, 434, 435, 436, 408,
	437, 441, 442, 438, 439, 440, 514, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 280, 451, 0,
	452, 515, 516, 517, 518, 0, 459, 0, 453, 454,
	519, 455, 520, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 465, 466, 468, 0, 469,
	0, 467, 470, 471, 472, 521, 522, 523, 215, 474,
	473, 524, 0, 0, 0, 0, 475, 476, 525, 477,
	478, 479, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 226, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 227, 229, 228, 230, 231, 481, 482, 232,
	483, 233, 234, 484, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 485, 486, 487, 0, 242, 488,
	0, 0, 0, 243, 244, 245, 246, 247, 248, 0,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 0, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 489, 490,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 491,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 492,
	493, 0, 218, 0, 0, 0, 0, 0, 286, 287,
	288, 494, 289, 290, 0, 291, 0, 292, 0, 0,
	0, 293, 294, 0, 295, 495, 0, 496, 296, 0,
	297, 298, 299, 300, 497, 498, 499, 351, 0, 301,
	302, 0, 303, 304, 305, 307, 0, 0, 219, 306,
	308, 315, 0, 0, 309, 500, 311, 310, 312, 313,
	314, 501, 0, 502, 0, 316, 0, 503, 0, 317,
	318, 319, 0, 320, 321, 0, 0, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 504, 0, 329, 330,
	0, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	336, 337, 339, 341, 338, 340, 342, 344, 345, 343,
	0, 346, 347, 349, 348, 0, 220, 0, 350, 0,
	505, 506, 352, 353, 0, 354, 355, 356, 0, 0,
	358, 359, 360, 0, 0, 361, 362, 507, 0, 363,
	0, 508, 364, 357, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 373, 509, 374, 510, 375, 0, 376,
	0, 377, 378, 379, 380, 381, 382, 511, 383, 384,
	0, 385, 386, 387, 388, 389, 390, 0, 392, 393,
	394, 391, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 512, 404, 0, 405, 409, 410, 411,
	412, 413, 414, 415, 0, 421, 422, 416, 418, 419,
	420, 417, 423, 424, 425, 0, 426, 406, 407, 427,
	428, 0, 429, 430, 513, 431, 432, 0, 433, 434,
	435, 436, 408, 437, 441, 442, 438, 439, 440, 514,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	280, 451, 0, 452, 515, 516, 517, 518, 0, 459,
	0, 453, 454, 519, 455, 520, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 521, 522,
	523, 215, 474, 473, 524, 0, 0, 0, 0, 475,
	476, 525, 477, 478, 479, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 482, 232, 483, 233, 234, 484, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 485, 486, 487,
	0, 242, 488, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 546, 0, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 489, 490, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 491, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 286, 287, 288, 494, 289, 290, 0, 291, 0,
	292, 0, 0, 0, 293, 294, 547, 295, 495, 0,
	496, 296, 0, 297, 298, 299, 300, 497, 498, 499,
	351, 0, 301, 302, 0, 303, 304, 305, 307, 0,
	0, 0, 306, 308, 315, 0, 0, 309, 500, 311,
	310, 312, 313, 314, 501, 0, 502, 0, 316, 0,
	503, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 504,
	0, 329, 330, 0, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 345, 343, 0, 346, 347, 349, 348, 0, 0,
	0, 350, 0, 505, 506, 352, 353, 0, 354, 355,
	356, 0, 0, 358, 359, 360, 0, 0, 361, 362,
	507, 0, 363, 0, 508, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 509, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	511, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 512, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 548, 421, 422,
	416, 418, 419, 420, 417, 423, 424, 425, 0, 426,
	406, 407, 427, 428, 0, 429, 430, 513, 431, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 442, 438,
	439, 440, 514, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 451, 0, 452, 515, 516, 517,
	518, 0, 459, 0, 453, 454, 519, 455, 520, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 465, 466, 468, 0, 469, 0, 467, 470, 471,
	472, 521, 522, 523, 215, 474, 473, 524, 0, 0,
	0, 0, 475, 476, 525, 477, 478, 479, 0, 0,
	0, 221, 222, 223, 224, 225, 0, 226, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 227, 229,
	228, 230, 231, 481, 482, 232, 483, 233, 234, 484,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	485, 486, 487, 0, 242, 488, 0, 0, 0, 243,
	244, 245, 246, 247, 248, 0, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	1943, 262, 263, 264, 489, 490, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 491, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 492, 493, 0, 218, 0,
	0, 0, 0, 0, 286, 287, 288, 494, 289, 290,
	0, 291, 0, 292, 0, 0, 0, 293, 294, 0,
	295, 495, 0, 496, 296, 0, 297, 298, 299, 300,
	497, 498, 499, 351, 0, 301, 302, 0, 303, 304,
	305, 307, 0, 0, 219, 306, 308, 315, 0, 0,
	309, 500, 311, 310, 312, 313, 314, 501, 0, 502,
	0, 316, 0, 503, 0, 317, 318, 319, 0, 320,
	321, 0, 0, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 504, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 336, 337, 339, 341,
	338, 340, 342, 344, 345, 343, 0, 346, 347, 349,
	348, 0, 220, 0, 350, 0, 505, 506, 352, 353,
	0, 354, 355, 356, 0, 0, 358, 359, 360, 0,
	0, 361, 362, 507, 0, 363, 0, 508, 364, 357,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	509, 374, 510, 375, 0, 376, 0, 377, 378, 379,
	380, 381, 382, 511, 383, 384, 0, 385, 386, 387,
	388, 389, 390, 0, 392, 393, 394, 391, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 512,
	404, 0, 405, 409, 410, 411, 412, 413, 414, 415,
	0, 421, 422, 416, 418, 419, 420, 417, 423, 424,
	425, 0, 426, 406, 407, 427, 428, 0, 429, 430,
	513, 431, 432, 0, 433, 434, 435, 436, 408, 437,
	441, 442, 438, 439, 440, 514, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 280, 451, 0, 452,
	515, 516, 517, 518, 0, 459, 0, 453, 454, 519,
	455, 520, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 521, 522, 523, 215, 474, 473,
	524, 0, 0, 0, 0, 475, 476, 525, 477, 478,
	479, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 482, 232, 483,
	233, 234, 484, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 485, 486, 487, 0, 242, 488, 0,
	0, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 0, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 1941, 262, 263, 264, 489, 490, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 491, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 492, 493,
	0, 218, 0, 0, 0, 0, 0, 286, 287, 288,
	494, 289, 290, 0, 291, 0, 292, 0, 0, 0,
	293, 294, 0, 295, 495, 0, 496, 296, 0, 297,
	298, 299, 300, 497, 498, 499, 351, 0, 301, 302,
	0, 303, 304, 305, 307, 0, 0, 219, 306, 308,
	315, 0, 0, 309, 500, 311, 310, 312, 313, 314,
	501, 0, 502, 0, 316, 0, 503, 0, 317, 318,
	319, 0, 320, 321, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 504, 0, 329, 330, 0,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 345, 343, 0,
	346, 347, 349, 348, 0, 220, 0, 350, 0, 505,
	506, 352, 353, 0, 354, 355, 356, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 0, 363, 0,
	508, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 509, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 511, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 512, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 416, 418, 419, 420,
	417, 423, 424, 425, 0, 426, 406, 407, 427, 428,
	0, 429, 430, 513, 431, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 442, 438, 439, 440, 514, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	451, 0, 452, 515, 516, 517, 518, 0, 459, 0,
	453, 454, 519, 455, 520, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 465, 466, 468,
	0, 469, 0, 467, 470, 471, 472, 521, 522, 523,
	215, 474, 473, 524, 0, 0, 0, 0, 475, 476,
	525, 477, 478, 479, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 226, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 227, 229, 228, 230, 231, 481,
	482, 232, 483, 233, 234, 484, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 485, 486, 487, 0,
	242, 488, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 1939, 262, 263, 264,
	489, 490, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 491, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 492, 493, 0, 218, 0, 0, 0, 0, 0,
	286, 287, 288, 494, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 495, 0, 496,
	296, 0, 297, 298, 299, 300, 497, 498, 499, 351,
	0, 301, 302, 0, 303, 304, 305, 307, 0, 0,
	219, 306, 308, 315, 0, 0, 309, 500, 311, 310,
	312, 313, 314, 501, 0, 502, 0, 316, 0, 503,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 504, 0,
	329, 330, 0, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 336, 337, 339, 341, 338, 340, 342, 344,
	345, 343, 0, 346, 347, 349, 348, 0, 220, 0,
	350, 0, 505, 506, 352, 353, 0, 354, 355, 356,
	0, 0, 358, 359, 360, 0, 0, 361, 362, 507,
	0, 363, 0, 508, 364, 357, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 509, 374, 510, 375,
	0, 376, 0, 377, 378, 379, 380, 381, 382, 511,
	383, 384, 0, 385, 386, 387, 388, 389, 390, 0,
	392, 393, 394, 391, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 512, 404, 0, 405, 409,
	410, 411, 412, 413, 414, 415, 0, 421, 422, 416,
	418, 419, 420, 417, 423, 424, 425, 0, 426, 406,
	407, 427, 428, 0, 429, 430, 513, 431, 432, 0,
	433, 434, 435, 436, 408, 437, 441, 442, 438, 439,
	440, 514, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 280, 451, 0, 452, 515, 516, 517, 518,
	0, 459, 0, 453, 454, 519, 455, 520, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	521, 522, 523, 215, 474, 473, 524, 0, 0, 0,
	0, 475, 476, 525, 477, 478, 479, 0, 0, 0,
	221, 222, 223, 224, 225, 0, 226, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 227, 229, 228,
	230, 231, 481, 482, 232, 483, 233, 234, 484, 0,
	235, 236, 237, 238, 239, 240, 0, 0, 241, 485,
	486, 487, 0, 242, 488, 0, 0, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 489, 490, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 491, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 492, 493, 0, 218, 0, 0,
	0, 0, 0, 286, 287, 288, 494, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	495, 0, 496, 296, 0, 297, 298, 299, 300, 1889,
	498, 499, 351, 0, 301, 302, 0, 303, 304, 305,
	307, 0, 0, 219, 306, 308, 315, 0, 0, 309,
	500, 311, 310, 312, 313, 314, 501, 0, 502, 0,
	316, 0, 503, 0, 317, 318, 319, 0, 320, 321,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 504, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	340, 342, 344, 345, 343, 0, 346, 347, 349, 348,
	0, 220, 0, 350, 0, 505, 506, 352, 353, 0,
	354, 355, 356, 0, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 0, 363, 0, 508, 364, 357, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 509,
	374, 510, 375, 0, 376, 0, 377, 378, 379, 380,
	381, 382, 511, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 512, 404,
	0, 405, 409, 410, 411, 412, 413, 414, 415, 0,
	421, 422, 416, 418, 419, 420, 417, 423, 424, 425,
	0, 426, 406, 407, 427, 428, 0, 429, 430, 513,
	431, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	442, 438, 439, 440, 514, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 280, 451, 0, 452, 515,
	516, 517, 518, 0, 459, 0, 453, 454, 519, 455,
	520, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 465, 466, 468, 0, 469, 0, 467,
	470, 471, 472, 521, 522, 523, 0, 474, 473, 524,
	698, 0, 215, 0, 475, 476, 525, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 221,
	222, 223, 224, 225, 0, 226, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 227, 229, 228, 230,
	231, 481, 482, 232, 483, 233, 234, 484, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 485, 486,
	487, 0, 242, 488, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 0, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	263, 264, 489, 490, 0, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 270, 271, 0, 272, 0, 273,
	274, 0, 275, 491, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 286, 287, 288, 494, 289, 290, 0, 291,
	0, 292, 0, 0, 0, 293, 294, 0, 295, 495,
	0, 496, 296, 0, 297, 298, 299, 300, 497, 498,
	499, 351, 0, 301, 302, 0, 303, 304, 305, 307,
	0, 0, 0, 306, 308, 315, 0, 0, 309, 500,
	311, 310, 312, 313, 314, 501, 0, 502, 697, 316,
	0, 503, 0, 317, 318, 319, 0, 320, 321, 0,
	0, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	504, 0, 329, 330, 0, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 336, 337, 339, 341, 338, 340,
	342, 344, 345, 343, 0, 346, 347, 349, 348, 0,
	0, 0, 350, 0, 505, 506, 352, 353, 0, 354,
	355, 356, 0, 0, 358, 359, 360, 0, 0, 361,
	362, 507, 0, 363, 0, 508, 364, 357, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 509, 374,
	510, 375, 0, 376, 0, 377, 378, 379, 380, 381,
	382, 511, 383, 384, 0, 385, 386, 387, 388, 389,
	390, 0, 392, 393, 394, 391, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 512, 404, 0,
	405, 409, 410, 411, 412, 413, 414, 415, 0, 421,
	422, 416, 418, 419, 420, 417, 423, 424, 425, 0,
	426, 406, 407, 427, 428, 0, 429, 430, 513, 431,
	432, 0, 433, 434, 435, 436, 408, 437, 441, 442,
	438, 439, 440, 514, 0, 444, 445, 443, 696, 446,
	447, 448, 449, 450, 280, 451, 0, 452, 515, 516,
	517, 518, 0, 459, 0, 453, 454, 519, 455, 520,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 521, 522, 523, 215, 474, 473, 524, 0,
	0, 0, 0, 475, 476, 525, 477, 478, 479, 0,
	0, 0, 221, 222, 223, 224, 225, 0, 226, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 227,
	229, 228, 230, 231, 481, 482, 232, 483, 233, 234,
	484, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 485, 486, 487, 0, 242, 488, 0, 0, 0,
	243, 244, 245, 246, 247, 248, 0, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 0,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 263, 264, 489, 490, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 491, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 492, 493, 0, 2443,
	0, 0, 0, 0, 0, 286, 287, 288, 494, 289,
	290, 0, 291, 0, 292, 0, 0, 0, 293, 294,
	0, 295, 495, 0, 496, 296, 0, 297, 298, 299,
	300, 497, 498, 499, 351, 0, 301, 302, 0, 303,
	304, 305, 307, 0, 0, 0, 306, 308, 315, 0,
	0, 309, 500, 311, 310, 312, 313, 314, 501, 0,
	502, 0, 316, 0, 503, 0, 317, 318, 319, 0,
	320, 321, 0, 0, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 504, 0, 329, 330, 0, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 336, 337, 339,
	341, 338, 340, 342, 344, 345, 343, 0, 346, 347,
	349, 348, 0, 0, 0, 350, 0, 505, 506, 352,
	353, 0, 354, 355, 356, 0, 0, 358, 359, 360,
	0, 0, 361, 362, 507, 0, 363, 0, 508, 364,
	357, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 509, 374, 510, 375, 3250, 376, 0, 377, 378,
	379, 380, 381, 382, 511, 383, 384, 0, 385, 386,
	387, 388, 389, 390, 0, 392, 393, 394, 391, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	512, 404, 0, 405, 409, 410, 411, 412, 413, 414,
	415, 0, 421, 422, 416, 418, 419, 420, 417, 423,
	424, 425, 0, 426, 406, 407, 427, 428, 0, 429,
	430, 513, 431, 432, 0, 433, 434, 435, 436, 408,
	437, 441, 442, 438, 439, 440, 514, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 280, 451, 0,
	452, 515, 516, 517, 518, 0, 459, 0, 453, 454,
	519, 455, 520, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 465, 466, 468, 0, 469,
	0, 467, 470, 471, 472, 521, 522, 523, 0, 474,
	473, 524, 533, 0, 215, 0, 475, 476, 525, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 532, 226, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 227, 229,
	228, 230, 231, 481, 482, 232, 483, 233, 234, 484,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	485, 486, 487, 0, 242, 488, 0, 0, 0, 243,
	244, 245, 246, 247, 248, 0, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 489, 490, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 491, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 492, 493, 0, 0, 0,
	0, 0, 0, 0, 286, 287, 288, 494, 289, 290,
	0, 291, 0, 292, 0, 0, 0, 293, 294, 0,
	295, 495, 0, 496, 296, 0, 297, 298, 299, 300,
	497, 498, 499, 351, 0, 301, 302, 0, 303, 304,
	305, 307, 0, 0, 0, 306, 308, 315, 0, 0,
	309, 500, 311, 310, 312, 313, 314, 501, 0, 502,
	0, 316, 0, 503, 0, 317, 318, 319, 0, 320,
	321, 0, 0, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 504, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 336, 337, 339, 341,
	338, 340, 342, 344, 345, 343, 0, 346, 347, 349,
	348, 0, 0, 0, 350, 0, 505, 506, 352, 353,
	0, 354, 355, 356, 0, 0, 358, 359, 360, 0,
	0, 361, 362, 507, 0, 363, 0, 508, 364, 357,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	509, 374, 510, 531, 0, 376, 0, 377, 378, 379,
	380, 381, 382, 511, 383, 384, 0, 385, 386, 387,
	388, 389, 390, 0, 392, 393, 394, 391, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 512,
	404, 0, 405, 409, 410, 411, 412, 413, 414, 415,
	0, 421, 422, 416, 418, 419, 420, 417, 423, 424,
	425, 0, 426, 406, 407, 427, 428, 0, 429, 430,
	513, 431, 432, 0, 433, 434, 435, 436, 408, 437,
	441, 442, 438, 439, 440, 514, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 280, 451, 0, 452,
	515, 516, 517, 518, 0, 459, 0, 453, 454, 519,
	455, 520, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 521, 522, 523, 215, 474, 473,
	524, 0, 0, 0, 0, 475, 476, 525, 477, 478,
	479, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 480, 0, 2226, 0,
	0, 227, 229, 228, 230, 231, 481, 482, 232, 483,
	233, 234, 484, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 485, 486, 487, 0, 242, 488, 0,
	0, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 0, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 263, 264, 489, 490, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 491, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 286, 287, 288,
	494, 289, 290, 0, 291, 0, 292, 0, 0, 0,
	293, 294, 0, 295, 495, 0, 496, 296, 0, 297,
	298, 299, 300, 497, 498, 499, 351, 0, 301, 302,
	0, 303, 304, 305, 307, 0, 0, 0, 306, 308,
	315, 0, 0, 309, 500, 311, 310, 312, 313, 314,
	501, 0, 502, 0, 316, 0, 503, 0, 317, 318,
	319, 0, 320, 321, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 504, 0, 329, 330, 0,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 345, 343, 0,
	346, 347, 349, 348, 0, 0, 0, 350, 0, 505,
	506, 352, 353, 0, 354, 355, 356, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 0, 363, 0,
	508, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 509, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 511, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 512, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 416, 418, 419, 420,
	417, 423, 424, 425, 0, 426, 406, 407, 427, 428,
	0, 429, 430, 513, 431, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 442, 438, 439, 440, 514, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	451, 0, 452, 515, 516, 517, 518, 0, 459, 0,
	453, 454, 519, 455, 520, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 465, 466, 468,
	0, 469, 0, 467, 470, 471, 472, 521, 522, 523,
	0, 474, 473, 524, 215, 2430, 0, 0, 475, 476,
	525, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 0, 226, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 227, 229,
	228, 230, 231, 481, 482, 232, 483, 233, 234, 484,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	485, 486, 487, 0, 242, 488, 0, 0, 0, 243,
	244, 245, 246, 247, 248, 0, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 489, 490, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 491, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 492, 493, 0, 0, 0,
	0, 0, 0, 0, 286, 287, 288, 494, 289, 290,
	0, 291, 0, 292, 0, 0, 0, 293, 294, 0,
	295, 495, 0, 496, 296, 0, 297, 298, 299, 300,
	497, 498, 499, 351, 0, 301, 302, 0, 303, 304,
	305, 307, 0, 0, 0, 306, 308, 315, 0, 0,
	309, 500, 311, 310, 312, 313, 314, 501, 0, 502,
	0, 316, 0, 503, 0, 317, 318, 319, 0, 320,
	321, 0, 0, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 504, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 336, 337, 339, 341,
	338, 340, 342, 344, 345, 343, 0, 346, 347, 349,
	348, 0, 0, 0, 350, 0, 505, 506, 352, 353,
	0, 354, 355, 356, 0, 0, 358, 359, 360, 0,
	0, 361, 362, 507, 0, 363, 0, 508, 364, 357,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	509, 374, 510, 375, 0, 376, 0, 377, 378, 379,
	380, 381, 382, 511, 383, 384, 0, 385, 386, 387,
	388, 389, 390, 0, 392, 393, 394, 391, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 512,
	404, 0, 405, 409, 410, 411, 412, 413, 414, 415,
	0, 421, 422, 416, 418, 419, 420, 417, 423, 424,
	425, 0, 426, 406, 407, 427, 428, 0, 429, 430,
	513, 431, 432, 0, 433, 434, 435, 436, 408, 437,
	441, 442, 438, 439, 440, 514, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 280, 451, 0, 452,
	515, 516, 517, 518, 0, 459, 0, 453, 454, 519,
	455, 520, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 521, 522, 523, 215, 474, 473,
	524, 0, 0, 0, 0, 475, 476, 525, 477, 478,
	479, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 482, 232, 483,
	233, 234, 484, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 485, 486, 487, 0, 242, 488, 0,
	0, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 0, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 263, 264, 489, 490, 3044,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 491, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 286, 287, 288,
	494, 289, 290, 0, 291, 0, 292, 0, 0, 0,
	293, 294, 0, 295, 495, 0, 496, 296, 0, 297,
	298, 299, 300, 497, 498, 499, 351, 0, 301, 302,
	0, 303, 304, 305, 307, 0, 0, 0, 306, 308,
	315, 0, 0, 309, 500, 311, 310, 312, 313, 314,
	501, 0, 502, 0, 316, 0, 503, 0, 317, 318,
	319, 0, 320, 321, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 504, 0, 329, 330, 0,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 345, 343, 0,
	346, 347, 349, 348, 0, 0, 0, 350, 0, 505,
	506, 352, 353, 0, 354, 355, 356, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 0, 363, 0,
	508, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 509, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 511, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 512, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 416, 418, 419, 420,
	417, 423, 424, 425, 0, 426, 406, 407, 427, 428,
	0, 429, 430, 513, 431, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 442, 438, 439, 440, 514, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	451, 0, 452, 515, 516, 517, 518, 0, 459, 0,
	453, 454, 519, 455, 520, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 465, 466, 468,
	0, 469, 0, 467, 470, 471, 472, 521, 522, 523,
	0, 474, 473, 524, 215, 2430, 0, 0, 475, 476,
	525, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 0, 226, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 227, 229,
	228, 230, 231, 481, 482, 232, 483, 233, 234, 484,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	485, 486, 487, 0, 242, 488, 0, 0, 0, 243,
	244, 245, 246, 247, 248, 0, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 489, 490, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 491, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 492, 493, 0, 0, 0,
	0, 0, 0, 0, 286, 287, 288, 494, 289, 290,
	0, 291, 0, 292, 0, 0, 0, 293, 294, 0,
	295, 495, 0, 496, 296, 0, 297, 298, 299, 300,
	497, 498, 499, 351, 0, 301, 302, 0, 303, 304,
	305, 307, 0, 0, 0, 306, 308, 315, 0, 0,
	309, 500, 311, 310, 312, 313, 314, 501, 0, 502,
	0, 316, 0, 503, 0, 317, 318, 319, 0, 320,
	321, 0, 0, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 504, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 336, 337, 339, 341,
	338, 340, 342, 344, 345, 343, 0, 346, 347, 349,
	348, 0, 0, 0, 350, 0, 505, 506, 352, 353,
	0, 354, 355, 356, 0, 0, 358, 359, 2427, 0,
	0, 361, 362, 507, 0, 363, 0, 508, 364, 357,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	509, 374, 510, 375, 0, 376, 0, 377, 378, 379,
	380, 381, 382, 511, 383, 384, 0, 385, 386, 387,
	388, 389, 390, 0, 392, 393, 394, 391, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 512,
	404, 0, 405, 409, 410, 411, 412, 413, 414, 415,
	0, 421, 422, 416, 418, 419, 420, 417, 423, 424,
	425, 0, 426, 406, 407, 427, 428, 0, 429, 430,
	513, 431, 432, 0, 433, 434, 435, 436, 408, 437,
	441, 442, 438, 439, 440, 514, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 280, 451, 0, 452,
	515, 516, 517, 518, 0, 459, 0, 453, 454, 519,
	455, 520, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 521, 522, 523, 215, 474, 473,
	524, 0, 0, 0, 0, 475, 476, 525, 477, 478,
	479, 0, 0, 0, 221, 222, 223, 224, 225, 1922,
	226, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 482, 232, 483,
	233, 234, 484, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 485, 486, 487, 0, 242, 488, 0,
	0, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 0, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 263, 264, 489, 490, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 491, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 286, 287, 288,
	494, 289, 290, 0, 291, 0, 292, 0, 0, 0,
	293, 294, 0, 295, 495, 0, 496, 296, 0, 297,
	298, 299, 300, 497, 498, 499, 351, 0, 301, 302,
	0, 303, 304, 305, 307, 0, 0, 0, 306, 308,
	315, 0, 0, 309, 500, 311, 310, 312, 313, 314,
	501, 0, 502, 0, 316, 0, 503, 0, 317, 318,
	319, 0, 320, 321, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 504, 0, 329, 330, 0,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 345, 343, 0,
	346, 347, 349, 348, 0, 0, 0, 350, 0, 505,
	506, 352, 353, 0, 354, 355, 356, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 0, 363, 0,
	508, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 509, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 511, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 512, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 416, 418, 419, 420,
	417, 423, 424, 425, 0, 426, 406, 407, 427, 428,
	0, 429, 430, 513, 431, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 442, 438, 439, 440, 514, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	451, 0, 452, 515, 516, 517, 518, 0, 459, 0,
	453, 454, 519, 455, 520, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 465, 466, 468,
	0, 469, 0, 467, 470, 471, 472, 521, 522, 523,
	0, 474, 473, 524, 1913, 0, 215, 0, 475, 476,
	525, 477, 478, 479, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 222, 223, 224, 225, 0, 226,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	227, 229, 228, 230, 231, 481, 482, 232, 483, 233,
	234, 484, 0, 235, 236, 237, 238, 239, 240, 0,
	0, 241, 485, 486, 487, 0, 242, 488, 0, 0,
	0, 243, 244, 245, 246, 247, 248, 0, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	0, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 263, 264, 489, 490, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 491, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 286, 287, 288, 494,
	289, 290, 0, 291, 0, 292, 0, 0, 0, 293,
	294, 0, 295, 495, 0, 496, 296, 0, 297, 298,
	299, 300, 497, 498, 499, 351, 0, 301, 302, 0,
	303, 304, 305, 307, 0, 0, 0, 306, 308, 315,
	0, 0, 309, 500, 311, 310, 312, 313, 314, 501,
	0, 502, 0, 316, 0, 503, 0, 317, 318, 319,
	0, 320, 321, 0, 0, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 504, 0, 329, 330, 0, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 336, 337,
	339, 341, 338, 340, 342, 344, 345, 343, 0, 346,
	347, 349, 348, 0, 0, 0, 350, 0, 505, 506,
	352, 353, 0, 354, 355, 356, 0, 0, 358, 359,
	360, 0, 0, 361, 362, 507, 0, 363, 0, 508,
	364, 357, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 509, 374, 510, 375, 0, 376, 0, 377,
	378, 379, 380, 381, 382, 511, 383, 384, 0, 385,
	386, 387, 388, 389, 390, 0, 392, 393, 394, 391,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 512, 404, 0, 405, 409, 410, 411, 412, 413,
	414, 415, 0, 421, 422, 416, 418, 419, 420, 417,
	423, 424, 425, 0, 426, 406, 407, 427, 428, 0,
	429, 430, 513, 431, 432, 0, 433, 434, 435, 436,
	408, 437, 441, 442, 438, 439, 440, 514, 0, 444,
	445, 443, 0, 446, 447, 448, 449, 450, 280, 451,
	0, 452, 515, 516, 517, 518, 0, 459, 0, 453,
	454, 519, 455, 520, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 521, 522, 523, 0,
	474, 473, 524, 574, 0, 215, 0, 475, 476, 525,
	477, 478, 479, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 222, 223, 224, 225, 0, 226, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 227,
	1054, 228, 230, 231, 481, 482, 232, 483, 233, 234,
	484, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 485, 486, 1052, 0, 242, 488, 0, 0, 0,
	243, 244, 245, 246, 247, 248, 0, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 0,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 263, 264, 489, 490, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 491, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 286, 287, 288, 494, 289,
	290, 0, 291, 0, 292, 0, 0, 0, 293, 294,
	0, 295, 495, 0, 496, 296, 0, 297, 298, 299,
	300, 497, 498, 499, 351, 0, 301, 302, 0, 303,
	304, 305, 307, 0, 0, 0, 306, 308, 315, 0,
	0, 309, 500, 311, 310, 312, 313, 314, 501, 0,
	502, 0, 316, 0, 503, 0, 317, 318, 319, 0,
	320, 321, 0, 0, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 504, 0, 329, 330, 0, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 336, 337, 339,
	341, 338, 340, 342, 344, 345, 575, 0, 346, 347,
	349, 348, 0, 0, 0, 350, 0, 505, 506, 352,
	353, 0, 354, 355, 356, 0, 0, 358, 359, 360,
	0, 0, 361, 362, 507, 0, 363, 0, 508, 364,
	357, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 509, 374, 510, 375, 0, 376, 0, 377, 378,
	379, 380, 381, 382, 511, 383, 384, 0, 385, 386,
	387, 388, 389, 390, 0, 392, 393, 394, 391, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	512, 404, 0, 405, 409, 410, 571, 412, 413, 414,
	415, 0, 421, 422, 416, 418, 419, 420, 417, 423,
	1055, 425, 0, 426, 406, 407, 427, 428, 0, 429,
	430, 513, 431, 432, 0, 433, 434, 435, 436, 408,
	437, 441, 442, 438, 439, 440, 514, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 280, 451, 0,
	452, 570, 516, 517, 518, 0, 459, 0, 453, 454,
	519, 455, 520, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 465, 466, 468, 0, 469,
	0, 467, 470, 471, 472, 521, 522, 523, 0, 474,
	473, 524, 574, 0, 215, 0, 475, 476, 525, 477,
	478, 479, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 221, 222, 223, 224, 225, 0, 226, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 227, 229,
	228, 230, 231, 481, 482, 232, 483, 233, 234, 484,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	485, 486, 487, 0, 564, 488, 0, 0, 0, 243,
	244, 245, 246, 247, 248, 0, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 489, 490, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 491, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 492, 493, 0, 0, 0,
	0, 0, 0, 0, 286, 287, 288, 494, 289, 290,
	0, 291, 0, 292, 0, 0, 0, 293, 294, 0,
	295, 495, 0, 496, 296, 0, 297, 298, 299, 300,
	497, 498, 499, 351, 0, 301, 302, 0, 303, 304,
	305, 307, 0, 0, 0, 306, 308, 315, 0, 0,
	309, 500, 311, 310, 312, 313, 314, 501, 0, 502,
	0, 316, 0, 503, 0, 317, 318, 319, 0, 320,
	321, 0, 0, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 504, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 336, 337, 339, 341,
	338, 340, 342, 344, 345, 575, 0, 346, 347, 349,
	348, 0, 0, 0, 350, 0, 505, 506, 352, 353,
	0, 354, 355, 356, 0, 0, 358, 359, 360, 0,
	0, 361, 362, 507, 0, 363, 0, 508, 364, 357,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	509, 374, 510, 375, 0, 376, 0, 377, 378, 379,
	380, 381, 382, 511, 383, 384, 0, 385, 386, 387,
	388, 389, 390, 0, 392, 393, 394, 391, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 512,
	404, 0, 405, 409, 410, 571, 412, 413, 414, 415,
	0, 421, 422, 416, 418, 419, 420, 417, 423, 1339,
	425, 0, 426, 406, 407, 427, 428, 0, 429, 430,
	513, 431, 432, 0, 433, 434, 435, 436, 408, 437,
	441, 442, 438, 439, 440, 514, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 280, 451, 0, 452,
	570, 516, 517, 518, 0, 459, 0, 453, 454, 519,
	455, 520, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 521, 522, 523, 0, 474, 473,
	524, 1322, 0, 215, 0, 475, 476, 525, 477, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	221, 222, 223, 224, 225, 0, 226, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 227, 229, 228,
	230, 231, 481, 482, 232, 483, 233, 234, 484, 0,
	235, 236, 237, 238, 239, 240, 0, 0, 241, 485,
	486, 487, 0, 242, 488, 0, 0, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 489, 490, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 491, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 286, 287, 288, 494, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	495, 0, 496, 296, 0, 297, 298, 299, 300, 1321,
	498, 499, 351, 0, 301, 302, 0, 303, 304, 305,
	307, 0, 0, 0, 306, 308, 315, 0, 0, 309,
	500, 311, 310, 312, 313, 314, 501, 0, 502, 0,
	316, 0, 503, 0, 317, 318, 319, 0, 320, 321,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 504, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	340, 342, 344, 345, 343, 0, 346, 347, 349, 348,
	0, 0, 0, 350, 0, 505, 506, 352, 353, 0,
	354, 355, 356, 0, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 0, 363, 0, 508, 364, 357, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 509,
	374, 510, 375, 0, 376, 0, 377, 378, 379, 380,
	381, 382, 511, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 512, 404,
	0, 405, 409, 410, 411, 412, 413, 414, 415, 0,
	421, 422, 416, 418, 419, 420, 417, 423, 424, 425,
	0, 426, 406, 407, 427, 428, 0, 429, 430, 513,
	431, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	442, 438, 439, 440, 514, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 280, 451, 0, 452, 515,
	516, 517, 518, 0, 459, 0, 453, 454, 519, 455,
	520, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 465, 466, 468, 0, 469, 0, 467,
	470, 471, 472, 521, 522, 523, 0, 474, 473, 524,
	1272, 0, 215, 0, 475, 476, 525, 477, 478, 479,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 221,
	222, 223, 224, 225, 0, 226, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 227, 229, 228, 230,
	231, 481, 482, 232, 483, 233, 234, 484, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 485, 486,
	487, 0, 242, 488, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 0, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	263, 264, 489, 490, 0, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 270, 271, 0, 272, 0, 273,
	274, 0, 275, 491, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 286, 287, 288, 494, 289, 290, 0, 291,
	0, 292, 0, 0, 0, 293, 294, 0, 295, 495,
	0, 496, 296, 0, 297, 298, 299, 300, 1271, 498,
	499, 351, 0, 301, 302, 0, 303, 304, 305, 307,
	0, 0, 0, 306, 308, 315, 0, 0, 309, 500,
	311, 310, 312, 313, 314, 501, 0, 502, 0, 316,
	0, 503, 0, 317, 318, 319, 0, 320, 321, 0,
	0, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	504, 0, 329, 330, 0, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 336, 337, 339, 341, 338, 340,
	342, 344, 345, 343, 0, 346, 347, 349, 348, 0,
	0, 0, 350, 0, 505, 506, 352, 353, 0, 354,
	355, 356, 0, 0, 358, 359, 360, 0, 0, 361,
	362, 507, 0, 363, 0, 508, 364, 357, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 509, 374,
	510, 375, 0, 376, 0, 377, 378, 379, 380, 381,
	382, 511, 383, 384, 0, 385, 386, 387, 388, 389,
	390, 0, 392, 393, 394, 391, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 512, 404, 0,
	405, 409, 410, 411, 412, 413, 414, 415, 0, 421,
	422, 416, 418, 419, 420, 417, 423, 424, 425, 0,
	426, 406, 407, 427, 428, 0, 429, 430, 513, 431,
	432, 0, 433, 434, 435, 436, 408, 437, 441, 442,
	438, 439, 440, 514, 0, 444, 445, 443, 0, 446,
	447, 448, 449, 450, 280, 451, 0, 452, 515, 516,
	517, 518, 0, 459, 0, 453, 454, 519, 455, 520,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 521, 522, 523, 0, 474, 473, 524, 1256,
	0, 215, 0, 475, 476, 525, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 482, 232, 483, 233, 234, 484, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 485, 486, 487,
	0, 242, 488, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 0, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 489, 490, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 491, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 286, 287, 288, 494, 289, 290, 0, 291, 0,
	292, 0, 0, 0, 293, 294, 0, 295, 495, 0,
	496, 296, 0, 297, 298, 299, 300, 497, 498, 499,
	351, 0, 301, 302, 0, 303, 304, 305, 307, 0,
	0, 0, 306, 308, 315, 0, 0, 309, 500, 311,
	310, 312, 313, 314, 501, 0, 502, 0, 316, 0,
	503, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 504,
	0, 329, 330, 0, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 345, 343, 0, 346, 347, 349, 348, 0, 0,
	0, 350, 0, 505, 506, 352, 353, 0, 354, 355,
	356, 0, 0, 358, 359, 360, 0, 0, 361, 362,
	507, 0, 363, 0, 508, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 509, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	511, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 512, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 0, 421, 422,
	416, 418, 419, 420, 417, 423, 424, 425, 0, 426,
	406, 407, 427, 428, 0, 429, 430, 513, 431, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 442, 438,
	439, 440, 514, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 451, 0, 452, 515, 516, 517,
	518, 0, 459, 0, 453, 454, 519, 455, 520, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 465, 466, 468, 0, 469, 0, 467, 470, 471,
	472, 521, 522, 523, 0, 474, 473, 524, 1193, 0,
	215, 0, 475, 476, 525, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 226, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 227, 229, 228, 230, 231, 481,
	482, 232, 483, 233, 234, 484, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 485, 486, 487, 0,
	242, 488, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	489, 490, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 491, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	286, 287, 288, 494, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 495, 0, 496,
	296, 0, 297, 298, 299, 300, 497, 498, 499, 351,
	0, 301, 302, 0, 303, 304, 305, 307, 0, 0,
	0, 306, 308, 315, 0, 0, 309, 500, 311, 310,
	312, 313, 314, 501, 0, 502, 0, 316, 0, 503,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 504, 0,
	329, 330, 0, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 336, 337, 339, 341, 338, 340, 342, 344,
	345, 343, 0, 346, 347, 349, 348, 0, 0, 0,
	350, 0, 505, 506, 352, 353, 0, 354, 355, 356,
	0, 0, 358, 359, 360, 0, 0, 361, 362, 507,
	0, 363, 0, 508, 364, 357, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 509, 374, 510, 375,
	0, 376, 0, 377, 378, 379, 380, 381, 382, 511,
	383, 384, 0, 385, 386, 387, 388, 389, 390, 0,
	392, 393, 394, 391, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 512, 404, 0, 405, 409,
	410, 411, 412, 413, 414, 415, 0, 421, 422, 416,
	418, 419, 420, 417, 423, 424, 425, 0, 426, 406,
	407, 427, 428, 0, 429, 430, 513, 431, 432, 0,
	433, 434, 435, 436, 408, 437, 441, 442, 438, 439,
	440, 514, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 280, 451, 0, 452, 515, 516, 517, 518,
	0, 459, 0, 453, 454, 519, 455, 520, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	521, 522, 523, 0, 474, 473, 524, 574, 0, 215,
	0, 475, 476, 525, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 223, 224,
	225, 0, 226, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 227, 1054, 228, 230, 231, 481, 482,
	232, 483, 233, 234, 484, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 485, 486, 1052, 0, 242,
	488, 0, 0, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 489,
	490, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	491, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 286,
	287, 288, 494, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 495, 0, 496, 296,
	0, 297, 298, 299, 300, 497, 498, 499, 351, 0,
	301, 302, 0, 303, 304, 305, 307, 0, 0, 0,
	306, 308, 315, 0, 0, 309, 500, 311, 310, 312,
	313, 314, 501, 0, 502, 0, 316, 0, 503, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 504, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 345,
	575, 0, 346, 347, 349, 348, 0, 0, 0, 350,
	0, 505, 506, 352, 353, 0, 354, 355, 356, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 0,
	363, 0, 508, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 509, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 381, 382, 511, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 512, 404, 0, 405, 409, 410,
	571, 412, 413, 414, 415, 0, 421, 422, 416, 418,
	419, 420, 417, 423, 1055, 425, 0, 426, 406, 407,
	427, 428, 0, 429, 430, 513, 431, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 442, 438, 439, 440,
	514, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 280, 451, 0, 452, 570, 516, 517, 518, 0,
	459, 0, 453, 1053, 519, 455, 520, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 465,
	466, 468, 0, 469, 0, 467, 470, 471, 472, 521,
	522, 523, 215, 474, 473, 524, 0, 0, 0, 0,
	475, 476, 525, 477, 478, 479, 0, 0, 0, 221,
	222, 223, 224, 225, 1036, 226, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 227, 229, 228, 230,
	231, 481, 482, 232, 483, 233, 234, 484, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 485, 486,
	487, 0, 242, 488, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 0, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	263, 264, 489, 490, 0, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 270, 271, 0, 272, 0, 273,
	274, 0, 275, 491, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 286, 287, 288, 494, 289, 290, 0, 291,
	0, 292, 0, 0, 0, 293, 294, 0, 295, 495,
	0, 496, 296, 0, 297, 298, 299, 300, 497, 498,
	499, 351, 0, 301, 302, 0, 303, 304, 305, 307,
	0, 0, 0, 306, 308, 315, 0, 0, 309, 500,
	311, 310, 312, 313, 314, 501, 0, 502, 0, 316,
	0, 503, 0, 317, 318, 319, 0, 320, 321, 0,
	0, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	504, 0, 329, 330, 0, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 336, 337, 339, 341, 338, 340,
	342, 344, 345, 343, 0, 346, 347, 349, 348, 0,
	0, 0, 350, 0, 505, 506, 352, 353, 0, 354,
	355, 356, 0, 0, 358, 359, 360, 0, 0, 361,
	362, 507, 0, 363, 0, 508, 364, 357, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 509, 374,
	510, 375, 0, 376, 0, 377, 378, 379, 380, 381,
	382, 511, 383, 384, 0, 385, 386, 387, 388, 389,
	390, 0, 392, 393, 394, 391, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 512, 404, 0,
	405, 409, 410, 411, 412, 413, 414, 415, 0, 421,
	422, 416, 418, 419, 420, 417, 423, 424, 425, 0,
	426, 406, 407, 427, 428, 0, 429, 430, 513, 431,
	432, 0, 433, 434, 435, 436, 408, 437, 441, 442,
	438, 439, 440, 514, 0, 444, 445, 443, 0, 446,
	447, 448, 449, 450, 280, 451, 0, 452, 515, 516,
	517, 518, 0, 459, 0, 453, 454, 519, 455, 520,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 521, 522, 523, 0, 474, 473, 524, 574,
	0, 215, 0, 475, 476, 525, 477, 478, 479, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	480, 0, 0, 0, 0, 227, 229, 228, 230, 231,
	481, 482, 232, 483, 233, 234, 484, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 485, 486, 487,
	0, 564, 488, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 562,
	0, 254, 255, 256, 0, 0, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 489, 490, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 491, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 286, 287, 288, 494, 289, 290, 0, 291, 0,
	292, 0, 0, 0, 293, 294, 0, 295, 495, 0,
	496, 296, 0, 297, 298, 299, 300, 497, 498, 499,
	351, 0, 301, 302, 0, 303, 304, 305, 307, 0,
	0, 0, 306, 308, 315, 0, 0, 309, 500, 311,
	310, 312, 313, 314, 501, 0, 502, 0, 316, 0,
	503, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 504,
	0, 329, 330, 0, 0, 331, 563, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 345, 575, 0, 346, 347, 349, 348, 0, 0,
	0, 350, 0, 505, 506, 352, 353, 0, 354, 355,
	356, 0, 0, 358, 359, 360, 0, 0, 361, 362,
	507, 0, 363, 0, 508, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 509, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	511, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 565, 404, 0, 405,
	409, 410, 571, 412, 413, 414, 415, 0, 421, 422,
	416, 418, 419, 420, 417, 423, 566, 425, 0, 426,
	406, 407, 427, 428, 0, 429, 430, 513, 431, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 442, 438,
	439, 440, 514, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 451, 0, 452, 570, 516, 517,
	518, 0, 459, 0, 453, 568, 519, 455, 520, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 465, 466, 468, 0, 469, 0, 467, 470, 471,
	472, 521, 522, 523, 0, 474, 473, 524, 558, 0,
	215, 0, 475, 476, 525, 477, 478, 479, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 226, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 227, 229, 228, 230, 231, 481,
	482, 232, 483, 233, 234, 484, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 485, 486, 487, 0,
	242, 488, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	489, 490, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 491, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	286, 287, 288, 494, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 495, 0, 496,
	296, 0, 297, 298, 299, 300, 497, 498, 499, 351,
	0, 301, 302, 0, 303, 304, 305, 307, 0, 0,
	0, 306, 308, 315, 0, 0, 309, 500, 311, 310,
	312, 313, 314, 501, 0, 502, 0, 316, 0, 503,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 504, 0,
	329, 330, 0, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 336, 337, 339, 341, 338, 340, 342, 344,
	345, 343, 0, 346, 347, 349, 348, 0, 0, 0,
	350, 0, 505, 506, 352, 353, 0, 354, 355, 356,
	0, 0, 358, 359, 360, 0, 0, 361, 362, 507,
	0, 363, 0, 508, 364, 357, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 509, 374, 510, 375,
	0, 376, 0, 377, 378, 379, 380, 381, 382, 511,
	383, 384, 0, 385, 386, 387, 388, 389, 390, 0,
	392, 393, 394, 391, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 512, 404, 0, 405, 559,
	410, 411, 412, 413, 414, 415, 0, 421, 422, 416,
	418, 419, 420, 417, 423, 424, 425, 0, 426, 406,
	407, 427, 428, 0, 429, 430, 513, 431, 432, 0,
	433, 434, 435, 436, 408, 437, 441, 442, 438, 439,
	440, 514, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 280, 451, 0, 452, 515, 516, 517, 518,
	0, 459, 0, 453, 454, 519, 455, 520, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	521, 522, 523, 0, 474, 473, 524, 556, 0, 215,
	0, 475, 476, 525, 477, 478, 479, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 222, 223, 224,
	225, 0, 226, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 227, 229, 228, 230, 231, 481, 482,
	232, 483, 233, 234, 484, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 485, 486, 487, 0, 242,
	488, 0, 0, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 489,
	490, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	491, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 286,
	287, 288, 494, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 495, 0, 496, 296,
	0, 297, 298, 299, 300, 497, 498, 499, 351, 0,
	301, 302, 0, 303, 304, 305, 307, 0, 0, 0,
	306, 308, 315, 0, 0, 309, 500, 311, 310, 312,
	313, 314, 501, 0, 502, 0, 316, 0, 503, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 504, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 345,
	343, 0, 346, 347, 349, 348, 0, 0, 0, 350,
	0, 505, 506, 352, 353, 0, 354, 355, 356, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 0,
	363, 0, 508, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 509, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 381, 382, 511, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 512, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 0, 421, 422, 416, 418,
	419, 420, 417, 423, 424, 425, 0, 426, 406, 407,
	427, 428, 0, 429, 430, 513, 431, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 442, 438, 439, 440,
	514, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 280, 451, 0, 452, 515, 516, 517, 518, 0,
	459, 0, 453, 454, 519, 455, 520, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 465,
	466, 468, 0, 469, 0, 467, 470, 471, 472, 521,
	522, 523, 0, 474, 473, 524, 550, 0, 215, 0,
	475, 476, 525, 477, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 226, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 227, 229, 228, 230, 231, 481, 482, 232,
	483, 233, 234, 484, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 485, 486, 487, 0, 242, 488,
	0, 0, 0, 243, 244, 245, 246, 247, 248, 0,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 0, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 489, 490,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 491,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 286, 287,
	288, 494, 289, 290, 0, 291, 0, 292, 0, 0,
	0, 293, 294, 0, 295, 495, 0, 496, 296, 0,
	297, 298, 299, 300, 497, 498, 499, 351, 0, 301,
	302, 0, 303, 304, 305, 307, 0, 0, 0, 306,
	308, 315, 0, 0, 309, 500, 311, 310, 312, 313,
	314, 501, 0, 502, 0, 316, 0, 503, 0, 317,
	318, 319, 0, 320, 321, 0, 0, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 504, 0, 329, 330,
	0, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	336, 337, 339, 341, 338, 340, 342, 344, 345, 343,
	0, 346, 347, 349, 348, 0, 0, 0, 350, 0,
	505, 506, 352, 353, 0, 354, 355, 356, 0, 0,
	358, 359, 360, 0, 0, 361, 362, 507, 0, 363,
	0, 508, 364, 357, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 373, 509, 374, 510, 375, 0, 376,
	0, 377, 378, 379, 380, 381, 382, 511, 383, 384,
	0, 385, 386, 387, 388, 389, 390, 0, 392, 393,
	394, 391, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 512, 404, 0, 405, 409, 410, 411,
	412, 413, 414, 415, 0, 421, 422, 416, 418, 419,
	420, 417, 423, 424, 425, 0, 426, 406, 407, 427,
	428, 0, 429, 430, 513, 431, 432, 0, 433, 434,
	435, 436, 408, 437, 441, 442, 438, 439, 440, 514,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	280, 451, 0, 452, 515, 516, 517, 518, 0, 459,
	0, 453, 454, 519, 455, 520, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 521, 522,
	523, 0, 474, 473, 524, 528, 0, 215, 0, 475,
	476, 525, 477, 478, 479, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 482, 232, 483,
	233, 234, 484, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 485, 486, 487, 0, 242, 488, 0,
	0, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 0, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 263, 264, 489, 490, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 491, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 286, 287, 288,
	494, 289, 290, 0, 291, 0, 292, 0, 0, 0,
	293, 294, 0, 295, 495, 0, 496, 296, 0, 297,
	298, 299, 300, 497, 498, 499, 351, 0, 301, 302,
	0, 303, 304, 305, 307, 0, 0, 0, 306, 308,
	315, 0, 0, 309, 500, 311, 310, 312, 313, 314,
	501, 0, 502, 0, 316, 0, 503, 0, 317, 318,
	319, 0, 320, 321, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 504, 0, 329, 330, 0,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 345, 343, 0,
	346, 347, 349, 348, 0, 0, 0, 350, 0, 505,
	506, 352, 353, 0, 354, 355, 356, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 0, 363, 0,
	508, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 509, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 511, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 512, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 416, 418, 419, 420,
	417, 423, 424, 425, 0, 426, 406, 407, 427, 428,
	0, 429, 430, 513, 431, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 442, 438, 439, 440, 514, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	451, 0, 452, 515, 516, 517, 518, 0, 459, 0,
	453, 454, 519, 455, 520, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 465, 466, 468,
	0, 469, 0, 467, 470, 471, 472, 521, 522, 523,
	215, 474, 473, 524, 0, 0, 0, 0, 475, 476,
	525, 477, 478, 479, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 226, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 227, 229, 228, 230, 231, 481,
	482, 232, 483, 233, 234, 484, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 485, 486, 487, 0,
	242, 488, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	489, 490, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 491, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	286, 287, 288, 494, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 495, 0, 496,
	296, 0, 297, 298, 299, 300, 497, 498, 499, 351,
	0, 301, 302, 0, 303, 304, 305, 307, 0, 0,
	0, 306, 308, 315, 0, 0, 309, 500, 311, 310,
	312, 313, 314, 501, 0, 502, 0, 316, 0, 503,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 504, 0,
	329, 330, 0, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 336, 337, 339, 341, 338, 340, 342, 344,
	345, 343, 0, 346, 347, 349, 348, 0, 0, 0,
	350, 0, 505, 506, 352, 353, 0, 354, 355, 356,
	0, 0, 358, 359, 360, 0, 0, 361, 362, 507,
	0, 363, 0, 508, 364, 357, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 509, 374, 510, 375,
	0, 376, 0, 377, 378, 379, 380, 381, 382, 511,
	383, 384, 0, 385, 386, 387, 388, 389, 390, 0,
	392, 393, 394, 391, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 512, 404, 0, 405, 409,
	410, 411, 412, 413, 414, 415, 0, 421, 422, 416,
	418, 419, 420, 417, 423, 424, 425, 0, 426, 406,
	407, 427, 428, 0, 429, 430, 513, 431, 432, 0,
	433, 434, 435, 436, 408, 437, 441, 442, 438, 439,
	440, 514, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 280, 451, 0, 452, 515, 516, 517, 518,
	0, 459, 0, 453, 454, 519, 455, 520, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	521, 522, 523, 215, 474, 473, 524, 0, 0, 0,
	0, 475, 476, 525, 477, 478, 479, 0, 0, 0,
	221, 222, 223, 224, 225, 0, 226, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 227, 229, 228,
	230, 231, 481, 482, 232, 483, 233, 234, 484, 0,
	235, 236, 237, 238, 239, 240, 0, 0, 241, 485,
	486, 487, 0, 242, 488, 0, 0, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 489, 490, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 491, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 286, 287, 288, 494, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	495, 0, 496, 296, 0, 297, 298, 299, 300, 2801,
	498, 499, 351, 0, 301, 302, 0, 303, 304, 305,
	307, 0, 0, 0, 306, 308, 315, 0, 0, 309,
	500, 311, 310, 312, 313, 314, 501, 0, 502, 0,
	316, 0, 503, 0, 317, 318, 319, 0, 320, 321,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 504, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	340, 342, 344, 345, 343, 0, 346, 347, 349, 348,
	0, 0, 0, 350, 0, 505, 506, 352, 353, 0,
	354, 355, 356, 0, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 0, 363, 0, 508, 364, 357, 365,
	366, 367, 368, 369, 370, 371, 0, 372, 373, 509,
	374, 510, 375, 0, 376, 0, 377, 378, 379, 380,
	381, 382, 511, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 512, 404,
	0, 405, 409, 410, 411, 412, 413, 414, 415, 0,
	421, 422, 416, 418, 419, 420, 417, 423, 424, 425,
	0, 426, 406, 407, 427, 428, 0, 429, 430, 513,
	431, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	442, 438, 439, 440, 514, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 280, 451, 0, 452, 515,
	516, 517, 518, 0, 459, 0, 453, 454, 519, 455,
	520, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 465, 466, 468, 0, 469, 0, 467,
	470, 471, 472, 521, 522, 523, 215, 474, 473, 524,
	0, 0, 0, 0, 475, 476, 525, 477, 478, 479,
	0, 0, 0, 221, 222, 223, 224, 225, 0, 226,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	227, 229, 228, 230, 231, 481, 482, 232, 483, 233,
	234, 484, 0, 235, 236, 237, 238, 239, 240, 0,
	0, 241, 485, 486, 487, 0, 242, 488, 0, 0,
	0, 243, 244, 245, 246, 247, 248, 0, 0, 250,
	251, 252, 249, 0, 253, 0, 254, 255, 256, 0,
	0, 257, 258, 0, 0, 0, 0, 0, 0, 0,
	259, 260, 261, 262, 263, 264, 489, 490, 0, 265,
	0, 267, 266, 0, 268, 0, 0, 269, 270, 271,
	0, 272, 0, 273, 274, 0, 275, 491, 276, 277,
	279, 281, 278, 282, 283, 284, 285, 492, 493, 0,
	0, 0, 0, 0, 0, 0, 286, 287, 288, 494,
	289, 290, 0, 291, 0, 292, 0, 0, 0, 293,
	294, 0, 295, 495, 0, 496, 296, 0, 297, 298,
	299, 300, 2728, 498, 499, 351, 0, 301, 302, 0,
	303, 304, 305, 307, 0, 0, 0, 306, 308, 315,
	0, 0, 309, 500, 311, 310, 312, 313, 314, 501,
	0, 502, 0, 316, 0, 503, 0, 317, 318, 319,
	0, 320, 321, 0, 0, 322, 323, 324, 325, 0,
	327, 326, 0, 328, 504, 0, 329, 330, 0, 0,
	331, 332, 0, 0, 333, 334, 335, 0, 336, 337,
	339, 341, 338, 340, 342, 344, 345, 343, 0, 346,
	347, 349, 348, 0, 0, 0, 350, 0, 505, 506,
	352, 353, 0, 354, 355, 356, 0, 0, 358, 359,
	360, 0, 0, 361, 362, 507, 0, 363, 0, 508,
	364, 357, 365, 366, 367, 368, 369, 370, 371, 0,
	372, 373, 509, 374, 510, 375, 0, 376, 0, 377,
	378, 379, 380, 381, 382, 511, 383, 384, 0, 385,
	386, 387, 388, 389, 390, 0, 392, 393, 394, 391,
	395, 396, 397, 398, 0, 399, 0, 400, 401, 402,
	403, 512, 404, 0, 405, 409, 410, 411, 412, 413,
	414, 415, 0, 421, 422, 416, 418, 419, 420, 417,
	423, 424, 425, 0, 426, 406, 407, 427, 428, 0,
	429, 430, 513, 431, 432, 0, 433, 434, 435, 436,
	408, 437, 441, 442, 438, 439, 440, 514, 0, 444,
	445, 443, 0, 446, 447, 448, 449, 450, 280, 451,
	0, 452, 515, 516, 517, 518, 0, 459, 0, 453,
	454, 519, 455, 520, 0, 456, 457, 458, 0, 460,
	461, 0, 0, 462, 463, 464, 465, 466, 468, 0,
	469, 0, 467, 470, 471, 472, 521, 522, 523, 215,
	474, 473, 524, 0, 0, 0, 0, 475, 476, 525,
	477, 478, 479, 0, 0, 0, 221, 222, 223, 224,
	225, 0, 226, 0, 0, 0, 0, 0, 480, 0,
	0, 0, 0, 227, 229, 228, 230, 231, 481, 482,
	232, 483, 233, 234, 484, 0, 235, 236, 237, 238,
	239, 240, 0, 0, 241, 485, 486, 487, 0, 242,
	488, 0, 0, 0, 243, 244, 245, 246, 247, 248,
	0, 0, 250, 251, 252, 249, 0, 253, 0, 254,
	255, 256, 0, 0, 257, 258, 0, 0, 0, 0,
	0, 0, 0, 259, 260, 261, 262, 263, 264, 489,
	490, 0, 265, 0, 267, 266, 0, 268, 0, 0,
	269, 270, 271, 0, 272, 0, 273, 274, 0, 275,
	491, 276, 277, 279, 281, 278, 282, 283, 284, 285,
	492, 493, 0, 0, 0, 0, 0, 0, 0, 286,
	287, 288, 494, 289, 290, 0, 291, 0, 292, 0,
	0, 0, 293, 294, 0, 295, 495, 0, 496, 296,
	0, 297, 298, 299, 300, 2726, 498, 499, 351, 0,
	301, 302, 0, 303, 304, 305, 307, 0, 0, 0,
	306, 308, 315, 0, 0, 309, 500, 311, 310, 312,
	313, 314, 501, 0, 502, 0, 316, 0, 503, 0,
	317, 318, 319, 0, 320, 321, 0, 0, 322, 323,
	324, 325, 0, 327, 326, 0, 328, 504, 0, 329,
	330, 0, 0, 331, 332, 0, 0, 333, 334, 335,
	0, 336, 337, 339, 341, 338, 340, 342, 344, 345,
	343, 0, 346, 347, 349, 348, 0, 0, 0, 350,
	0, 505, 506, 352, 353, 0, 354, 355, 356, 0,
	0, 358, 359, 360, 0, 0, 361, 362, 507, 0,
	363, 0, 508, 364, 357, 365, 366, 367, 368, 369,
	370, 371, 0, 372, 373, 509, 374, 510, 375, 0,
	376, 0, 377, 378, 379, 380, 381, 382, 511, 383,
	384, 0, 385, 386, 387, 388, 389, 390, 0, 392,
	393, 394, 391, 395, 396, 397, 398, 0, 399, 0,
	400, 401, 402, 403, 512, 404, 0, 405, 409, 410,
	411, 412, 413, 414, 415, 0, 421, 422, 416, 418,
	419, 420, 417, 423, 424, 425, 0, 426, 406, 407,
	427, 428, 0, 429, 430, 513, 431, 432, 0, 433,
	434, 435, 436, 408, 437, 441, 442, 438, 439, 440,
	514, 0, 444, 445, 443, 0, 446, 447, 448, 449,
	450, 280, 451, 0, 452, 515, 516, 517, 518, 0,
	459, 0, 453, 454, 519, 455, 520, 0, 456, 457,
	458, 0, 460, 461, 0, 0, 462, 463, 464, 465,
	466, 468, 0, 469, 0, 467, 470, 471, 472, 521,
	522, 523, 215, 474, 473, 524, 0, 0, 0, 0,
	475, 476, 525, 477, 478, 479, 0, 0, 0, 221,
	222, 223, 224, 225, 0, 226, 0, 0, 0, 0,
	0, 480, 0, 0, 0, 0, 227, 229, 228, 230,
	231, 481, 482, 232, 483, 233, 234, 484, 0, 235,
	236, 237, 238, 239, 240, 0, 0, 241, 485, 486,
	487, 0, 242, 488, 0, 0, 0, 243, 244, 245,
	246, 247, 248, 0, 0, 250, 251, 252, 249, 0,
	253, 0, 254, 255, 256, 0, 0, 257, 258, 0,
	0, 0, 0, 0, 0, 0, 259, 260, 261, 262,
	263, 264, 489, 490, 0, 265, 0, 267, 266, 0,
	268, 0, 0, 269, 270, 271, 0, 272, 0, 273,
	274, 0, 275, 491, 276, 277, 279, 281, 278, 282,
	283, 284, 285, 492, 493, 0, 0, 0, 0, 0,
	0, 0, 286, 287, 288, 494, 289, 290, 0, 291,
	0, 292, 0, 0, 0, 293, 294, 0, 295, 495,
	0, 496, 296, 0, 297, 298, 299, 300, 2713, 498,
	499, 351, 0, 301, 302, 0, 303, 304, 305, 307,
	0, 0, 0, 306, 308, 315, 0, 0, 309, 500,
	311, 310, 312, 313, 314, 501, 0, 502, 0, 316,
	0, 503, 0, 317, 318, 319, 0, 320, 321, 0,
	0, 322, 323, 324, 325, 0, 327, 326, 0, 328,
	504, 0, 329, 330, 0, 0, 331, 332, 0, 0,
	333, 334, 335, 0, 336, 337, 339, 341, 338, 340,
	342, 344, 345, 343, 0, 346, 347, 349, 348, 0,
	0, 0, 350, 0, 505, 506, 352, 353, 0, 354,
	355, 356, 0, 0, 358, 359, 360, 0, 0, 361,
	362, 507, 0, 363, 0, 508, 364, 357, 365, 366,
	367, 368, 369, 370, 371, 0, 372, 373, 509, 374,
	510, 375, 0, 376, 0, 377, 378, 379, 380, 381,
	382, 511, 383, 384, 0, 385, 386, 387, 388, 389,
	390, 0, 392, 393, 394, 391, 395, 396, 397, 398,
	0, 399, 0, 400, 401, 402, 403, 512, 404, 0,
	405, 409, 410, 411, 412, 413, 414, 415, 0, 421,
	422, 416, 418, 419, 420, 417, 423, 424, 425, 0,
	426, 406, 407, 427, 428, 0, 429, 430, 513, 431,
	432, 0, 433, 434, 435, 436, 408, 437, 441, 442,
	438, 439, 440, 514, 0, 444, 445, 443, 0, 446,
	447, 448, 449, 450, 280, 451, 0, 452, 515, 516,
	517, 518, 0, 459, 0, 453, 454, 519, 455, 520,
	0, 456, 457, 458, 0, 460, 461, 0, 0, 462,
	463, 464, 465, 466, 468, 0, 469, 0, 467, 470,
	471, 472, 521, 522, 523, 215, 474, 473, 524, 0,
	0, 0, 0, 475, 476, 525, 477, 478, 479, 0,
	0, 0, 221, 222, 223, 224, 225, 0, 226, 0,
	0, 0, 0, 0, 480, 0, 0, 0, 0, 227,
	229, 228, 230, 231, 481, 482, 232, 483, 233, 234,
	484, 0, 235, 236, 237, 238, 239, 240, 0, 0,
	241, 485, 486, 487, 0, 242, 488, 0, 0, 0,
	243, 244, 245, 246, 247, 248, 0, 0, 250, 251,
	252, 249, 0, 253, 0, 254, 255, 256, 0, 0,
	257, 258, 0, 0, 0, 0, 0, 0, 0, 259,
	260, 261, 262, 263, 264, 489, 490, 0, 265, 0,
	267, 266, 0, 268, 0, 0, 269, 270, 271, 0,
	272, 0, 273, 274, 0, 275, 491, 276, 277, 279,
	281, 278, 282, 283, 284, 285, 492, 493, 0, 0,
	0, 0, 0, 0, 0, 286, 287, 288, 494, 289,
	290, 0, 291, 0, 292, 0, 0, 0, 293, 294,
	0, 295, 495, 0, 496, 296, 0, 297, 298, 299,
	300, 2386, 498, 499, 351, 0, 301, 302, 0, 303,
	304, 305, 307, 0, 0, 0, 306, 308, 315, 0,
	0, 309, 500, 311, 310, 312, 313, 314, 501, 0,
	502, 0, 316, 0, 503, 0, 317, 318, 319, 0,
	320, 321, 0, 0, 322, 323, 324, 325, 0, 327,
	326, 0, 328, 504, 0, 329, 330, 0, 0, 331,
	332, 0, 0, 333, 334, 335, 0, 336, 337, 339,
	341, 338, 340, 342, 344, 345, 343, 0, 346, 347,
	349, 348, 0, 0, 0, 350, 0, 505, 506, 352,
	353, 0, 354, 355, 356, 0, 0, 358, 359, 360,
	0, 0, 361, 362, 507, 0, 363, 0, 508, 364,
	357, 365, 366, 367, 368, 369, 370, 371, 0, 372,
	373, 509, 374, 510, 375, 0, 376, 0, 377, 378,
	379, 380, 381, 382, 511, 383, 384, 0, 385, 386,
	387, 388, 389, 390, 0, 392, 393, 394, 391, 395,
	396, 397, 398, 0, 399, 0, 400, 401, 402, 403,
	512, 404, 0, 405, 409, 410, 411, 412, 413, 414,
	415, 0, 421, 422, 416, 418, 419, 420, 417, 423,
	424, 425, 0, 426, 406, 407, 427, 428, 0, 429,
	430, 513, 431, 432, 0, 433, 434, 435, 436, 408,
	437, 441, 442, 438, 439, 440, 514, 0, 444, 445,
	443, 0, 446, 447, 448, 449, 450, 280, 451, 0,
	452, 515, 516, 517, 518, 0, 459, 0, 453, 454,
	519, 455, 520, 0, 456, 457, 458, 0, 460, 461,
	0, 0, 462, 463, 464, 465, 466, 468, 0, 469,
	0, 467, 470, 471, 472, 521, 522, 523, 215, 474,
	473, 524, 0, 0, 0, 0, 475, 476, 525, 477,
	478, 479, 0, 0, 0, 221, 222, 223, 224, 225,
	0, 226, 0, 0, 0, 0, 0, 480, 0, 0,
	0, 0, 227, 229, 228, 230, 231, 481, 482, 232,
	483, 233, 234, 484, 0, 235, 236, 237, 238, 239,
	240, 0, 0, 241, 485, 486, 487, 0, 242, 488,
	0, 0, 0, 243, 244, 245, 246, 247, 248, 0,
	0, 250, 251, 252, 249, 0, 253, 0, 254, 255,
	256, 0, 0, 257, 258, 0, 0, 0, 0, 0,
	0, 0, 259, 260, 261, 262, 263, 264, 489, 490,
	0, 265, 0, 267, 266, 0, 268, 0, 0, 269,
	270, 271, 0, 272, 0, 273, 274, 0, 275, 491,
	276, 277, 279, 281, 278, 282, 283, 284, 285, 492,
	493, 0, 0, 0, 0, 0, 0, 0, 286, 287,
	288, 494, 289, 290, 0, 291, 0, 292, 0, 0,
	0, 293, 294, 0, 295, 495, 0, 496, 296, 0,
	297, 298, 299, 300, 497, 498, 499, 351, 0, 301,
	302, 0, 303, 304, 305, 307, 0, 0, 0, 306,
	308, 315, 0, 0, 309, 500, 311, 310, 312, 313,
	314, 501, 0, 502, 0, 316, 0, 503, 0, 317,
	318, 319, 0, 320, 321, 0, 0, 322, 323, 324,
	325, 0, 327, 326, 0, 328, 504, 0, 329, 330,
	0, 0, 331, 332, 0, 0, 333, 334, 335, 0,
	336, 337, 339, 341, 338, 340, 342, 344, 345, 343,
	0, 346, 347, 349, 348, 0, 0, 0, 350, 0,
	505, 506, 352, 353, 0, 354, 355, 356, 0, 0,
	358, 359, 360, 0, 0, 361, 362, 507, 0, 363,
	0, 508, 364, 357, 365, 366, 367, 368, 369, 370,
	371, 0, 372, 373, 509, 374, 510, 375, 0, 376,
	0, 377, 378, 379, 380, 381, 382, 511, 383, 384,
	0, 385, 386, 387, 388, 389, 390, 0, 392, 393,
	394, 391, 395, 396, 397, 398, 0, 399, 0, 400,
	401, 402, 403, 512, 404, 0, 405, 559, 410, 411,
	412, 413, 414, 415, 0, 421, 422, 416, 418, 419,
	420, 417, 423, 424, 425, 0, 426, 406, 407, 427,
	428, 0, 429, 430, 513, 431, 432, 0, 433, 434,
	435, 436, 408, 437, 441, 442, 438, 439, 440, 514,
	0, 444, 445, 443, 0, 446, 447, 448, 449, 450,
	280, 451, 0, 452, 515, 516, 517, 518, 0, 459,
	0, 453, 454, 519, 455, 520, 0, 456, 457, 458,
	0, 460, 461, 0, 0, 462, 463, 464, 465, 466,
	468, 0, 469, 0, 467, 470, 471, 472, 521, 522,
	523, 215, 474, 473, 524, 0, 0, 0, 0, 475,
	476, 525, 477, 478, 479, 0, 0, 0, 221, 222,
	223, 224, 225, 0, 226, 0, 0, 0, 0, 0,
	480, 0, 1872, 0, 0, 227, 229, 228, 230, 231,
	481, 482, 232, 483, 233, 234, 484, 0, 235, 236,
	237, 238, 239, 240, 0, 0, 241, 485, 486, 487,
	0, 242, 488, 0, 0, 0, 243, 244, 245, 246,
	247, 248, 0, 0, 250, 251, 252, 249, 0, 253,
	0, 254, 255, 256, 0, 0, 257, 258, 0, 0,
	0, 0, 0, 0, 0, 259, 260, 261, 262, 263,
	264, 489, 490, 0, 265, 0, 267, 266, 0, 268,
	0, 0, 269, 270, 271, 0, 272, 0, 273, 274,
	0, 275, 491, 276, 277, 279, 281, 278, 282, 283,
	284, 285, 492, 493, 0, 0, 0, 0, 0, 0,
	0, 286, 287, 288, 494, 289, 290, 0, 291, 0,
	292, 0, 0, 0, 293, 294, 0, 295, 495, 0,
	496, 296, 0, 297, 298, 299, 300, 497, 498, 499,
	351, 0, 301, 302, 0, 303, 304, 305, 307, 0,
	0, 0, 306, 308, 315, 0, 0, 309, 500, 311,
	310, 312, 313, 314, 501, 0, 502, 0, 316, 0,
	503, 0, 317, 318, 319, 0, 320, 321, 0, 0,
	322, 323, 324, 325, 0, 327, 326, 0, 328, 504,
	0, 329, 330, 0, 0, 331, 332, 0, 0, 333,
	334, 335, 0, 336, 337, 339, 341, 338, 340, 342,
	344, 345, 343, 0, 346, 347, 349, 348, 0, 0,
	0, 350, 0, 505, 506, 352, 353, 0, 354, 355,
	356, 0, 0, 358, 359, 360, 0, 0, 361, 362,
	507, 0, 363, 0, 508, 364, 357, 365, 366, 367,
	368, 369, 370, 371, 0, 372, 373, 509, 374, 510,
	375, 0, 376, 0, 377, 378, 379, 380, 381, 382,
	511, 383, 384, 0, 385, 386, 387, 388, 389, 390,
	0, 392, 393, 394, 391, 395, 396, 397, 398, 0,
	399, 0, 400, 401, 402, 403, 512, 404, 0, 405,
	409, 410, 411, 412, 413, 414, 415, 0, 421, 422,
	416, 418, 419, 420, 417, 423, 424, 425, 0, 0,
	406, 407, 427, 428, 0, 429, 430, 513, 431, 432,
	0, 433, 434, 435, 436, 408, 437, 441, 442, 438,
	439, 440, 514, 0, 444, 445, 443, 0, 446, 447,
	448, 449, 450, 280, 451, 0, 452, 515, 516, 517,
	518, 0, 459, 0, 453, 454, 519, 455, 520, 0,
	456, 457, 458, 0, 460, 461, 0, 0, 462, 463,
	464, 465, 466, 468, 0, 469, 0, 467, 470, 471,
	472, 521, 522, 523, 215, 474, 473, 524, 0, 0,
	0, 0, 475, 476, 525, 477, 478, 479, 0, 0,
	0, 221, 222, 223, 224, 225, 0, 226, 0, 0,
	0, 0, 0, 480, 0, 0, 0, 0, 227, 229,
	228, 230, 231, 481, 482, 232, 483, 233, 234, 484,
	0, 235, 236, 237, 238, 239, 240, 0, 0, 241,
	485, 486, 487, 0, 242, 488, 0, 0, 0, 243,
	244, 245, 246, 247, 248, 0, 0, 250, 251, 252,
	249, 0, 253, 0, 254, 255, 256, 0, 0, 257,
	258, 0, 0, 0, 0, 0, 0, 0, 259, 260,
	261, 262, 263, 264, 489, 490, 0, 265, 0, 267,
	266, 0, 268, 0, 0, 269, 270, 271, 0, 272,
	0, 273, 274, 0, 275, 491, 276, 277, 279, 281,
	278, 282, 283, 284, 285, 492, 493, 0, 0, 0,
	0, 0, 0, 0, 286, 287, 288, 494, 289, 290,
	0, 291, 0, 292, 0, 0, 0, 293, 294, 0,
	295, 495, 0, 496, 296, 0, 297, 298, 299, 300,
	1292, 498, 499, 351, 0, 301, 302, 0, 303, 304,
	305, 307, 0, 0, 0, 306, 308, 315, 0, 0,
	309, 500, 311, 310, 312, 313, 314, 501, 0, 502,
	0, 316, 0, 503, 0, 317, 318, 319, 0, 320,
	321, 0, 0, 322, 323, 324, 325, 0, 327, 326,
	0, 328, 504, 0, 329, 330, 0, 0, 331, 332,
	0, 0, 333, 334, 335, 0, 336, 337, 339, 341,
	338, 340, 342, 344, 345, 343, 0, 346, 347, 349,
	348, 0, 0, 0, 350, 0, 505, 506, 352, 353,
	0, 354, 355, 356, 0, 0, 358, 359, 360, 0,
	0, 361, 362, 507, 0, 363, 0, 508, 364, 357,
	365, 366, 367, 368, 369, 370, 371, 0, 372, 373,
	509, 374, 510, 375, 0, 376, 0, 377, 378, 379,
	380, 381, 382, 511, 383, 384, 0, 385, 386, 387,
	388, 389, 390, 0, 392, 393, 394, 391, 395, 396,
	397, 398, 0, 399, 0, 400, 401, 402, 403, 512,
	404, 0, 405, 409, 410, 411, 412, 413, 414, 415,
	0, 421, 422, 416, 418, 419, 420, 417, 423, 424,
	425, 0, 426, 406, 407, 427, 428, 0, 429, 430,
	513, 431, 432, 0, 433, 434, 435, 436, 408, 437,
	441, 442, 438, 439, 440, 514, 0, 444, 445, 443,
	0, 446, 447, 448, 449, 450, 280, 451, 0, 452,
	515, 516, 517, 518, 0, 459, 0, 453, 454, 519,
	455, 520, 0, 456, 457, 458, 0, 460, 461, 0,
	0, 462, 463, 464, 465, 466, 468, 0, 469, 0,
	467, 470, 471, 472, 521, 522, 523, 215, 474, 473,
	524, 0, 0, 0, 0, 475, 476, 525, 477, 478,
	479, 0, 0, 0, 221, 222, 223, 224, 225, 0,
	226, 0, 0, 0, 0, 0, 480, 0, 0, 0,
	0, 227, 229, 228, 230, 231, 481, 482, 232, 483,
	233, 234, 484, 0, 235, 236, 237, 238, 239, 240,
	0, 0, 241, 485, 486, 487, 0, 242, 488, 0,
	0, 0, 243, 244, 245, 246, 247, 248, 0, 0,
	250, 251, 252, 249, 0, 253, 0, 254, 255, 256,
	0, 0, 257, 258, 0, 0, 0, 0, 0, 0,
	0, 259, 260, 261, 262, 263, 264, 489, 490, 0,
	265, 0, 267, 266, 0, 268, 0, 0, 269, 270,
	271, 0, 272, 0, 273, 274, 0, 275, 491, 276,
	277, 279, 281, 278, 282, 283, 284, 285, 492, 493,
	0, 0, 0, 0, 0, 0, 0, 286, 287, 288,
	494, 289, 290, 0, 291, 0, 292, 0, 0, 0,
	293, 294, 0, 295, 495, 0, 496, 296, 0, 297,
	298, 299, 300, 1234, 498, 499, 351, 0, 301, 302,
	0, 303, 304, 305, 307, 0, 0, 0, 306, 308,
	315, 0, 0, 309, 500, 311, 310, 312, 313, 314,
	501, 0, 502, 0, 316, 0, 503, 0, 317, 318,
	319, 0, 320, 321, 0, 0, 322, 323, 324, 325,
	0, 327, 326, 0, 328, 504, 0, 329, 330, 0,
	0, 331, 332, 0, 0, 333, 334, 335, 0, 336,
	337, 339, 341, 338, 340, 342, 344, 345, 343, 0,
	346, 347, 349, 348, 0, 0, 0, 350, 0, 505,
	506, 352, 353, 0, 354, 355, 356, 0, 0, 358,
	359, 360, 0, 0, 361, 362, 507, 0, 363, 0,
	508, 364, 357, 365, 366, 367, 368, 369, 370, 371,
	0, 372, 373, 509, 374, 510, 375, 0, 376, 0,
	377, 378, 379, 380, 381, 382, 511, 383, 384, 0,
	385, 386, 387, 388, 389, 390, 0, 392, 393, 394,
	391, 395, 396, 397, 398, 0, 399, 0, 400, 401,
	402, 403, 512, 404, 0, 405, 409, 410, 411, 412,
	413, 414, 415, 0, 421, 422, 416, 418, 419, 420,
	417, 423, 424, 425, 0, 426, 406, 407, 427, 428,
	0, 429, 430, 513, 431, 432, 0, 433, 434, 435,
	436, 408, 437, 441, 442, 438, 439, 440, 514, 0,
	444, 445, 443, 0, 446, 447, 448, 449, 450, 280,
	451, 0, 452, 515, 516, 517, 518, 0, 459, 0,
	453, 454, 519, 455, 520, 0, 456, 457, 458, 0,
	460, 461, 0, 0, 462, 463, 464, 465, 466, 468,
	0, 469, 0, 467, 470, 471, 472, 521, 522, 523,
	215, 474, 473, 524, 0, 0, 0, 0, 475, 476,
	525, 477, 478, 479, 0, 0, 0, 221, 222, 223,
	224, 225, 0, 226, 0, 0, 0, 0, 0, 480,
	0, 0, 0, 0, 227, 229, 228, 230, 231, 481,
	482, 232, 483, 233, 234, 484, 0, 235, 236, 237,
	238, 239, 240, 0, 0, 241, 485, 486, 487, 0,
	242, 488, 0, 0, 0, 243, 244, 245, 246, 247,
	248, 0, 0, 250, 251, 252, 249, 0, 253, 0,
	254, 255, 256, 0, 0, 257, 258, 0, 0, 0,
	0, 0, 0, 0, 259, 260, 261, 262, 263, 264,
	489, 490, 0, 265, 0, 267, 266, 0, 268, 0,
	0, 269, 270, 271, 0, 272, 0, 273, 274, 0,
	275, 491, 276, 277, 279, 281, 278, 282, 283, 284,
	285, 492, 493, 0, 0, 0, 0, 0, 0, 0,
	286, 287, 288, 494, 289, 290, 0, 291, 0, 292,
	0, 0, 0, 293, 294, 0, 295, 495, 0, 496,
	296, 0, 297, 298, 299, 300, 497, 498, 499, 351,
	0, 301, 302, 0, 303, 304, 305, 307, 0, 0,
	0, 306, 308, 315, 0, 0, 309, 500, 311, 310,
	312, 313, 314, 501, 0, 502, 0, 316, 0, 503,
	0, 317, 318, 319, 0, 320, 321, 0, 0, 322,
	323, 324, 325, 0, 327, 326, 0, 328, 504, 0,
	329, 330, 0, 0, 331, 332, 0, 0, 333, 334,
	335, 0, 336, 337, 339, 341, 338, 340, 342, 344,
	345, 343, 0, 346, 347, 349, 348, 0, 0, 0,
	350, 0, 505, 506, 352, 353, 0, 354, 355, 356,
	0, 0, 358, 359, 360, 0, 0, 361, 362, 507,
	0, 363, 0, 508, 364, 357, 365, 366, 367, 368,
	369, 370, 371, 0, 372, 373, 509, 374, 510, 375,
	0, 376, 0, 377, 378, 379, 380, 381, 382, 511,
	992, 384, 0, 385, 386, 387, 388, 389, 390, 0,
	392, 393, 394, 391, 395, 396, 397, 398, 0, 399,
	0, 400, 401, 402, 403, 512, 404, 0, 405, 409,
	410, 411, 412, 413, 414, 415, 0, 421, 422, 416,
	418, 419, 420, 417, 423, 424, 425, 0, 426, 406,
	407, 427, 428, 0, 429, 430, 513, 431, 432, 0,
	433, 434, 435, 436, 408, 437, 441, 442, 438, 439,
	440, 514, 0, 444, 445, 443, 0, 446, 447, 448,
	449, 450, 280, 451, 0, 452, 515, 516, 517, 518,
	0, 459, 0, 453, 454, 519, 455, 520, 0, 456,
	457, 458, 0, 460, 461, 0, 0, 462, 463, 464,
	465, 466, 468, 0, 469, 0, 467, 470, 471, 472,
	521, 522, 523, 215, 474, 473, 524, 0, 0, 0,
	0, 475, 476, 525, 477, 478, 479, 0, 0, 0,
	221, 222, 223, 224, 225, 0, 226, 0, 0, 0,
	0, 0, 480, 0, 0, 0, 0, 227, 229, 228,
	230, 231, 481, 482, 232, 483, 233, 234, 484, 0,
	235, 236, 237, 238, 239, 240, 0, 0, 241, 485,
	486, 487, 0, 242, 488, 0, 0, 0, 243, 244,
	245, 246, 247, 248, 0, 0, 250, 251, 252, 249,
	0, 253, 0, 254, 255, 256, 0, 0, 257, 258,
	0, 0, 0, 0, 0, 0, 0, 259, 260, 261,
	262, 263, 264, 489, 490, 0, 265, 0, 267, 266,
	0, 268, 0, 0, 269, 270, 271, 0, 272, 0,
	273, 274, 0, 275, 491, 276, 277, 279, 281, 278,
	282, 283, 284, 285, 492, 493, 0, 0, 0, 0,
	0, 0, 0, 286, 287, 288, 494, 289, 290, 0,
	291, 0, 292, 0, 0, 0, 293, 294, 0, 295,
	495, 0, 496, 0, 0, 297, 298, 299, 300, 497,
	498, 499, 351, 0, 301, 302, 0, 303, 304, 305,
	307, 0, 0, 0, 306, 308, 315, 0, 0, 309,
	500, 311, 310, 312, 313, 314, 501, 0, 502, 0,
	316, 0, 503, 0, 317, 318, 319, 0, 320, 321,
	0, 0, 322, 323, 324, 325, 0, 327, 326, 0,
	328, 504, 0, 329, 330, 0, 0, 331, 332, 0,
	0, 333, 334, 335, 0, 336, 337, 339, 341, 338,
	340, 342, 344, 345, 343, 0, 346, 347, 349, 348,
	0, 0, 0, 350, 0, 505, 506, 352, 353, 0,
	354, 355, 356, 0, 0, 358, 359, 360, 0, 0,
	361, 362, 507, 0, 363, 0, 508, 364, 357, 365,
	366, 0, 368, 369, 370, 371, 0, 372, 373, 509,
	374, 510, 375, 0, 376, 0, 377, 378, 379, 0,
	381, 382, 511, 383, 384, 0, 385, 386, 387, 388,
	389, 390, 0, 392, 393, 394, 391, 395, 396, 397,
	398, 0, 399, 0, 400, 401, 402, 403, 512, 0,
	0, 405, 409, 410, 411, 412, 413, 414, 415, 0,
	421, 422, 416, 418, 419, 420, 417, 423, 424, 425,
	0, 426, 406, 407, 427, 428, 0, 429, 430, 513,
	431, 432, 0, 433, 434, 435, 436, 408, 437, 441,
	442, 438, 439, 440, 514, 0, 444, 445, 443, 0,
	446, 447, 448, 449, 450, 280, 451, 0, 452, 515,
	516, 517, 518, 0, 459, 0, 453, 454, 519, 455,
	520, 0, 456, 457, 458, 0, 460, 461, 0, 0,
	462, 463, 464, 465, 466, 468, 0, 469, 0, 467,
	470, 471, 472, 521, 522, 523, 0, 474, 473, 524,
	0, 0, 0, 0, 475, 476, 525, 477, 478, 479,
	1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1503,
	1498, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	0, 0, 1516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 1468, 0, 1500,
	1501, 1502, 1510, 1511, 1512, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 1503, 1498, 0, 0, 0,
	0, 0, 1486, 1470, 0, 0, 0, 0, 1516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1469, 0, 0, 0, 0, 0, 0, 0, 0,
	1489, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1492,
	1493, 1494, 1495, 0, 0, 0, 0, 0, 0, 1475,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1507, 0, 0, 1517, 0, 0, 0,
	0, 1497, 1499, 0, 0, 1492, 1493, 1494, 1495, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	0, 1513, 0, 1514, 0, 0, 0, 0, 0, 0,
	1484, 1485, 0, 0, 0, 0, 0, 0, 0, 1507,
	0, 0, 1517, 0, 0, 1505, 0, 1497, 1499, 0,
	0, 0, 0, 0, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1513, 0, 1514,
	0, 0, 1515, 0, 0, 0, 1484, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1467, 1468, 0, 1500, 1501, 1502, 1510,
	1511, 1512, 0, 0, 0, 0, 1508, 0, 1496, 0,
	0, 0, 1503, 1498, 0, 0, 0, 0, 0, 0,
	1470, 0, 0, 0, 0, 1516, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1469, 0,
	0, 0, 1508, 0, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 1486, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1506, 0, 0, 1481, 1482, 1488, 1509, 1487, 1483, 0,
	1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0,
	0, 0, 0, 0, 0, 0, 0, 2578, 0, 0,
	0, 0, 1492, 1493, 1494, 1495, 0, 0, 0, 0,
	0, 0, 1475, 0, 0, 0, 1506, 0, 0, 1481,
	1482, 1488, 1509, 1487, 1483, 0, 1480, 1478, 1479, 1471,
	1472, 1473, 1474, 1476, 1477, 0, 1507, 0, 0, 1517,
	0, 0, 0, 2577, 1497, 1499, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1513, 0, 1514, 0, 0, 0,
	0, 0, 0, 1484, 1485, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 1467, 1468, 0, 1500, 1501, 1502, 1510,
	1511, 1512, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1503, 1498, 0, 0, 0, 0, 0, 0,
	1470, 0, 0, 0, 0, 1516, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1469, 0,
	0, 0, 0, 1491, 0, 0, 0, 1489, 0, 0,
	0, 0, 0, 0, 0, 1486, 1467, 1468, 0, 1500,
	1501, 1502, 1510, 1511, 1512, 0, 0, 0, 0, 1508,
	0, 0, 0, 0, 0, 1503, 1498, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 1516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1469, 1492, 1493, 1494, 1495, 0, 0, 0, 0,
	1489, 0, 1475, 0, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1507, 0, 0, 1517,
	0, 0, 0, 1506, 1497, 1499, 1481, 1482, 1488, 1509,
	1487, 1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474,
	1476, 1477, 0, 0, 1513, 0, 1514, 0, 0, 0,
	2102, 0, 0, 1484, 1485, 1492, 1493, 1494, 1495, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 1505, 0,
	0, 0, 0, 0, 0, 0, 0, 1490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	0, 0, 1517, 0, 0, 1515, 0, 1497, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1504, 0, 0, 0, 0, 0, 1513, 0, 1514,
	0, 0, 0, 0, 0, 0, 1484, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 0, 0, 1496, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	0, 0, 0, 1491, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1508,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 1468, 0, 1500, 1501, 1502, 1510, 1511,
	1512, 0, 0, 0, 0, 0, 0, 0, 1496, 0,
	0, 1503, 1498, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 1516, 0, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 1508, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 1506, 1486, 0, 1481, 1482, 1488, 1509,
	1487, 1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474,
	1476, 1477, 0, 0, 0, 0, 3494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1492, 1493, 1494, 1495, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 1506, 0, 0, 1481,
	1482, 1488, 1509, 1487, 1483, 0, 1480, 1478, 1479, 1471,
	1472, 1473, 1474, 1476, 1477, 1507, 0, 0, 1517, 3423,
	0, 0, 0, 1497, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1513, 0, 1514, 0, 0, 0, 0,
	0, 0, 1484, 1485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 1468,
	0, 1500, 1501, 1502, 1510, 1511, 1512, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 1503, 1498, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	1516, 0, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 1468, 0, 1500, 1501, 1502,
	1510, 1511, 1512, 1469, 0, 0, 0, 0, 1508, 0,
	0, 0, 1489, 1503, 1498, 0, 0, 0, 0, 0,
	1486, 1470, 0, 0, 0, 0, 1516, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	0, 0, 0, 0, 0, 0, 0, 0, 1489, 0,
	0, 0, 0, 0, 0, 0, 1486, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1492, 1493, 1494,
	1495, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
	0, 0, 1506, 0, 0, 1481, 1482, 1488, 1509, 1487,
	1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476,
	1477, 1507, 0, 0, 1517, 3422, 0, 0, 0, 1497,
	1499, 0, 0, 1492, 1493, 1494, 1495, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 0, 1513,
	0, 1514, 0, 0, 0, 0, 0, 0, 1484, 1485,
	0, 0, 0, 0, 0, 0, 0, 1507, 0, 0,
	1517, 0, 0, 1505, 0, 1497, 1499, 0, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1513, 0, 1514, 0, 0,
	1515, 0, 0, 0, 1484, 1485, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 1505,
	0, 0, 0, 0, 0, 0, 0, 0, 1490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 1504, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 0,
	0, 0, 0, 0, 1508, 0, 1496, 0, 0, 1503,
	1498, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	0, 0, 1516, 0, 1491, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 0, 0,
	1508, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1506, 0,
	0, 1481, 1482, 1488, 1509, 1487, 1483, 0, 1480, 1478,
	1479, 1471, 1472, 1473, 1474, 1476, 1477, 0, 0, 0,
	0, 3311, 0, 0, 0, 0, 0, 0, 0, 1492,
	1493, 1494, 1495, 0, 0, 0, 0, 0, 0, 1475,
	0, 0, 0, 0, 1506, 0, 0, 1481, 1482, 1488,
	1509, 1487, 1483, 0, 1480, 1478, 1479, 1471, 1472, 1473,
	1474, 1476, 1477, 1507, 0, 0, 1517, 3212, 0, 0,
	0, 1497, 1499, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1513, 0, 1514, 0, 0, 0, 0, 0, 0,
	1484, 1485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1467, 1468, 0, 1500,
	1501, 1502, 1510, 1511, 1512, 0, 0, 0, 0, 0,
	0, 0, 1496, 0, 0, 1503, 1498, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 1516, 0,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1467, 1468, 0, 1500, 1501, 1502, 1510, 1511,
	1512, 1469, 0, 0, 0, 0, 1508, 0, 0, 0,
	1489, 1503, 1498, 0, 0, 0, 0, 0, 1486, 1470,
	0, 0, 0, 0, 1516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1492, 1493, 1494, 1495, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	1506, 0, 0, 1481, 1482, 1488, 1509, 1487, 1483, 0,
	1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 1507,
	0, 0, 1517, 3164, 0, 0, 0, 1497, 1499, 0,
	0, 1492, 1493, 1494, 1495, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 1513, 0, 1514,
	0, 0, 0, 0, 0, 0, 1484, 1485, 0, 0,
	0, 0, 0, 0, 0, 1507, 0, 0, 1517, 0,
	0, 1505, 0, 1497, 1499, 0, 0, 0, 0, 0,
	1490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1513, 0, 1514, 0, 0, 1515, 0,
	0, 0, 1484, 1485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 0,
	1504, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1467, 1468,
	0, 1500, 1501, 1502, 1510, 1511, 1512, 0, 0, 0,
	0, 0, 1508, 0, 1496, 0, 0, 1503, 1498, 0,
	0, 0, 0, 0, 0, 1470, 0, 0, 0, 0,
	1516, 0, 1491, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1469, 0, 0, 0, 0, 1508, 0,
	0, 0, 1489, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1506, 0, 0, 1481,
	1482, 1488, 1509, 1487, 1483, 0, 1480, 1478, 1479, 1471,
	1472, 1473, 1474, 1476, 1477, 0, 0, 0, 0, 3163,
	0, 0, 0, 0, 0, 0, 0, 1492, 1493, 1494,
	1495, 0, 0, 0, 0, 0, 0, 1475, 0, 0,
	0, 0, 1506, 0, 0, 1481, 1482, 1488, 1509, 1487,
	1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476,
	1477, 1507, 0, 0, 1517, 3162, 0, 0, 0, 1497,
	1499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1513,
	0, 1514, 0, 0, 0, 0, 0, 0, 1484, 1485,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1505, 0, 0, 0, 0, 0, 0,
	0, 0, 1490, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1504, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 1468, 0, 1500, 1501, 1502,
	1510, 1511, 1512, 0, 0, 0, 0, 0, 0, 0,
	1496, 0, 0, 1503, 1498, 0, 0, 0, 0, 0,
	0, 1470, 0, 0, 0, 0, 1516, 0, 1491, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1467, 1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 1469,
	0, 0, 0, 0, 1508, 0, 0, 0, 1489, 1503,
	1498, 0, 0, 0, 0, 0, 1486, 1470, 0, 0,
	0, 0, 1516, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1469, 0, 0, 0, 0,
	0, 0, 0, 0, 1489, 0, 0, 0, 0, 0,
	0, 0, 1486, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1492, 1493, 1494, 1495, 0, 0, 0,
	0, 0, 0, 1475, 0, 0, 0, 0, 1506, 0,
	0, 1481, 1482, 1488, 1509, 1487, 1483, 0, 1480, 1478,
	1479, 1471, 1472, 1473, 1474, 1476, 1477, 1507, 0, 0,
	1517, 2925, 0, 0, 0, 1497, 1499, 0, 0, 1492,
	1493, 1494, 1495, 0, 0, 0, 0, 0, 0, 1475,
	3596, 0, 0, 0, 0, 1513, 0, 1514, 0, 0,
	0, 0, 0, 0, 1484, 1485, 0, 0, 0, 0,
	0, 0, 0, 1507, 0, 0, 1517, 0, 0, 1505,
	0, 1497, 1499, 0, 0, 0, 0, 0, 1490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1513, 0, 1514, 0, 0, 1515, 0, 0, 0,
	1484, 1485, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1504, 0, 0, 1505, 0, 0, 0, 0,
	0, 0, 0, 0, 1490, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1496, 0, 1504, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1491, 0, 0, 0, 0, 0,
	3595, 0, 0, 0, 0, 0, 1467, 1468, 0, 1500,
	1501, 1502, 1510, 1511, 1512, 0, 0, 0, 0, 0,
	1508, 0, 1496, 0, 0, 1503, 1498, 0, 0, 0,
	0, 2505, 0, 1470, 0, 0, 0, 0, 1516, 0,
	1491, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1469, 0, 0, 0, 0, 1508, 0, 0, 0,
	1489, 0, 0, 0, 0, 0, 0, 0, 1486, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1506, 0, 2506, 1481, 1482, 1488,
	1509, 1487, 1483, 0, 1480, 1478, 1479, 1471, 1472, 1473,
	1474, 1476, 1477, 0, 0, 2534, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1492, 1493, 1494, 1495, 0,
	0, 0, 0, 0, 0, 1475, 0, 0, 0, 0,
	1506, 0, 0, 1481, 1482, 1488, 1509, 1487, 1483, 0,
	1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 1507,
	0, 0, 1517, 0, 0, 0, 0, 1497, 1499, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1513, 0, 1514,
	0, 0, 0, 0, 0, 0, 1484, 1485, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 1467, 1468, 0, 1500,
	1501, 1502, 1510, 1511, 1512, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1503, 1498, 0, 0, 0,
	0, 0, 0, 1470, 0, 0, 0, 0, 1516, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1469, 0, 0, 0, 0, 1491, 0, 0, 0,
	1489, 0, 2193, 0, 0, 0, 0, 0, 1486, 1467,
	1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 0, 0,
	0, 0, 1508, 0, 0, 0, 0, 0, 1503, 1498,
	0, 0, 0, 2192, 0, 0, 1470, 0, 0, 0,
	0, 1516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1469, 1492, 1493, 1494, 1495, 0,
	0, 0, 0, 1489, 0, 1475, 0, 2622, 0, 0,
	2621, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1507,
	0, 0, 1517, 0, 0, 0, 1506, 1497, 1499, 1481,
	1482, 1488, 1509, 1487, 1483, 0, 1480, 1478, 1479, 1471,
	1472, 1473, 1474, 1476, 1477, 0, 0, 1513, 0, 1514,
	0, 0, 0, 0, 0, 0, 1484, 1485, 1492, 1493,
	1494, 1495, 0, 0, 0, 0, 0, 0, 1475, 0,
	0, 1505, 0, 0, 0, 0, 0, 0, 0, 0,
	1490, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 0, 1517, 0, 0, 1515, 0,
	1497, 1499, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1504, 0, 0, 0, 0, 0,
	1513, 0, 1514, 0, 0, 0, 0, 0, 0, 1484,
	1485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 1496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1515, 0, 0, 0, 0, 1491, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 1467,
	1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 0, 0,
	0, 0, 1508, 0, 0, 0, 0, 0, 1503, 1498,
	0, 0, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 1516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1469, 0, 0, 0, 0, 1491,
	0, 0, 0, 1489, 0, 0, 0, 0, 0, 0,
	0, 1486, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1506, 0, 0, 1481,
	1482, 1488, 1509, 1487, 1483, 0, 1480, 1478, 1479, 1471,
	1472, 1473, 1474, 1476, 1477, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1492, 1493,
	1494, 1495, 0, 0, 0, 0, 0, 0, 1475, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 0, 1517, 0, 0, 0, 1506,
	1497, 1499, 1481, 1482, 1488, 1509, 1487, 1483, 0, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0, 0,
	1513, 0, 1514, 0, 0, 0, 0, 0, 0, 1484,
	1485, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1505, 0, 0, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 835, 1467,
	1468, 0, 1500, 1501, 1502, 1510, 1511, 1512, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1503, 1498,
	0, 0, 0, 0, 0, 0, 1470, 0, 0, 0,
	0, 1516, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1469, 0, 0, 0, 0, 1491,
	0, 0, 0, 1489, 0, 0, 0, 0, 0, 0,
	0, 1486, 1467, 1468, 0, 1500, 1501, 1502, 1510, 1511,
	1512, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 1503, 1498, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 1516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 1492, 1493,
	1494, 1495, 0, 0, 0, 0, 1489, 0, 1475, 0,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1507, 0, 0, 1517, 0, 0, 0, 1506,
	1497, 1499, 1481, 1482, 1488, 1509, 1487, 1483, 0, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0, 0,
	1513, 0, 1514, 0, 0, 0, 0, 0, 0, 1484,
	1485, 1492, 1493, 1494, 1495, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 1505, 0, 2628, 0, 0, 0,
	0, 0, 0, 1490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 0, 0, 1517, 0,
	0, 1515, 0, 1497, 1499, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1504, 0, 0,
	0, 0, 0, 1513, 0, 1514, 0, 0, 0, 0,
	0, 0, 1484, 1485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1515, 0, 0, 0, 0, 1491,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 1467, 1468, 0, 1500, 1501, 1502, 1510, 1511,
	1512, 0, 0, 0, 0, 1508, 0, 0, 0, 0,
	0, 1503, 1498, 0, 0, 0, 2623, 0, 0, 1470,
	0, 0, 0, 0, 1516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 2913, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 1491, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1508, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1506,
	0, 0, 1481, 1482, 1488, 1509, 1487, 1483, 0, 1480,
	1478, 1479, 1471, 1472, 1473, 1474, 1476, 1477, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1492, 1493, 1494, 1495, 0, 0, 0, 0, 0,
	0, 1475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 0, 0, 1517, 0,
	0, 0, 1506, 1497, 1499, 1481, 1482, 1488, 1509, 1487,
	1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476,
	1477, 0, 0, 1513, 0, 1514, 0, 0, 0, 0,
	0, 0, 1484, 1485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1504, 0, 1467, 1468, 0, 1500, 1501, 1502, 1510, 1511,
	1512, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1503, 1498, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 1516, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1469, 0, 0,
	0, 0, 1491, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 1486, 1467, 1468, 0, 1500, 1501,
	1502, 1510, 1511, 1512, 0, 0, 0, 0, 1508, 0,
	0, 0, 0, 0, 1503, 1498, 0, 0, 0, 2576,
	0, 0, 1470, 0, 0, 0, 0, 1516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1469, 1492, 1493, 1494, 1495, 0, 0, 0, 0, 1489,
	0, 1475, 0, 0, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1507, 0, 0, 1517, 0,
	0, 0, 1506, 1497, 1499, 1481, 1482, 1488, 1509, 1487,
	1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476,
	1477, 0, 0, 1513, 0, 1514, 0, 0, 0, 0,
	0, 0, 1484, 1485, 1492, 1493, 1494, 1495, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 1505, 0, 0,
	0, 0, 0, 0, 0, 0, 1490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 1517, 0, 0, 1515, 0, 1497, 1499, 0, 0,
	0, 0, 1467, 1468, 0, 0, 0, 0, 0, 0,
	1504, 0, 0, 0, 0, 0, 1513, 0, 1514, 0,
	0, 0, 1498, 0, 0, 1484, 1485, 0, 2590, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 0, 0, 0, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 1496, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 1515, 0, 0,
	0, 0, 1491, 0, 1486, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 1467, 1468, 0, 1500, 1501,
	1502, 1510, 1511, 1512, 0, 0, 0, 0, 1508, 0,
	0, 0, 0, 0, 1503, 1498, 0, 0, 0, 0,
	0, 0, 1470, 2876, 0, 0, 0, 1516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	0, 1492, 1493, 1494, 1495, 0, 0, 0, 0, 0,
	1469, 1475, 0, 0, 0, 1491, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1508, 0, 1497, 1499, 0, 0, 0, 0, 0,
	0, 0, 1506, 0, 0, 1481, 1482, 1488, 1509, 1487,
	1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476,
	1477, 0, 1484, 1485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 1493, 1494, 1495, 0, 0,
	0, 0, 0, 0, 1475, 0, 1490, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1507, 0,
	0, 1517, 0, 0, 0, 1506, 1497, 1499, 1481, 1482,
	1488, 1509, 1487, 1483, 0, 1480, 1478, 1479, 1471, 1472,
	1473, 1474, 1476, 1477, 0, 0, 1513, 0, 1514, 0,
	0, 0, 0, 0, 0, 1484, 1485, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 0, 0, 0, 1496, 0, 0, 0, 0, 1490,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1491, 0, 0, 0, 0, 1515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1504, 0, 1467, 1468, 0, 1500, 1501,
	1502, 1510, 1511, 1512, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1503, 1498, 0, 0, 0, 0,
	0, 0, 1470, 0, 0, 0, 0, 1516, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1469, 0, 0, 0, 0, 1491, 0, 0, 0, 1489,
	0, 0, 0, 0, 0, 0, 0, 1486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1508, 1467, 1468, 0, 0, 0, 0, 0, 1487,
	1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476,
	1477, 0, 1498, 0, 0, 0, 0, 0, 0, 1470,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1492, 1493, 1494, 1495, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 1469, 0, 0,
	0, 0, 0, 0, 0, 0, 1489, 0, 0, 0,
	0, 0, 0, 0, 1486, 0, 0, 0, 1507, 0,
	0, 1517, 0, 0, 0, 1506, 1497, 1499, 1481, 1482,
	1488, 1509, 1487, 1483, 0, 1480, 1478, 1479, 1471, 1472,
	1473, 1474, 1476, 1477, 0, 0, 1513, 0, 1514, 0,
	0, 0, 0, 2517, 0, 1484, 1485, 1467, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1505, 1492, 1493, 1494, 1495, 0, 0, 1498, 0, 1490,
	0, 1475, 0, 0, 1470, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1469, 1497, 1499, 0, 0, 0, 0, 0,
	0, 1489, 0, 0, 0, 0, 0, 0, 0, 1486,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1484, 1485, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 1490, 0, 2510, 0,
	0, 0, 0, 0, 0, 1491, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1492, 1493, 1494, 1495,
	0, 0, 0, 0, 0, 0, 1475, 0, 0, 0,
	0, 1508, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1682, 0, 0, 0, 0, 1497, 1499,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1496, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1484, 1485, 0,
	0, 0, 1491, 1699, 1676, 1683, 1666, 1709, 1708, 0,
	0, 1668, 1667, 0, 0, 0, 0, 0, 0, 1719,
	1720, 1490, 0, 0, 0, 1506, 0, 0, 1481, 1482,
	1488, 1509, 1487, 1483, 0, 1480, 1478, 1479, 1471, 1472,
	1473, 1474, 1476, 1477, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1710, 0, 1706, 1705, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1704, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1496,
	0, 0, 0, 0, 0, 0, 1703, 1701, 1702, 0,
	0, 0, 0, 0, 0, 0, 0, 1491, 0, 1487,
	1483, 0, 1480, 1478, 1479, 1471, 1472, 1473, 1474, 1476,
	1477, 0, 0, 741, 0, 775, 0, 0, 0, 0,
	1678, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1692, 1681, 1694, 1696, 1697, 1698, 1693, 748, 1686, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1715, 1716,
	0, 759, 746, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	749, 0, 0, 1670, 781, 0, 0, 0, 0, 0,
	0, 0, 756, 757, 0, 0, 1707, 0, 768, 0,
	1679, 0, 1680, 0, 0, 0, 0, 0, 0, 0,
	0, 776, 751, 0, 1487, 1483, 0, 1480, 1478, 1479,
	1471, 1472, 1473, 1474, 1476, 1477, 0, 0, 0, 0,
	620, 0, 0, 0, 0, 0, 0, 0, 0, 774,
	0, 0, 1700, 0, 0, 0, 1689, 1687, 1688, 1691,
	1690, 0, 0, 621, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 752, 0, 0, 0, 0, 0, 0, 0, 745,
	0, 0, 1671, 1672, 1674, 1675, 622, 641, 0, 0,
	0, 0, 0, 0, 0, 753, 754, 0, 0, 1695,
	1673, 0, 0, 0, 0, 0, 0, 0, 0, 623,
	1718, 0, 624, 0, 0, 0, 0, 761, 760, 0,
	0, 0, 0, 0, 0, 755, 1669, 0, 647, 1711,
	1712, 1713, 1714, 0, 625, 0, 0, 0, 0, 0,
	780, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 777, 0, 0, 1677,
	0, 0, 626, 0, 1684, 1717, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 628, 651, 0, 0, 0,
	654, 0, 0, 0, 750, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 772, 773, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 770, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 764, 0, 0,
	0, 0, 0, 765, 0, 0, 0, 650, 0, 0,
	743, 0, 778, 0, 0, 631, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 744, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 766, 0,
	0, 0, 763, 0, 0, 0, 0, 629, 0, 0,
	0, 779, 0, 0, 0, 0, 0, 632, 0, 767,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 633, 0, 0, 0, 769,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 771, 0, 653, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 634, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 635, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 640, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 636, 0, 0,
	649, 0, 648, 0, 0, 637, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 638, 0,
	0, 0, 0, 644, 0, 0, 0, 0, 655, 0,
	652, 0, 0, 0, 0, 642,
}
var sqlPact = [...]int{

	3771, -1000, -1000, -1000, -1000, -1000, -1000, 204, 199, 198,
	195, 193, 192, 188, 187, -1000, -1000, -1000, -1000, 186,
	-1000, -1000, 173, -1000, 171, 170, 169, 168, -1000, 162,
	160, 158, -1000, -1000, -1000, -1000, 157, 155, 153, 55424,
	1811, 66943, 58820, 1926, 50294, 66514, 49865, 66085, 65656, 150,
	-1000, 65227, 149, 148, 146, -1000, 1628, -1000, 145, 1682,
	41245, 142, 141, 140, 2221, 138, 135, -1000, 134, -1000,
	77958, 1339, -1000, 132, 131, -1000, 9301, 523, 57968, 2256,
	129, 120, 40815, 2195, 2219, -1000, -1000, 1649, -1000, -1000,
	116, 115, 113, 111, 110, 109, 108, 107, 106, -1000,
	104, 102, 99, 92, 91, 90, 88, -1000, 87, 83,
	80, 78, 77, 76, 75, 74, 73, 72, 70, -1000,
	77841, 1558, 1383, 1373, 1368, 1360, 1367, 853, 69, 67,
	65, 63, 62, 60, 58, -1000, -1000, 57, 54, 51,
	50, -1000, 48, 46, 175, 45, 44, 42, 39, 38,
	2137, 2254, 1416, 777, 19397, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 71596, 67366,
	36, -81, 35, -1000, 2603, 829, 34366, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 471, -1000, -1000,
	-1000, 260, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1437, 681, -1000, -1000,
	-1000, 64798, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	1810, -24, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 676,
	-1000, 1809, 165, 1662, -1000, -1000, -1000, -1000, -1000, 67366,
	-1000, -1000, 2911, 2909, 1685, 674, 64375, -1000, 1401, -1000,
	826, 22121, -1000, 1034, -1000, 22121, 228, -1000, -1000, -1000,
	2908, 2906, 2905, 2904, -1000, -1000, 49436, 15773, 49007, 48578,
	45160, 63946, 15334, 55001, 1090, -1000, -1000, -1000, -1000, -1000,
	0, 42526, 67366, -1000, 224, -1000, -1000, -1000, -1000, -1000,
	-1000, 28581, 758, 28117, 496, 27653, 493, -1000, -1000, -1000,
	-1000, 2903, 2902, 959, 2900, 2535, 71173, 1458, 2899, 1414,
	1028, 903, 2898, 2896, 2895, 2891, 2890, 2889, 2888, 1295,
	63517, 2337, 44721, 44282, 55424, 55424, 2016, 63088, -1000, -1000,
	1156, 1152, -1000, -1000, -1000, -1000, 2457, 2212, 2211, 54572,
	-1000, -1000, 2887, 2886, 2885, 2884, 2883, 70750, 1444, 2882,
	1954, 2881, 2879, 2877, 2875, 2874, 2871, 2870, 2869, 2867,
	-1000, 54143, 53714, 53285, 2650, 62659, 43843, 43404, -1000, -1000,
	-1000, 36078, 6332, 6027, 62230, 37395, 55424, 55424, -1000, -1000,
	29033, 103, -1000, -1000, -1000, 2233, -1000, 29033, 103, -1000,
	67366, -1000, 2324, 1496, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2015, 1340, 2746, 42965, 1669, 1182, 2446,
	2441, 1277, 1986, 2440, 2437, 2421, 2413, 2376, 1354, 1987,
	401, 18933, 1286, 1275, 2356, 2316, 2766, 1592, 48149, 2866,
	2865, 2560, 2311, 2294, 2231, -1000, -1000, -1000, -1000, 1242,
	-1000, -1000, 50717, -1000, -1000, 1026, -1000, -1000, 1026, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1088, 69904, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1469, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 2079, -1000, 1626, -1000, -1000, 1835, 1199,
	2254, 1950, 2585, 2585, 2585, 2613, 457, 438, -1000, 175,
	-1000, -1000, 77034, -1000, -1000, 29033, 29033, 29033, 29033, 29033,
	1581, -1000, 673, -1000, -1000, 726, -1000, 672, 534, -1000,
	-1000, -1000, -1000, -1000, -1000, 671, 2769, -1000, 860, -1000,
	-1000, -1000, -1000, 2739, -1000, 18017, -1000, -1000, -1000, 385,
	664, 29033, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 216, 841,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 583, 1509, 572, 572, 572, -1000,
	-1000, 896, -1000, -1000, -1000, 418, 565, 367, 562, -1000,
	-1000, -1000, -1000, 2322, 663, 662, -1000, 659, 658, 657,
	-1000, -1000, -1000, 656, 653, 650, 649, 647, 646, 638,
	637, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 895, -1000,
	636, 634, 633, 632, 623, 622, 619, 617, 608, -1000,
	-1000, -3, 67366, -1000, 471, -3, -1000, -1000, 605, -1000,
	22573, 22573, 22573, -1000, -1000, 1799, 29033, -1000, 1961, -1000,
	481, 5, 782, 35220, -1000, 33508, 782, 732, 38678, -1000,
	2217, -1000, -1000, 604, 215, -1000, -1000, 2214, 67366, 16210,
	67366, 55424, 55424, 2492, 29033, -1000, -1000, 42099, 67366, 55847,
	2692, 77669, 42099, 67366, 2312, -1000, -1000, -1000, 67366, -1000,
	29033, -1000, 2684, 1263, 46024, 2629, -16, -1000, -1000, -1000,
	-1000, -1000, -1000, 1933, 1946, 1004, 1833, 1611, -1000, 22121,
	2528, -1000, -1000, -1000, 214, 16210, -1000, -1000, -1000, -1000,
	-1000, 1733, 2460, 1133, -1000, 1829, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1449, 2454, -1000, 2403, 2453,
	1438, -1000, -1000, 883, 2452, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1670, -1000, -1000, 2554, -1000, -1000,
	1789, 2449, 13, -1000, -1000, 36521, 42526, -5, -1000, -1000,
	-44, -1000, 14895, 77034, -1000, -1000, -1000, 77034, 800, -1000,
	-1000, 2448, -1000, 77034, 793, -1000, -1000, 2447, -1000, -1000,
	-1000, 2864, -1000, 2863, 1885, 2862, 2855, 2852, -1000, 1422,
	1499, 2849, -1000, 2845, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 52856, 52427, 901, -1000, 1796, -1000, -1000, 51998, 854,
	1884, -1000, -1000, 1883, -1000, 863, -1000, 2837, 2647, 2058,
	854, 1879, -1000, -1000, -1000, -1000, -1000, 55424, -1000, 55424,
	-1000, 55424, -1000, 1249, -1000, 70327, 5, -1000, -1000, -1000,
	-1000, -1000, 2444, 2830, 2827, 2822, -1000, 67366, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 179, 2442, -1000,
	-1000, 179, 2438, -1000, 179, 2436, -1000, 57539, -1000, -1000,
	1749, 2435, -1000, -125, 2428, -1000, -1000, -125, 2423, -1000,
	-26, -1000, -1000, -1000, 829, -1000, 35649, -1000, 35649, 61801,
	45597, 847, 651, 40386, 77034, -1000, 36521, 77034, -1000, 45597,
	51998, -1000, 61372, 51575, -1000, -1000, 1190, 1964, -1000, -1000,
	-1000, -1000, 45597, 45597, 45597, -1000, 60943, -1000, 1697, 1307,
	2561, 55424, -1000, 1636, -1000, -1000, -1000, 2580, 2293, -1000,
	41672, 57116, -1000, 56693, -1000, 56270, -1000, 55424, -1000, 55424,
	-1000, 2820, 2819, 2816, -1000, 2815, 2574, 77034, 2566, -1000,
	2365, 1381, 1372, 67366, -1000, -1000, 67366, -1000, 67366, -1000,
	-1000, -1000, 1932, -1000, -1000, -1000, -1000, 55424, -1000, -1000,
	-1000, -1000, -1000, -1000, 2285, -1000, 1357, -1000, 1510, -1000,
	1187, -1000, -1000, 183, -1000, -1000, -16, -1000, 69904, -1000,
	-1000, 2254, 1950, -1000, 67366, -1000, 1387, 55424, -1000, 1973,
	-1000, 1231, -1000, 2254, 1751, 2028, 27189, 1998, 31293, 175,
	-1000, -1000, 175, 175, 21669, -1000, -1000, 77669, 77669, 16210,
	1101, 29033, 29033, 29033, 29033, 29033, 29033, 29033, 29033, 29033,
	29033, 29033, 29033, 29033, 29033, 29033, 29033, 29033, 29033, 29033,
	29033, 29033, 29033, 29033, 29033, 29033, 29033, 29033, 29033, 29033,
	29033, 29033, 29033, 29033, 29033, 29033, 2013, 29033, 1084, 29033,
	29033, 29033, 29033, 1985, -1000, -1000, 1544, 492, 1617, -1000,
	2727, 2727, 2727, 10470, 10470, 587, 2814, 726, -1000, 29033,
	-1000, 103, 29033, 16649, -1000, 2757, 1361, -1000, -1000, 438,
	8732, 1850, -1000, 433, 17113, -1000, -1000, -1000, 18017, 534,
	26725, 29033, 856, 77034, 14458, 2323, 2104, -1000, 2756, -1000,
	-1000, 2742, -1000, -1000, -1000, -1000, 2742, 1096, 1062, 2754,
	-1000, 2742, 2742, 600, 710, 708, 689, 683, 520, 29033,
	29033, 29033, 29033, 29033, 29033, 29033, 29033, -1000, 26273, 25809,
	25345, 31745, 24881, 29033, 18469, 24417, 23953, 67366, -3, 2676,
	29033, 152, -1000, 75588, -1000, 152, 152, 599, -27, 77034,
	2019, 2019, 34793, 1960, 1600, 1600, 1600, -1000, 595, 703,
	31, 30, 26, -1000, -1000, 25, 22, 782, 10946, 59243,
	1641, 782, 782, 213, 252, 432, 33081, 1961, 59243, -1000,
	-1000, 55424, 591, 16649, 16210, 1193, -28, 212, 2007, 2006,
	1996, -1000, 1351, -29, 1082, -169, -1000, 3883, -34, -1000,
	1111, -1000, -1000, -1000, 390, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 893, 588, 585, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 583, 1509, 572, 572, 572, -1000, -1000,
	-1000, 418, 565, 367, 562, -1000, -1000, -1000, -1000, -1000,
	-1000, 2213, -44, 55847, 802, -35, 963, -16, -1000, -1000,
	-1000, 46024, 1026, -1000, 1609, -1000, -1000, -1000, -1000, -1000,
	-1000, 1178, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2768,
	-1000, -1000, -1000, -1000, -1000, -1000, 2736, 2732, -4, -1000,
	-1000, 16210, -1000, -17, 1483, -1000, 47720, 2564, 2563, 2542,
	1243, -1000, 1216, 2612, 50717, 2635, 2699, 641, -1000, 2201,
	-1000, -1000, 822, 1342, 1078, 50717, 2403, -1000, 77669, -1000,
	2106, 2611, 1170, 1183, 1170, 1170, 1163, -1000, 50717, 1072,
	1529, 45597, -1000, 1068, -1000, -18, 2634, 2669, 584, -1000,
	2194, 1060, -1000, -1000, 55424, 16210, 761, -1000, 45597, -5,
	42526, 67366, 211, -1000, 29033, 103, 29033, 103, -1000, -1000,
	2410, -1000, -1000, -1000, 2813, 1473, 1948, -1000, -1000, -1000,
	561, 1877, 2403, 1876, -1000, -1000, 51146, 2172, 67366, 2011,
	-14, 55424, -1000, -1000, 1525, -1000, 2409, 2407, 497, 2812,
	-1000, 69481, -1000, 2570, 1110, 2405, 930, 603, 2675, 603,
	39532, -1000, 67366, -1000, 67366, -1000, -1000, -1000, 2811, -1000,
	55424, -1000, -1000, 55424, -1000, 55424, -1000, 55424, 174, 2404,
	-1000, -1000, 67366, 45597, 45597, 45597, 5410, 46874, -42, -43,
	431, -1000, 60520, 67366, 929, 47297, 67366, 2518, -206, -1000,
	847, 847, 761, -1000, 761, -1000, 55424, 2284, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2808, 2807, -1000, 851, 55424,
	67366, 55424, -1000, -1000, 67366, -1000, 67366, -1000, -1000, 67366,
	-1000, 67366, -1000, 67366, -1000, -1000, -1000, -1000, -1000, -1000,
	103, 29033, 1317, -1000, 2283, -1000, 2279, -1000, 56, -1000,
	-1000, -1000, -1000, 1696, 55424, 55424, 55424, 55424, 67366, 55424,
	-1000, 50717, -1000, -1000, 2254, -1000, -1000, 1919, -1000, -6,
	942, -1000, -1000, -1000, -1000, -1000, 77034, 32197, -1000, -1000,
	77034, 1384, -1000, 30841, 30389, -1000, -1000, 2018, -1000, 2018,
	-9, -1000, 75255, 1969, 55424, -1000, -1000, -1000, -1000, -1000,
	815, 1117, 1117, 1049, 1049, 1049, 1049, 2693, 265, 278,
	968, 4539, 4539, 249, 249, 249, 249, 249, 4539, 299,
	1623, 1623, 299, 299, 299, 299, 299, 1623, 1623, 1623,
	4539, 4539, 4539, 10470, 77294, 77496, 29033, 29033, 1059, 1540,
	492, 77381, 29033, 4552, 4552, 4552, 4552, -1000, 1718, -1000,
	-1000, -1000, -1000, 2170, 560, 31745, 31745, -1000, -1000, -1000,
	-1000, 17565, 29033, -1000, -1000, -1000, -1000, 23489, -1000, -1000,
	74923, -242, 430, -217, -12, -1000, 29033, 29033, 29033, 420,
	-1000, 419, -1000, -1000, 1057, -1000, 1041, 1040, 1025, -1000,
	557, 210, 29033, 67366, -1000, 72782, 702, -45, -1000, -48,
	1176, -1000, 29033, 209, -1000, 1584, 554, 552, 416, -50,
	-1000, 414, 810, 799, 413, 406, 405, 29033, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 76774, 72495,
	72449, 10389, 7588, 9994, 9660, -55, 404, -1000, 2152, -217,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 388, -1000, 387,
	-1000, 76701, -217, 386, 4625, -1000, 31745, 31745, 31745, -1000,
	383, -1000, 75515, -1000, 76441, 23037, 23037, 23037, 370, 76181,
	29033, -217, -56, -1000, -58, -1000, -1000, 549, -63, 887,
	22573, 33937, 16210, -1000, 887, 887, 29033, -1000, 29033, 1984,
	-1000, -1000, -1000, 1981, 1901, 2019, 34793, -1000, -1000, -1000,
	-1000, 59243, 499, 782, -1000, -1000, -1000, -1000, -1000, 59243,
	-1000, 2739, 2349, -1000, -1000, -1000, 67366, 471, -1000, 59243,
	59243, 16210, 782, -1000, 362, 37822, -12, 208, -1000, -1000,
	16210, 2089, 2089, 2089, -1000, -1000, 67366, 2709, -1000, 1519,
	-1000, 77669, -1000, 720, 954, -1000, 2753, 548, -1000, 2742,
	2742, 67366, 117, 22121, -1000, 1026, -1000, -1000, 1285, -1000,
	1478, -1000, 1053, -1000, -1000, -1000, -1000, 22121, -1000, 1715,
	67366, 67366, 55424, -1000, -1000, 1874, 69058, 1870, 77669, 67366,
	-1000, -1000, 547, 544, 1968, 1959, 926, 67366, 67366, 68635,
	68212, 67366, 1539, 29033, 1615, 1555, 103, 103, -1000, -1000,
	103, 541, 1081, 55424, 55424, 55424, 1430, -1000, -1000, -1000,
	-1000, -1000, 55424, -1000, -1000, 2752, 2750, -1000, 1170, -1000,
	-1000, -1000, 1170, 2403, 1421, 55424, 45597, 882, 67366, 1532,
	103, 103, -1000, -1000, 103, 540, 16210, 1441, -1000, 2068,
	-1000, -68, -1000, -1000, 14021, 77034, -1000, 77034, -1000, 67366,
	-1000, 899, 67366, 47297, 834, 2401, -1000, 2403, 2399, 471,
	-1000, -1000, 39105, -44, 847, 45597, 55424, -14, 45597, 45597,
	45597, 2805, 539, 2804, -1000, 1786, 1868, -1000, -1000, 67789,
	2484, 749, 67366, 887, 34793, 1452, -1000, 38251, 912, 67366,
	1407, 95, -1000, -1000, -1000, 41, 67366, -1000, 2802, -1000,
	-1000, 179, 179, 179, -1000, 55424, 55424, 1749, -1000, -125,
	-125, -1000, -1000, 5410, 5410, 847, -15, 538, -1000, 774,
	772, 36958, 45597, -70, -1000, -1000, -1000, -1000, -1000, 55424,
	67366, 579, 2051, 67366, -71, -1000, 207, 535, -1000, 847,
	36521, 2148, -1000, -1000, 862, -1000, 1186, -1000, -1000, -1000,
	-1000, -1000, -1000, 8, -44, -44, -1000, -1000, -1000, -1000,
	77034, -1000, 1316, 1314, 67366, -1000, 16210, 67366, 55424, 16210,
	55424, 2251, 2247, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1384, 1678, -1000, 534, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 21669, -1000, -1000, -1000, 55424, 7, 29033,
	29033, 76951, 8283, 29033, 31745, 31745, -1000, 29033, 7542, -1000,
	-1000, -1000, -1000, -1000, 2139, 532, 29033, 77669, 4338, 4046,
	-1000, 355, 9339, 299, -1000, 29033, -1000, 354, 21217, -1000,
	75848, -13, -84, -1000, 2767, 1906, 1582, 1451, 1329, 2749,
	13584, -217, -85, -1000, -1000, 714, -1000, 2408, -1000, 29033,
	76108, 13147, -1000, 39959, 888, 1627, -1000, -1000, 2742, 796,
	-1000, -1000, -1000, 796, -1000, 74637, 77669, 77669, 29033, 29033,
	-1000, 29033, 29033, 29033, -1000, -1000, 29033, -1000, -1000, 2125,
	29033, -1000, 77669, 77669, 31745, 31745, 31745, 31745, 31745, 31745,
	31745, 31745, 31745, 31745, 31745, 31745, 31745, 31745, 31745, 31745,
	31745, 31745, 31745, 1975, 31745, 2724, 2724, 2724, -1000, 2240,
	2125, 29033, 29033, 77669, 352, 348, 347, -1000, 29033, -217,
	-1000, -1000, 5410, -1000, 2103, -1000, 29033, -1000, -82, -1000,
	1961, -1000, -1000, 2103, 2103, -86, 77034, 34793, 34793, -1000,
	531, 29033, 1980, -1000, 698, -1000, -87, -1000, 59243, -1000,
	696, -243, -1000, 756, -1000, -1000, -1000, -1000, 471, -1000,
	-1000, -1000, 206, 59243, -1000, -92, -1000, 2671, 346, 16210,
	-1000, -1000, -1000, -1000, -1000, -1000, -44, 1660, 2765, -1000,
	2743, 712, 694, 343, 2742, 338, 337, -44, 67366, -1000,
	-16, -1000, -1000, -1000, 29033, -1000, -1000, 2553, 1023, 1019,
	-1000, 2398, -1000, 1861, -1000, 868, -1000, 1564, -1000, 29033,
	29033, 529, 528, 2801, 1562, 2800, 2393, 1749, 2389, 1749,
	-1000, -1000, 798, -1000, 77034, 527, 525, -1000, -17, 1333,
	861, -1000, -1000, 29033, 29033, 60093, -1000, 378, 2554, 6,
	-1000, 1016, -1000, -1000, -1000, 2403, 1014, -1000, -1000, 1524,
	-1000, -1000, 857, -1000, -1000, 29033, -1000, -18, 1008, 847,
	2124, -1000, -1000, 2798, 2796, 2795, 335, -93, -41, 77669,
	2667, 1791, 67366, 55424, 55424, 2657, 811, -1000, 2739, -1000,
	-1000, -1000, -1000, 854, -1000, -1000, 2794, -1000, 55424, 2388,
	1784, 1857, 1942, 749, 46451, -1000, 854, 1627, -80, -1000,
	1407, 20753, 2550, -95, -1000, -1000, -1000, 887, 39532, 34793,
	29033, 2791, -102, -1000, -1000, -1000, -1000, -1000, 174, -1000,
	-1000, -1000, -1000, 59670, 59670, 45597, 45597, 45597, 847, 67366,
	67366, 47297, 2790, 524, 67366, 67366, 519, -1000, 67366, 67366,
	2789, 45597, -1000, -1000, 103, -1000, 1657, 55424, 12710, -1000,
	-1000, 851, -1000, -1000, 1553, 1828, 1553, 1392, 1386, 1671,
	-1000, -1000, 2530, 16210, 2649, 4552, 29033, 29033, 336, 1058,
	455, 4552, 29033, 29033, 77669, 6976, -104, 29033, 29033, -1000,
	29033, 692, 77034, 2761, 29033, 332, 318, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 316, -1000, -1000, -1000,
	-1000, -1000, 77034, 29033, 118, -1000, -1000, -1000, 72019, -1000,
	29033, 314, 313, -1000, -1000, -1000, 307, 302, 9079, 5458,
	74351, 74305, 74019, 77034, 2240, 77034, -1000, -1000, 1091, 1091,
	1173, 1173, 1173, 1173, 2724, 1002, 846, 941, 434, 434,
	434, 855, 1066, 1066, 434, 434, 434, 2122, 1971, 515,
	5877, -1000, -1000, 77034, 77034, 300, -1000, -1000, -1000, -217,
	298, 2091, 2607, 77034, -1000, 34793, 2091, 2091, -1000, -1000,
	1901, 67366, 77034, 34793, 5, -1000, 2739, -1000, -1000, 2349,
	-1000, 11395, -1000, 16210, -1000, -1000, 37822, -1000, 514, -1000,
	96, -1000, -1000, 687, 2788, 709, -1000, 297, -1000, -1000,
	-44, 77034, 67366, 67366, 67366, 2387, -1000, 3596, -1000, 926,
	73733, -105, -1000, 75255, 29033, 67366, -1000, -1000, 1712, 2012,
	950, -1000, 67366, -1000, 67366, -1000, -1000, 67366, 67366, 55424,
	2366, -111, 77034, -61, -1000, 753, -1000, 1167, -1000, 12273,
	55424, 55424, 45597, 2364, -112, 16210, -1000, 45597, -1000, -1000,
	-1000, 2037, -1000, 58391, 1701, 103, -1000, 2787, 513, 2403,
	103, -1000, 1655, -1000, 686, -1000, -1000, 919, 16210, 55424,
	2374, 1941, 749, 46451, -1000, 1110, 2028, -1000, -73, -1000,
	506, 103, 1627, -1000, -80, 77034, -1000, 751, -1000, -1000,
	-113, -1000, -1000, 281, -1000, 2517, 2516, -1000, -1000, 29033,
	512, 511, 67366, 2514, -1000, -1000, -114, -1000, 1917, -1000,
	-1000, -1000, -1000, -1000, 16210, 1322, -1000, 509, 508, -1000,
	-1000, 2530, 4552, 4552, 29033, 29033, 29033, 4552, 6976, -119,
	-1000, 4552, 4552, -217, -1000, -1000, 75848, -1000, -1000, -1000,
	77034, 11836, 1560, -1000, 73687, -1000, -1000, -1000, -1000, 29033,
	29033, -1000, -1000, -1000, -1000, -1000, 31745, 2121, 505, 77669,
	-1000, -1000, 842, 29033, 29033, 1961, 842, 842, -1000, -122,
	-1000, 782, -1000, -1000, -1000, 2739, 96, -1000, 2786, 16210,
	706, -1000, 2785, -1000, -1000, -1000, -1000, 67366, -1000, 67366,
	-1000, 16210, 67366, 2136, 1851, -1000, -1000, 1958, 504, 31745,
	55424, 742, 2145, 1477, 29033, -1000, -128, -129, 1847, -1000,
	-1000, 1841, 29033, -1000, 77669, 1749, 1749, -130, -135, -1000,
	29033, 998, 67366, 20301, -1000, 2784, 2554, -1000, -1000, -1000,
	29033, 993, -1000, -125, 1532, 2087, -1000, -1000, -1000, -1000,
	1953, -1000, -1000, 67366, 1949, 850, -1000, 47297, 834, -1000,
	-1000, 840, -1000, 503, 67366, 1781, 495, 16210, -1000, 749,
	46451, -1000, 2484, 1407, -1000, 2451, 67366, 2541, -1000, 2028,
	492, -1000, 847, 491, 488, -136, 29033, 29033, -143, 487,
	847, -156, -1000, 717, 716, -1000, -1000, 55424, 55424, 29033,
	29033, -1000, 4552, 4552, 4552, -1000, 276, -1000, -1000, 1627,
	2606, -1000, 73401, 73115, 4011, 31745, 77669, -145, -1000, 67366,
	77034, -217, -1000, -1000, -1000, 59243, 684, -1000, 2780, -1000,
	-1000, 1940, -1000, -1000, -1000, 67366, 1856, -1000, -1000, 29033,
	5877, 486, 29033, -1000, -1000, 2031, 2182, 2037, 485, -1000,
	-1000, -1000, -1000, -1000, 1462, -1000, -1000, 77034, 2589, -1000,
	-1000, 483, 482, 77034, 478, 748, 2120, -1000, -1000, -1000,
	77034, 477, 834, -1000, 1574, 1701, 474, -1000, -1000, -1000,
	2057, 267, 2644, 840, -1000, 2733, -1000, 29033, -1000, 55424,
	29033, 1773, 46451, -1000, 1942, -1000, 1121, -146, 67366, 1407,
	-1000, -1000, 45597, 45597, 1477, -151, -160, -1000, 45597, -1000,
	1917, -1000, 67366, -1000, 67366, -1000, -1000, -162, -163, -1000,
	1526, 29033, -1000, -1000, 4011, -170, -1000, -176, -1000, 2640,
	-1000, -1000, -1000, -1000, -1000, 2373, 73042, 1907, 67366, 6089,
	2160, -1000, -1000, 1532, 67366, 55424, 924, 16210, 1553, 1553,
	29033, 19849, 1573, 29033, -1000, 55424, 67366, -1000, 2511, 2037,
	103, -1000, -1000, -171, 919, -173, 55424, -1000, 1941, 1241,
	-1000, 887, -1000, -1000, -180, -182, 2037, 1477, -1000, -183,
	-1000, -185, -190, -1000, -1000, 263, 29937, 29937, 29937, -217,
	-1000, 67366, 473, 2354, -1000, 1698, 1429, 105, 961, -1000,
	-1000, 2145, -193, 471, -1000, 29033, -1000, -198, -1000, 911,
	-200, -1000, 908, -205, -1000, 2117, -1000, -212, 470, -215,
	-1000, -1000, -1000, 1532, 850, 1477, 469, 1477, 466, -1000,
	39532, -1000, 847, 847, 1532, 2037, 847, -1000, -1000, -1000,
	2473, -1000, 32634, 1721, 1376, 74969, 2473, 2473, -1000, -1000,
	67366, -1000, 1771, 1743, 1248, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1907, 77034, -1000, 1553, 2074, -1000, 1553,
	2112, -1000, 1568, -1000, 67366, -1000, 67366, 834, -1000, 2037,
	29033, 2037, 29033, -201, -1000, -1000, -1000, 1532, -1000, -1000,
	1471, 2700, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2497, -1000, 938, 1780, 1780, 1698, -1000, 465, -1000,
	459, -1000, -220, -1000, -1000, 1532, -221, 1532, -222, -1000,
	-1000, 1369, -1000, -1000, 1607, 29485, -1000, 2712, -1000, -1000,
	1989, -1000, 2145, 29033, 29033, 1747, 865, 1477, 865, 1477,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -223, -228, -1000,
	-1000, -1000, -1000, 2775, 2037, -1000, 2037, 1532, 972, -1000,
	1532, 1532, -1000, 456, 865, 865, 29033, -1000, -1000, -230,
	1532, -1000,
}
var sqlPgo = [...]int{

	0, 3410, 3408, 3407, 3406, 3405, 3402, 3401, 3400, 3398,
	3396, 3392, 3391, 3389, 3386, 3385, 3383, 3382, 3380, 3378,
	3376, 3375, 3374, 3372, 3370, 3368, 3364, 3362, 3360, 3359,
	3356, 3355, 3354, 3353, 3350, 3349, 3348, 3347, 3345, 3343,
	3342, 3341, 3340, 3338, 3337, 3335, 3333, 3323, 30, 3321,
	3318, 3317, 3316, 3315, 3313, 3312, 3308, 3304, 3303, 3302,
	3296, 3292, 3291, 3290, 3288, 3286, 36, 3285, 219, 3284,
	3283, 3282, 3279, 3278, 3276, 3275, 3274, 3272, 3267, 218,
	3266, 134, 3263, 3261, 3257, 3256, 3255, 216, 3253, 3251,
	3250, 3249, 3248, 3245, 3244, 3243, 143, 3242, 3240, 113,
	3235, 3234, 3228, 3226, 3222, 3221, 3218, 3217, 3216, 3215,
	192, 3213, 215, 3212, 3210, 3207, 3206, 3199, 3197, 3196,
	3194, 3193, 3192, 3191, 3188, 3185, 3183, 3180, 3178, 3176,
	3175, 3174, 3173, 3172, 3171, 3170, 3169, 3167, 3166, 3165,
	217, 151, 3164, 3162, 214, 211, 3159, 3158, 3156, 99,
	97, 90, 3155, 106, 146, 213, 7516, 196, 3153, 3150,
	3148, 158, 3146, 3141, 3140, 3139, 72, 142, 140, 132,
	137, 125, 3137, 3129, 75, 55, 34, 28, 102, 3127,
	3124, 3123, 2541, 98, 3121, 3120, 207, 187, 3119, 1477,
	3118, 128, 78, 92, 11, 89, 3117, 112, 27, 3115,
	147, 60, 3110, 123, 70, 35, 5591, 6633, 3107, 93,
	226, 81, 210, 172, 171, 173, 170, 133, 813, 3106,
	197, 3105, 68, 135, 3104, 3102, 3100, 56, 155, 80,
	3099, 13, 3, 167, 31, 91, 16, 3098, 12, 3097,
	3094, 3093, 3092, 21, 138, 3091, 116, 67, 3087, 6,
	3085, 50, 176, 3078, 178, 101, 3077, 3074, 199, 161,
	156, 3071, 57, 183, 3067, 3063, 3062, 3061, 3059, 104,
	19, 103, 3057, 3055, 108, 188, 3054, 33, 3048, 136,
	77, 126, 222, 95, 177, 87, 175, 145, 182, 3047,
	3046, 3045, 164, 3043, 3042, 118, 165, 3041, 3037, 162,
	221, 23, 39, 185, 54, 150, 122, 3036, 163, 3034,
	3030, 3027, 220, 144, 169, 7, 66, 96, 26, 10,
	184, 120, 84, 82, 3022, 3673, 2052, 1436, 3021, 111,
	94, 41, 88, 129, 206, 71, 3019, 3018, 1163, 3017,
	3016, 3012, 3011, 148, 3010, 3009, 3008, 107, 58, 115,
	3007, 121, 65, 9, 127, 209, 86, 174, 159, 195,
	3006, 141, 3003, 44, 117, 3002, 160, 194, 76, 3001,
	201, 114, 3000, 202, 2999, 2998, 2997, 2996, 100, 2993,
	2991, 119, 2990, 110, 2989, 2988, 205, 152, 2987, 203,
	153, 154, 73, 53, 2986, 62, 29, 2984, 157, 38,
	2983, 124, 51, 0, 7504, 5379, 6895, 2980, 1750, 2979,
	166, 109, 2978, 2977, 2976, 74, 2975, 64, 2974, 2973,
	37, 2972, 32, 5, 8, 18, 15, 1257, 717, 2971,
	2970, 85, 105, 130, 2969, 224, 181, 2967, 2966, 2965,
	69, 2964, 24, 2959, 22, 2951, 2950, 25, 4, 17,
	2949, 2943, 190, 2942, 191, 2941, 2940, 2671, 2936, 204,
	63, 2935, 139, 186, 2934, 2931, 2930, 2928, 200, 2927,
	198, 2926, 14, 20, 2, 2925, 2923, 2920, 168, 1,
	2510, 2918, 2917, 59, 2915, 2914, 149,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 3, 3,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 12, 12, 7, 7, 8, 8, 8,
	36, 36, 10, 10, 9, 9, 9, 11, 11, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 14, 14,
	26, 26, 15, 15, 28, 28, 16, 16, 29, 29,
	459, 459, 19, 31, 20, 32, 13, 460, 460, 460,
	460, 24, 21, 33, 22, 22, 22, 22, 22, 152,
	152, 152, 152, 18, 18, 27, 27, 168, 168, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	167, 167, 167, 167, 167, 167, 167, 167, 167, 167,
	458, 458, 170, 170, 169, 165, 165, 461, 461, 171,
	171, 171, 173, 173, 37, 37, 95, 95, 95, 96,
	96, 97, 97, 153, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 83, 83, 401, 401, 402, 402, 148,
	148, 149, 149, 149, 149, 150, 150, 151, 151, 151,
	51, 39, 39, 39, 39, 39, 39, 39, 40, 40,
	40, 40, 41, 41, 41, 41, 41, 41, 42, 42,
	42, 42, 42, 42, 49, 49, 49, 141, 141, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 465,
	465, 465, 465, 465, 465, 465, 465, 465, 465, 466,
	466, 467, 467, 468, 468, 469, 469, 469, 469, 469,
	469, 469, 469, 469, 469, 469, 469, 469, 469, 469,
	469, 469, 469, 469, 469, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	63, 63, 245, 245, 221, 221, 64, 64, 64, 65,
	65, 66, 66, 53, 53, 454, 454, 259, 259, 365,
	365, 68, 68, 278, 278, 69, 69, 69, 69, 69,
	69, 70, 70, 70, 70, 70, 70, 70, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 77, 77,
	77, 78, 78, 78, 75, 75, 75, 73, 73, 73,
	72, 72, 72, 76, 76, 76, 74, 74, 74, 260,
	260, 79, 79, 79, 79, 79, 79, 79, 79, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 82, 82, 82, 82, 82, 82, 82, 82,
	82, 82, 82, 82, 367, 367, 80, 80, 80, 336,
	336, 84, 84, 84, 293, 293, 85, 85, 85, 85,
	85, 86, 86, 86, 86, 98, 98, 98, 98, 457,
	457, 252, 252, 186, 186, 186, 186, 91, 91, 91,
	91, 92, 92, 92, 93, 93, 146, 146, 104, 104,
	104, 104, 104, 103, 103, 103, 103, 103, 103, 43,
	43, 43, 44, 44, 45, 45, 46, 46, 47, 47,
	48, 48, 48, 48, 48, 106, 106, 462, 462, 108,
	105, 105, 105, 107, 107, 107, 107, 109, 110, 110,
	110, 110, 110, 110, 110, 110, 111, 111, 395, 395,
	268, 268, 393, 393, 409, 409, 394, 394, 225, 225,
	225, 225, 225, 226, 226, 226, 400, 400, 400, 400,
	400, 400, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
	112, 112, 112, 112, 147, 147, 147, 147, 131, 131,
	131, 140, 140, 140, 140, 140, 140, 140, 133, 133,
	133, 121, 121, 113, 113, 113, 113, 113, 117, 117,
	117, 117, 117, 114, 114, 123, 123, 123, 123, 123,
	118, 118, 120, 120, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 115, 115, 115, 115, 125, 125, 125,
	125, 300, 300, 300, 124, 124, 124, 124, 124, 124,
	124, 124, 124, 124, 136, 136, 136, 136, 136, 136,
	350, 350, 132, 132, 132, 132, 135, 135, 135, 135,
	283, 283, 129, 129, 129, 130, 130, 130, 134, 134,
	137, 137, 137, 137, 116, 116, 116, 471, 471, 471,
	138, 138, 128, 128, 139, 139, 139, 139, 139, 139,
	139, 139, 127, 127, 127, 126, 126, 126, 126, 119,
	455, 455, 452, 452, 452, 452, 452, 452, 452, 453,
	453, 456, 456, 89, 89, 89, 58, 58, 472, 472,
	472, 59, 59, 473, 473, 473, 470, 470, 470, 470,
	470, 470, 470, 470, 227, 227, 228, 228, 317, 317,
	317, 317, 317, 231, 231, 172, 172, 172, 234, 235,
	235, 232, 232, 233, 233, 233, 237, 237, 236, 239,
	239, 238, 316, 416, 416, 418, 418, 418, 418, 418,
	418, 418, 420, 420, 420, 420, 420, 420, 420, 420,
	420, 420, 414, 414, 414, 415, 410, 410, 411, 411,
	411, 411, 411, 229, 229, 230, 230, 230, 230, 412,
	413, 250, 250, 353, 417, 417, 419, 419, 421, 474,
	474, 474, 474, 474, 474, 475, 475, 475, 315, 315,
	243, 243, 422, 422, 422, 422, 423, 423, 423, 423,
	423, 426, 425, 424, 424, 424, 424, 424, 62, 62,
	62, 280, 280, 279, 279, 281, 281, 281, 281, 281,
	281, 281, 281, 281, 281, 281, 281, 281, 281, 143,
	143, 60, 60, 60, 178, 178, 57, 57, 57, 477,
	477, 61, 61, 61, 478, 478, 67, 67, 67, 67,
	67, 67, 56, 56, 56, 56, 56, 479, 479, 301,
	301, 299, 299, 298, 298, 249, 249, 352, 190, 190,
	166, 166, 166, 23, 25, 25, 17, 17, 34, 34,
	35, 35, 30, 30, 463, 463, 464, 464, 90, 90,
	94, 94, 94, 102, 102, 142, 142, 142, 142, 142,
	142, 142, 38, 38, 38, 38, 50, 50, 50, 50,
	100, 481, 481, 481, 101, 101, 480, 480, 185, 185,
	185, 185, 187, 187, 312, 312, 313, 313, 482, 482,
	314, 314, 314, 314, 180, 179, 181, 181, 55, 55,
	55, 174, 174, 175, 175, 176, 176, 177, 177, 483,
	483, 87, 87, 87, 145, 145, 220, 220, 308, 308,
	308, 244, 244, 195, 195, 311, 311, 309, 309, 309,
	309, 277, 277, 277, 144, 144, 257, 257, 270, 270,
	271, 271, 362, 362, 272, 99, 99, 156, 156, 154,
	154, 154, 154, 154, 154, 161, 161, 261, 261, 162,
	162, 162, 162, 163, 163, 163, 155, 155, 155, 157,
	157, 157, 157, 157, 157, 157, 160, 160, 160, 160,
	164, 164, 164, 159, 159, 433, 433, 433, 435, 435,
	436, 432, 432, 434, 434, 476, 476, 282, 282, 282,
	241, 242, 240, 240, 247, 247, 246, 248, 248, 351,
	351, 351, 275, 275, 275, 275, 304, 304, 302, 302,
	302, 302, 303, 303, 305, 305, 305, 306, 306, 307,
	307, 274, 274, 332, 332, 158, 158, 158, 254, 254,
	254, 255, 255, 323, 323, 323, 323, 323, 323, 324,
	324, 322, 322, 322, 322, 354, 354, 354, 354, 354,
	354, 354, 354, 354, 355, 355, 256, 256, 356, 310,
	310, 450, 450, 450, 451, 451, 349, 349, 357, 357,
	357, 357, 357, 357, 347, 347, 348, 348, 363, 364,
	364, 286, 286, 286, 286, 284, 284, 287, 287, 287,
	287, 285, 285, 358, 358, 358, 358, 276, 276, 359,
	359, 359, 360, 318, 319, 319, 368, 368, 368, 368,
	383, 253, 253, 253, 253, 253, 484, 484, 369, 369,
	369, 369, 369, 369, 369, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 373, 373, 373,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 382, 382,
	382, 382, 382, 374, 374, 379, 379, 380, 380, 380,
	375, 376, 381, 381, 381, 381, 485, 485, 385, 385,
	377, 377, 377, 377, 377, 377, 377, 377, 377, 371,
	371, 371, 378, 296, 296, 296, 296, 296, 296, 296,
	296, 296, 296, 296, 296, 296, 294, 294, 295, 295,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 325, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 326, 326, 326, 326, 326,
	326, 326, 326, 326, 326, 327, 327, 327, 327, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 328, 328, 328, 328, 328, 328,
	328, 328, 328, 328, 427, 427, 427, 427, 427, 427,
	427, 427, 430, 430, 431, 431, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 428, 428, 428,
	428, 428, 428, 428, 428, 428, 428, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 429, 429, 429, 429, 429,
	429, 429, 429, 429, 429, 437, 437, 438, 438, 440,
	440, 441, 441, 442, 443, 443, 443, 444, 445, 445,
	439, 439, 446, 446, 446, 446, 447, 447, 448, 448,
	448, 448, 448, 449, 449, 449, 449, 449, 338, 338,
	339, 339, 345, 345, 345, 224, 224, 224, 224, 224,
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224,
	224, 188, 188, 188, 188, 188, 266, 266, 264, 264,
	264, 267, 267, 265, 265, 263, 263, 262, 262, 335,
	335, 333, 333, 337, 337, 288, 288, 384, 384, 384,
	384, 384, 384, 384, 289, 289, 289, 297, 290, 290,
	291, 291, 291, 291, 291, 329, 330, 292, 292, 292,
	331, 331, 340, 344, 344, 343, 342, 342, 341, 341,
	320, 320, 321, 321, 273, 273, 486, 486, 269, 269,
	361, 361, 361, 361, 223, 223, 258, 258, 222, 222,
	215, 215, 216, 216, 216, 216, 251, 251, 346, 346,
	386, 386, 387, 387, 388, 388, 389, 389, 390, 391,
	392, 334, 205, 204, 192, 193, 203, 202, 201, 191,
	194, 198, 199, 200, 196, 197, 211, 210, 209, 207,
	208, 366, 217, 217, 218, 218, 218, 219, 219, 219,
	219, 189, 189, 212, 212, 213, 214, 214, 206, 206,
	206, 182, 182, 182, 183, 183, 184, 184, 399, 399,
	397, 397, 397, 398, 398, 398, 398, 396, 396, 396,
	396, 396, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 403, 403, 403, 403, 403, 403, 403, 403, 403,
	403, 406, 406, 406, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 406, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 406, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 406, 406, 406, 406, 406, 406, 406,
	406, 406, 406, 406, 406, 406, 406, 404, 404, 404,
	404, 404, 404, 404, 404, 404, 404, 404, 404, 404,
	404, 404, 404, 404, 405, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 407, 407, 407, 407, 407,
	407, 407, 407, 407, 407, 408, 408,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 0, 1, 1, 2, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 1, 3,
	4, 6, 1, 3, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 4, 6,
	4, 6, 6, 9, 6, 9, 6, 5, 6, 5,
	1, 1, 5, 5, 6, 6, 4, 4, 4, 4,
	3, 4, 4, 4, 7, 7, 9, 8, 9, 5,
	3, 5, 7, 4, 12, 4, 12, 1, 3, 5,
	5, 2, 5, 3, 6, 4, 6, 5, 6, 6,
	4, 8, 3, 4, 3, 6, 4, 3, 1, 3,
	2, 1, 1, 3, 1, 3, 2, 2, 0, 1,
	1, 0, 2, 0, 7, 2, 5, 6, 2, 1,
	3, 1, 3, 1, 6, 4, 9, 7, 12, 12,
	12, 9, 2, 7, 2, 1, 1, 1, 3, 3,
	0, 3, 1, 3, 1, 1, 3, 2, 5, 0,
	5, 1, 2, 1, 2, 1, 2, 2, 3, 3,
	3, 3, 3, 5, 3, 3, 5, 3, 3, 5,
	3, 3, 5, 3, 6, 6, 6, 1, 1, 1,
	2, 1, 2, 1, 1, 2, 1, 2, 3, 3,
	4, 3, 4, 7, 4, 4, 4, 3, 5, 7,
	4, 3, 3, 4, 3, 3, 3, 3, 3, 2,
	0, 1, 0, 1, 0, 3, 3, 3, 3, 3,
	6, 4, 4, 4, 3, 5, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 4, 1, 1, 2, 1, 2,
	7, 3, 2, 0, 1, 3, 3, 1, 0, 1,
	2, 2, 1, 6, 5, 1, 2, 1, 3, 2,
	0, 9, 3, 2, 0, 2, 2, 2, 2, 2,
	2, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 5, 7, 3,
	4, 6, 3, 3, 5, 3, 3, 5, 3, 1,
	3, 2, 2, 5, 3, 3, 6, 6, 3, 1,
	1, 2, 1, 1, 1, 2, 1, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 3, 5, 7, 2, 3,
	0, 3, 5, 2, 3, 0, 2, 3, 2, 3,
	2, 6, 4, 7, 2, 6, 4, 7, 2, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 2, 4, 3, 2, 2, 1, 2,
	1, 3, 3, 1, 2, 1, 2, 1, 2, 1,
	1, 3, 5, 4, 6, 4, 3, 0, 1, 3,
	2, 4, 2, 4, 1, 6, 3, 1, 1, 5,
	3, 2, 6, 3, 3, 4, 4, 3, 1, 3,
	2, 3, 3, 1, 3, 1, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 1, 1, 3, 2, 2,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 2, 1,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 3, 3, 3, 3, 2, 3,
	3, 1, 1, 1, 1, 1, 2, 2, 5, 7,
	3, 3, 3, 3, 4, 4, 4, 3, 4, 4,
	3, 4, 4, 5, 3, 5, 5, 5, 7, 3,
	3, 3, 4, 3, 4, 3, 5, 4, 5, 3,
	4, 5, 3, 4, 3, 4, 3, 3, 4, 4,
	5, 0, 1, 1, 3, 2, 4, 3, 3, 5,
	4, 3, 5, 3, 5, 4, 6, 4, 6, 4,
	1, 0, 3, 4, 4, 5, 7, 5, 3, 3,
	2, 0, 4, 2, 3, 4, 2, 3, 3, 3,
	4, 3, 3, 3, 3, 4, 3, 1, 1, 1,
	2, 3, 2, 3, 6, 6, 7, 9, 7, 9,
	3, 4, 10, 10, 3, 5, 5, 5, 3, 5,
	2, 0, 1, 1, 1, 1, 3, 2, 2, 2,
	1, 2, 0, 3, 3, 2, 10, 13, 0, 2,
	3, 9, 12, 0, 2, 3, 1, 1, 2, 2,
	2, 2, 1, 0, 1, 0, 1, 3, 1, 1,
	1, 1, 3, 8, 0, 1, 1, 0, 2, 1,
	0, 1, 0, 9, 9, 3, 1, 3, 7, 1,
	3, 11, 3, 2, 0, 3, 1, 2, 2, 3,
	2, 6, 2, 1, 1, 2, 4, 2, 5, 5,
	5, 2, 8, 9, 6, 5, 3, 1, 5, 8,
	5, 11, 3, 3, 0, 2, 4, 3, 3, 1,
	5, 1, 3, 1, 2, 0, 1, 2, 2, 0,
	1, 3, 3, 2, 2, 1, 1, 1, 4, 0,
	3, 0, 2, 2, 2, 0, 1, 1, 2, 2,
	0, 3, 3, 2, 1, 1, 2, 2, 5, 8,
	4, 1, 0, 1, 2, 2, 1, 2, 3, 2,
	2, 3, 2, 2, 2, 2, 2, 3, 1, 4,
	2, 4, 7, 3, 3, 0, 3, 6, 3, 1,
	1, 8, 7, 5, 0, 1, 6, 7, 6, 5,
	3, 4, 15, 18, 15, 18, 4, 0, 2, 2,
	0, 1, 0, 1, 0, 1, 3, 2, 2, 0,
	1, 1, 0, 6, 6, 8, 6, 8, 6, 8,
	6, 8, 6, 8, 1, 0, 2, 0, 2, 2,
	3, 3, 2, 2, 2, 1, 2, 1, 2, 1,
	2, 1, 3, 2, 3, 2, 2, 2, 2, 2,
	2, 1, 1, 0, 2, 2, 1, 0, 1, 3,
	2, 0, 2, 1, 1, 0, 1, 3, 1, 0,
	1, 1, 1, 1, 2, 3, 2, 2, 8, 11,
	3, 3, 0, 3, 0, 3, 0, 3, 0, 1,
	0, 6, 7, 3, 6, 3, 1, 3, 1, 4,
	2, 1, 3, 1, 3, 8, 5, 3, 4, 3,
	0, 2, 2, 0, 10, 3, 2, 0, 1, 3,
	1, 1, 3, 3, 5, 1, 1, 3, 3, 2,
	3, 4, 3, 4, 5, 0, 3, 0, 2, 2,
	4, 2, 3, 0, 2, 1, 2, 1, 1, 1,
	2, 1, 2, 1, 2, 1, 8, 8, 8, 2,
	4, 4, 4, 2, 2, 2, 2, 3, 1, 3,
	6, 1, 0, 1, 0, 1, 0, 1, 1, 0,
	1, 5, 1, 0, 1, 0, 3, 1, 3, 2,
	4, 5, 2, 2, 1, 1, 1, 0, 2, 2,
	5, 4, 2, 3, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 2, 0, 4, 2, 5, 3, 2,
	0, 1, 3, 3, 5, 1, 1, 1, 1, 1,
	3, 2, 4, 4, 0, 8, 4, 3, 4, 1,
	5, 3, 4, 5, 1, 5, 1, 3, 2, 0,
	3, 0, 2, 3, 1, 3, 2, 0, 3, 5,
	6, 4, 6, 4, 3, 2, 1, 0, 5, 1,
	0, 2, 2, 2, 1, 1, 0, 1, 1, 1,
	0, 4, 2, 1, 2, 2, 4, 1, 3, 1,
	2, 3, 2, 2, 1, 0, 2, 5, 7, 2,
	1, 2, 4, 3, 5, 0, 1, 1, 1, 1,
	1, 1, 2, 4, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 5, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 5, 4, 1, 2, 1,
	4, 1, 1, 2, 1, 1, 1, 1, 1, 0,
	1, 2, 5, 1, 4, 2, 5, 1, 4, 3,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 1, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 3, 3, 3,
	3, 4, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 1, 5, 5, 3, 1, 1, 1,
	2, 2, 2, 4, 3, 5, 6, 8, 6, 5,
	4, 3, 4, 1, 1, 1, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 8, 8,
	6, 4, 6, 6, 6, 4, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 3, 3, 3, 0, 1, 4, 2, 2,
	2, 2, 2, 3, 2, 2, 3, 0, 4, 1,
	1, 5, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 1, 2,
	3, 2, 3, 2, 3, 1, 0, 1, 3, 1,
	3, 3, 3, 1, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 3, 1, 2, 3, 0,
	3, 3, 2, 2, 1, 2, 2, 3, 2, 1,
	1, 1, 5, 1, 2, 4, 2, 0, 1, 0,
	3, 5, 1, 0, 1, 2, 1, 0, 1, 3,
	3, 2, 1, 1, 1, 3, 1, 3, 3, 1,
	1, 1, 1, 5, 3, 1, 1, 3, 1, 1,
	1, 1, 2, 2, 1, 1, 2, 2, 1, 1,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 7, 1, 7, 5,
	3, 1, 1, 1, 1, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 0, 3, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, 466, -81, -51, -49, -84, -85, -69,
	-86, -80, -98, -102, -90, -104, -142, -147, -3, -37,
	-39, -52, -68, -70, -79, -88, -87, -89, -91, -95,
	-94, -83, -43, -99, -103, -112, -143, -144, -145, 85,
	70, 126, 107, 112, 159, 293, 323, 333, 317, -107,
	-108, 352, -38, -50, -101, -100, 312, -4, -10, 27,
	41, -40, -41, -42, 55, -60, -57, -54, -63, -465,
	87, -434, -71, -74, -76, -469, 117, 132, 176, 285,
	-92, -93, 319, 321, 133, -45, -44, 127, -154, -156,
	-105, -106, -146, -113, -114, -115, -116, -117, -118, -119,
	-120, -121, -122, -123, -124, -125, -126, -127, -128, -129,
	-130, -131, -132, -133, -134, -135, -136, -137, -138, -139,
	356, 403, 42, 366, 71, 120, 327, 21, -5, -6,
	-7, -8, -9, -11, -12, -25, -53, -55, -56, -58,
	-59, -67, -61, -62, -433, -72, -73, -75, -77, -78,
	318, -157, -155, 463, 416, -14, -19, -20, -15, -16,
	-18, -21, -17, -26, -31, -32, -28, -29, -27, -30,
	-33, -34, -35, -36, -23, -24, -13, -22, 434, 442,
	-160, -158, -159, -164, 340, 424, 380, 466, 466, 466,
	466, 466, 466, 466, 466, 466, 466, 466, 466, 466,
	466, 466, 466, 466, 466, 466, 466, -207, -212, -213,
	-214, -206, -182, -405, -408, 4, -403, -406, 138, 184,
	252, 21, 22, 23, 24, 25, 27, 38, 40, 39,
	41, 42, 45, 47, 48, 51, 52, 53, 54, 55,
	56, 59, 64, 69, 70, 71, 72, 73, 74, 80,
	77, 78, 79, 82, 84, 85, 86, 89, 90, 98,
	99, 100, 101, 102, 103, 107, 110, 109, 112, 115,
	116, 117, 119, 121, 122, 124, 126, 127, 130, 128,
	386, 129, 131, 132, 133, 134, 144, 145, 146, 148,
	149, 151, 153, 157, 158, 160, 164, 166, 167, 168,
	169, 175, 176, 178, 179, 180, 185, 181, 186, 190,
	193, 192, 194, 195, 196, 187, 201, 205, 206, 207,
	209, 210, 213, 214, 215, 216, 219, 218, 221, 224,
	225, 228, 229, 232, 233, 234, 236, 237, 240, 238,
	241, 239, 242, 245, 243, 244, 247, 248, 250, 249,
	254, 173, 258, 259, 261, 262, 263, 279, 266, 267,
	268, 271, 272, 275, 278, 280, 281, 282, 283, 284,
	285, 286, 288, 289, 291, 293, 295, 297, 298, 299,
	300, 301, 302, 304, 305, 307, 308, 309, 310, 311,
	312, 317, 314, 315, 316, 318, 319, 320, 321, 323,
	325, 326, 327, 328, 330, 332, 353, 354, 368, 333,
	334, 335, 336, 337, 338, 339, 343, 347, 344, 345,
	346, 341, 342, 348, 349, 350, 352, 355, 356, 358,
	359, 361, 362, 364, 365, 366, 367, 369, 372, 373,
	374, 370, 371, 379, 377, 378, 381, 382, 383, 384,
	385, 387, 389, 397, 398, 400, 403, 404, 405, 395,
	407, 408, 411, 412, 413, 414, 415, 420, 416, 418,
	421, 422, 423, 429, 428, 435, 436, 438, 439, 440,
	33, 43, 44, 46, 49, 60, 61, 62, 65, 104,
	105, 125, 135, 136, 147, 161, 163, 170, 171, 172,
	191, 197, 199, 203, 222, 256, 257, 273, 277, 290,
	292, 303, 329, 360, 375, 390, 391, 392, 393, 399,
	401, 424, 425, 426, 430, 437, 264, -200, 2, -182,
	-182, 293, 26, 2, 26, 289, 342, 382, 384, 2,
	-457, -252, 2, 26, -186, -182, 87, 159, 340, -200,
	2, -457, -252, 24, 2, -182, 2, -187, 2, 333,
	-182, 466, 82, 229, 64, 329, 349, -110, 398, -109,
	390, 335, -111, -395, 2, 245, -182, 466, 466, 466,
	380, 184, 100, 378, 466, 2, 380, 282, 428, 341,
	417, 100, 300, 184, -452, 2, 4, -406, -403, -216,
	-215, 380, 100, -214, -206, 456, -213, 466, 466, 466,
	2, 206, 207, 299, 298, 349, 350, 466, 466, 466,
	2, 25, 58, 81, 84, 106, 134, 154, 157, 269,
	-466, 237, 279, 297, 335, 348, 379, 387, 400, -470,
	367, 59, 417, -477, 405, 115, -298, 100, 384, 382,
	229, 158, 412, 325, 162, 410, 110, 190, 415, 414,
	466, 466, 25, 58, 67, 84, 115, 134, 154, 157,
	-468, 279, 297, 332, 335, 348, 379, 387, 405, 400,
	2, 428, 341, 380, 184, 100, 417, 325, 296, -81,
	2, 463, 29, 28, 352, -153, 380, 200, 2, -182,
	206, 207, 2, 466, 466, -452, 2, 206, 207, 2,
	200, 2, 59, 337, 466, 466, 466, 466, 466, 466,
	466, 466, 466, 466, 466, 466, 466, 466, 466, 466,
	466, 466, 466, 466, 466, 466, 466, 466, 466, 466,
	466, 2, -140, 349, 367, 168, 41, 64, 26, 69,
	283, 101, 160, 184, 185, 214, 81, 82, -300, 40,
	207, 206, -350, 381, 336, 342, 377, 398, 87, 418,
	326, 440, 300, 301, 128, 4, 100, 245, 351, 390,
	229, 73, -476, 2, 380, -480, 2, 398, 398, 2,
	-480, 2, -480, 2, -185, 2, 398, 394, -481, 398,
	437, 466, 466, 466, 466, 466, 466, 466, 466, 466,
	466, 466, 466, 466, -155, -157, -156, 466, 466, 466,
	466, 466, -140, 349, 2, 64, 26, -161, -162, 152,
	-246, -247, 409, 198, 123, 270, -154, -156, 2, -433,
	-393, 2, -325, -409, -327, 454, 455, 447, 251, 441,
	-338, 106, 410, 264, -408, -328, -340, 125, 329, -267,
	8, 9, 5, 6, 7, -189, -370, -334, -378, 402,
	137, 255, -219, 467, 10, 463, -430, -156, -339, 34,
	163, 57, -397, -218, -372, -380, -376, -377, -484, 47,
	53, 52, 387, 244, 343, 344, 361, 345, 346, 45,
	420, 181, 261, 263, 192, 4, 199, -217, -206, -427,
	-428, -403, -404, 191, 197, 193, 360, 194, 195, 196,
	44, 303, 148, 149, 147, 116, 105, 104, 257, 49,
	48, 46, 425, -381, 102, 390, 391, 392, 393, 209,
	210, -182, -405, 67, 92, 93, 91, 96, 95, 97,
	94, 351, 417, 58, 33, 170, 171, 203, 256, 172,
	65, -429, 371, 88, 156, 189, 174, 202, 204, 208,
	223, 226, 246, 253, 274, 276, 324, 357, -485, 426,
	135, 136, 277, 290, 375, 399, 401, 161, 222, 60,
	61, -435, 304, -436, -200, -435, 466, 466, 468, 466,
	-240, -241, -242, 2, 26, 113, 463, 2, -354, 2,
	461, -358, -156, 217, -357, 463, -355, -207, 265, -431,
	330, -427, -428, -189, -206, -218, 4, -243, 463, 465,
	100, 380, 68, -293, 463, -182, 26, 264, 394, 468,
	-336, 463, 264, 155, 267, -182, 2, 2, 353, 2,
	463, -110, 62, 398, 39, 349, -313, 2, -314, -179,
	-180, -181, -363, 205, 295, 302, 443, 440, -393, -462,
	155, 446, 394, -393, -268, 465, 2, 2, 2, 2,
	2, -358, 170, -207, 2, -204, -396, 4, -403, -406,
	-404, -407, 67, -405, 26, 28, 29, 30, 32, 34,
	35, 36, 37, 50, 57, 58, 63, 66, 68, 76,
	81, 87, 91, 92, 94, 93, 95, 96, 97, 106,
	108, 111, 113, 114, 118, 120, 123, 137, 139, 152,
	154, 155, 159, 162, 165, 177, 188, 198, 200, 217,
	220, 227, 230, 231, 251, 255, 260, 264, 265, 269,
	270, 287, 294, 306, 322, 340, 351, 363, 376, 380,
	388, 394, 396, 402, 409, 410, 417, 419, 427, 431,
	432, 433, 434, -408, 2, -358, 170, 2, -209, 170,
	-358, -212, 2, -401, 170, -399, 10, -398, 5, 4,
	-403, -406, -404, 2, -191, -182, 2, -203, -396, 2,
	-222, 170, -207, -208, -212, 394, 468, -258, -215, -216,
	-251, -182, 465, -325, 2, -99, 2, -325, 170, 2,
	-99, 170, 2, -325, 170, 2, -99, 170, 2, 2,
	2, 400, 2, 84, 170, -182, 380, 99, 2, 316,
	-467, 332, 404, 428, 2, 2, 2, 2, 2, 2,
	2, 380, 341, -478, 304, -196, 2, -182, 152, -401,
	170, 2, -401, 170, 2, -210, -212, -210, 184, 201,
	-191, 170, 2, 384, 382, 384, 382, 155, 2, 200,
	2, 200, 2, -359, 2, -360, -207, 2, 2, 2,
	2, 2, 170, -182, 380, 99, 2, 216, 2, 2,
	2, 2, 2, 2, 2, 2, 2, -260, 170, 2,
	-207, -260, 170, 2, -260, 170, 2, -299, 2, 76,
	-191, 170, 2, -402, 170, 2, -401, -402, 170, 2,
	-367, 2, -366, -398, 424, -81, 463, -81, 463, 349,
	463, -401, -207, -207, -325, -99, 155, -325, -99, -153,
	152, 2, 100, 380, -140, 2, 152, 419, 2, 8,
	2, -401, 336, 301, 144, 2, 353, 2, 64, -300,
	440, 155, 2, 155, 2, -283, 2, 434, -455, 2,
	264, 155, 2, 155, 2, 155, 2, 155, 2, 155,
	2, 298, 350, 207, 2, -99, 431, -325, 431, 2,
	397, 215, 129, 155, -283, 2, 155, 2, 155, 2,
	5, 2, 205, 295, 368, 2, -207, -471, 2, 380,
	428, 341, 2, 2, 77, 78, 155, 2, 155, 2,
	155, 440, 2, -276, -358, -312, -313, -312, 394, -187,
	-161, -246, -247, -140, 353, 2, -261, 258, 414, 248,
	355, 213, -161, -275, -302, -303, 227, 139, 260, -282,
	26, 113, -282, -282, 51, 464, 464, 11, 12, 66,
	38, 454, 455, 456, 457, 150, 458, 459, 452, 453,
	451, 444, 445, 449, 211, 212, 83, 448, 446, 75,
	235, 331, 140, 141, 142, 143, 313, 182, 31, 183,
	14, 15, 16, 30, 269, 226, 441, 174, 357, 447,
	17, 18, 19, 202, 204, 253, 43, 177, -188, -224,
	-325, -325, -325, -325, -325, 276, 463, -273, -320, 461,
	-156, 463, 463, 463, 5, 463, 5, -392, 8, -156,
	-325, -338, 464, -265, 463, -156, -338, -333, 463, 329,
	461, 463, -341, -325, 465, -437, 435, -374, 463, 292,
	-373, 463, -373, -373, 429, -371, 463, 442, 436, 463,
	-371, 463, 463, 152, 463, 463, 463, 463, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 429, 463, 463,
	463, 463, 463, 463, 463, 463, 463, 468, -435, -243,
	463, -269, -361, -325, 456, -269, -269, 264, -262, -325,
	88, -286, 208, 246, 156, 223, 324, 189, -392, -82,
	-68, -79, -87, -99, -112, -144, -145, -322, 467, -349,
	442, -156, -355, -206, -156, -357, 463, -354, -349, 456,
	-207, 463, 155, 463, 465, 155, -251, -396, -191, -207,
	-217, -218, 112, -262, -452, -251, -186, 35, -335, -368,
	-369, -370, -379, -375, -378, -382, 47, 53, 52, 387,
	244, 343, 344, 361, 345, 346, 45, 420, 181, 261,
	263, 192, 4, 46, 425, -381, 199, 308, 309, 307,
	311, 310, 191, 197, 193, 360, 194, 195, 196, 44,
	303, 148, 149, 147, 116, 105, 104, 257, 49, 48,
	102, 390, 391, 392, 393, 209, 210, 426, 371, 60,
	61, -452, -251, 152, -395, -262, 35, -313, 2, 106,
	-399, 39, -482, 468, 225, -226, 234, 250, 167, 265,
	438, 258, -400, 5, 4, -334, -346, 106, 229, -378,
	-386, -388, 8, -387, 9, -389, 454, 455, -394, -393,
	90, 465, -396, -168, 314, -167, 23, 27, 117, 422,
	130, -233, 186, 282, 125, 364, 413, -459, -460, 334,
	385, 386, 79, 258, 314, 125, -279, -281, 35, 98,
	248, 278, 54, 179, 239, 240, 366, 430, 125, 314,
	434, 125, -460, 314, -460, -170, 364, 413, -459, -460,
	334, 314, -169, -233, 125, 467, -96, -401, 463, -258,
	468, 468, -396, 456, 125, 125, 125, 125, 2, 2,
	251, 2, 2, 2, 157, -470, -468, 2, 2, 2,
	-207, 170, -209, 170, 2, -212, 428, -245, 264, -454,
	-259, 380, -207, -178, -432, 434, 251, 251, 35, 463,
	2, -299, 2, 184, -432, 251, -359, -220, -207, -220,
	352, -200, 35, -322, 125, 2, 2, 2, -182, -171,
	468, 56, 320, 125, -171, 125, -171, 125, -223, 170,
	-222, -171, 125, 468, 125, 125, 464, 468, -367, -367,
	-401, -151, 434, 155, 87, 463, 463, -153, -97, -96,
	-401, -454, -191, 2, -207, 2, 380, 209, -401, -401,
	-401, -395, 26, 354, 2, 298, 350, 78, -207, 380,
	100, 184, 70, -456, 152, -453, 325, -452, -207, 100,
	-207, 100, -207, 100, -207, -207, 2, 2, 2, 2,
	74, 74, 152, 2, 397, 2, 397, 2, -182, -182,
	-182, 225, -207, 152, 380, 184, 380, 184, 100, 380,
	-171, 468, -187, -161, -275, -395, -163, 359, 254, -260,
	213, 355, -161, -303, -302, 26, -325, -307, 146, 247,
	-325, -305, -327, 454, 455, -387, -389, -155, -155, -155,
	-248, -351, -325, 294, 184, -383, -368, -368, -205, -396,
	390, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, -325, -325, -325, -325, -325,
	-325, -325, -325, -325, -325, -325, 226, 174, 357, 43,
	177, -325, 394, -325, -325, -325, -325, 243, 251, 255,
	402, 137, 411, 113, 258, -486, 376, 37, -331, -156,
	-266, 463, -345, 32, 363, 26, -338, 463, 2, -320,
	-325, -321, -263, -262, -262, 464, 427, 26, 113, 456,
	2, 8, -294, -296, 439, 242, 103, 169, 241, -295,
	339, 464, 468, 35, 464, -325, -263, -337, -333, -262,
	-344, -343, 431, -396, 456, -438, 145, 162, 8, -390,
	8, -390, 390, 390, 8, -390, -390, 463, 464, 2,
	464, 2, 464, 2, 464, 2, 464, 2, -325, -325,
	-325, -325, -325, -325, -325, -262, -288, 2, -384, -262,
	4, 439, 242, 103, 169, 241, 339, -288, 2, -289,
	2, -325, -262, -290, -326, -327, 454, 455, 447, -338,
	-291, 2, -325, -263, -325, 50, 220, 396, -292, -325,
	155, -262, -262, 2, -262, 2, -436, 35, -262, -254,
	468, 155, 35, 4, -254, -254, 463, 464, 468, -287,
	166, 238, 233, -287, -354, -286, 208, -284, 274, -284,
	-284, -450, 463, 462, 466, 466, 466, 466, 466, -349,
	-192, 461, 469, -396, -348, -347, 35, -200, 271, -349,
	-349, 465, 464, -348, -207, 463, -262, -396, 369, 464,
	465, 202, 202, 202, 330, 464, 394, 434, -81, 266,
	464, 468, -253, 34, 461, -296, 463, -385, 429, 463,
	463, 155, -252, -462, 464, 398, -314, -225, 302, 362,
	315, 347, 378, 8, 9, 8, 9, 468, -396, 468,
	-463, 81, 394, 68, -316, 170, 68, -410, -194, 81,
	-411, -182, 63, 410, 294, 154, 124, -463, 81, -463,
	81, 81, 352, 367, 51, -358, 38, 38, 26, -99,
	221, 155, 440, 380, 184, 394, -358, -281, -368, 98,
	239, 240, 51, -391, -386, 454, 455, -391, 51, -391,
	-391, -391, 434, -209, -358, 394, 284, -401, 394, 468,
	38, 38, 26, -99, 221, 155, 394, -222, -192, -364,
	-363, -402, -215, -182, 465, -325, -99, -325, -99, 125,
	2, -478, 216, 463, -229, 251, -280, -279, 251, -211,
	2, -207, 155, -251, -365, 200, 468, -259, 284, 125,
	125, 463, 121, 300, 2, -193, 170, -183, -182, -299,
	-174, 383, 125, -278, 419, -308, -99, 463, 106, 35,
	-308, -270, -271, -362, -272, -194, 463, -200, -182, 2,
	-207, -260, -260, -260, -171, 468, 125, -191, -401, -402,
	-402, -81, -366, 464, 464, 464, -150, 268, -149, -182,
	5, -153, 419, -228, -317, -316, -414, -415, -410, 226,
	184, 410, 201, 138, -244, -195, -194, 99, -151, -363,
	468, -151, -151, -364, -364, -207, 152, 2, 2, -283,
	-207, -191, -222, -207, -251, -251, -191, -191, -191, -99,
	-325, 349, 152, 152, 465, -283, 300, 100, 380, 282,
	184, -207, -222, -207, -222, -191, -207, -358, -161, 232,
	414, -305, -306, -327, 329, 330, -306, 329, 330, 8,
	9, 8, 9, 468, -166, 36, 111, 213, -207, 440,
	122, -325, -325, 394, -486, 376, -331, 122, -325, 243,
	255, 402, 137, 411, 113, 258, 155, 463, -326, -326,
	464, -264, -325, -325, 462, 471, 464, -247, 468, -246,
	-325, -262, -262, 464, 464, 394, 394, 394, 394, 463,
	465, -262, -251, 462, 462, 468, 464, -342, -343, 118,
	-325, 465, -443, 275, 463, 463, 464, 464, 468, 464,
	440, 440, 464, 464, 464, -325, 35, 468, 468, 468,
	464, 468, 468, 468, 464, 464, 155, 464, 464, -297,
	287, 464, 11, 12, 454, 455, 456, 457, 150, 458,
	459, 452, 453, 451, 444, 445, 446, 75, 235, 331,
	14, 15, 16, 202, 177, -326, -326, -326, 464, -329,
	-330, 155, 152, 35, -292, -292, -292, 464, 155, -262,
	464, 464, 463, 464, -319, -318, 432, -361, -255, 2,
	-354, -202, -396, -319, -319, -262, -325, 208, 208, -285,
	419, 264, -287, -354, -347, 464, -451, -392, -349, -348,
	-392, -324, -323, 153, 36, 111, 249, 173, -200, -243,
	-348, -348, -396, -349, 464, -256, -356, -431, -247, 465,
	-396, -141, 5, 255, -141, -141, -251, 24, 288, -368,
	461, 462, 8, 8, 463, -390, -390, -251, 155, -393,
	-313, 408, 72, 302, 390, -393, -167, 314, -194, -194,
	-207, 251, -316, 170, -173, 251, -368, -201, -182, 463,
	463, 213, 213, 419, -194, -201, 170, -194, 170, -201,
	-201, -458, 302, 259, -325, 228, 300, 252, -168, 314,
	-99, -99, -99, 463, -462, 419, 112, -207, -222, -207,
	-211, 314, -217, -391, -391, -279, 314, -209, -401, 434,
	-191, -169, -99, -99, -99, 463, -192, -170, 314, -148,
	180, 464, 456, -182, 428, -182, -227, -230, -228, -194,
	-472, 436, 434, 125, 125, -243, -221, -207, 461, -151,
	-401, -207, -401, -401, -401, 2, 463, 2, 264, 251,
	-193, 170, -175, 119, -483, 446, -191, -319, -255, -277,
	-311, 322, 264, -244, 424, -200, -277, -257, 468, 155,
	446, 465, -244, 2, -171, -171, -171, -222, -223, -171,
	-81, -81, -151, 468, 463, 446, 446, 463, -401, -401,
	464, 468, -207, -193, 184, 184, -199, -183, 464, 468,
	465, 463, -151, -96, 155, -46, 434, 380, 467, 349,
	349, -182, -203, -191, -207, -204, -222, 152, 152, -306,
	265, -351, -207, 467, -325, -325, 122, 122, -325, -326,
	-326, -325, 122, 155, 463, -325, -335, 30, 30, 464,
	468, -321, -325, 464, 427, -247, -247, 464, 5, 242,
	169, 241, -295, 241, -295, -295, 8, 456, -396, 464,
	-333, 120, -325, 388, -396, 456, -444, -197, 463, -182,
	432, -246, -390, -371, -371, 464, -383, -368, -325, -325,
	-325, -325, -325, -325, -329, -325, -383, -368, -326, -326,
	-326, -326, -326, -326, -326, -326, -326, -326, -326, -326,
	-326, -326, -326, -326, -326, -326, -326, 113, 251, 258,
	-326, -330, -329, -325, -325, -368, 464, 464, 464, -262,
	-81, -274, 162, -325, -364, 468, -274, -274, 464, -354,
	-354, 463, -325, 208, 462, 464, 468, -348, 462, 468,
	470, 446, -243, 465, -347, 464, 468, -310, 35, 464,
	-396, 267, 5, 8, 461, 462, 464, -390, 464, 464,
	-251, -325, 394, 394, 125, 251, 421, -416, -411, 124,
	-325, -249, -352, -325, 463, 463, 2, -165, 117, 352,
	-464, 2, 125, -171, 125, -171, 438, 463, 463, 394,
	434, -262, -325, -152, 106, -395, -460, 467, -460, 467,
	394, 394, 284, 434, -262, 394, -151, 155, 2, 2,
	2, 464, 464, 468, -417, 35, 262, -182, -207, -209,
	35, -64, 434, -363, -392, -178, 2, -207, 125, 264,
	251, -176, 219, -483, -399, -432, -247, -277, -269, 252,
	80, 464, -319, -271, -255, -325, 2, 464, -171, -149,
	-150, -401, -401, -401, -151, -153, -153, -317, 2, 463,
	-193, -183, 463, -153, -195, 2, -402, -99, 268, -207,
	456, -283, -235, -234, 282, 258, -235, 329, 329, 265,
	-166, -192, -325, -325, 122, 30, 30, -325, -325, -335,
	464, -325, -325, -262, 462, 5, -325, 464, 464, 464,
	-325, 465, -445, -182, -325, 464, 464, 464, 464, 468,
	468, 464, 464, 464, 464, -330, 155, 113, 258, 463,
	464, 464, -332, 165, 51, -354, -332, -332, -285, -251,
	-354, -322, -392, -323, -192, 461, -396, -356, 463, 465,
	462, 2, 461, 464, -194, -194, -316, 125, -418, 81,
	-420, 66, 138, 87, 251, 255, 410, 294, 63, 106,
	306, 35, 464, 464, 468, -166, -249, -251, 251, 373,
	106, 251, 106, 99, 405, -194, -201, -251, -251, -207,
	131, 464, 468, 446, 2, 456, 456, -211, -209, -401,
	131, 464, -192, -402, -231, 187, -194, -415, -412, -413,
	294, -419, -421, 138, 294, -99, 2, 463, -229, -280,
	-99, 268, 462, -301, 419, -192, -207, 125, -177, 218,
	-483, -399, -174, -304, -302, -309, 463, 264, -99, -247,
	446, 464, 464, 99, 99, -249, 463, 463, -251, 99,
	464, -47, -48, 184, 81, 286, -204, 380, 184, 463,
	463, -166, -325, -325, -325, 464, -247, -396, 456, -439,
	282, 464, -325, -325, -326, 155, 463, -335, -440, 433,
	-325, -262, -440, -440, 464, -349, -392, 2, 461, 2,
	-316, -201, -205, -198, -182, 138, 170, 255, 213, 463,
	-326, -207, 463, 2, -474, 108, 188, -315, -475, 86,
	374, 178, -352, 464, 464, 255, 255, -325, -368, -171,
	-171, 464, 464, -325, 394, -395, 85, -393, 2, -460,
	-325, 394, -232, -233, 177, -417, 213, -198, 213, -473,
	434, -227, -472, -65, -66, 395, -363, 463, -182, 264,
	463, -192, -483, -399, -175, -277, 114, -251, 81, -304,
	-331, -151, 463, 463, 464, -249, -249, 464, 463, -151,
	468, 26, 463, 26, 463, -207, -222, -262, -262, 464,
	-247, 51, 464, 464, -326, -335, 464, -441, -442, -197,
	-348, 462, 2, -420, -198, 251, -325, -184, 463, -325,
	188, 109, 175, -231, 463, 306, -190, 66, 463, 463,
	463, 446, 155, 463, -472, 280, 463, 99, 248, 464,
	35, -66, 9, -249, -207, -249, 264, -399, -176, 414,
	252, 464, -201, -277, -402, -402, -315, 464, 464, -402,
	-48, -251, -251, 464, 464, -446, 300, 330, 164, -262,
	464, 468, 35, 125, 464, -422, 236, -182, 464, 109,
	175, -232, -251, -207, -461, 419, -205, -237, -236, -234,
	-239, -238, -234, -262, -393, 85, 280, -262, -207, -250,
	-353, -194, 99, -231, -99, 464, -301, 464, -207, -177,
	352, -318, 464, 464, -231, -315, 464, 464, 464, 464,
	-447, -448, 43, 407, 90, -325, -447, -447, -442, -444,
	138, -423, -426, -425, 264, 358, 156, 281, 464, 373,
	430, -474, 464, -243, -325, 464, 468, 424, 464, 468,
	424, 464, 155, 464, 463, 464, 468, -232, -473, -315,
	463, -315, 463, -270, -151, -151, -232, -231, -151, -449,
	124, -448, 291, 151, 329, 291, 151, -449, -449, -198,
	-425, 264, -426, 264, 414, 110, -422, -236, 177, -238,
	155, 280, -251, -353, -472, -231, -249, -231, -249, -319,
	-232, 90, 162, 389, 248, 30, -424, 248, 320, 56,
	352, -424, -423, 463, 463, 464, -232, 464, -232, 464,
	329, 272, -448, 22, 255, 106, -474, -262, -262, -172,
	56, 320, -479, 432, -315, -479, -315, 464, 464, 2,
	-231, -231, -232, 394, -232, -232, 463, -479, -479, -262,
	464, -232,
}
var sqlDef = [...]int{

	-2, -2, 1, 2, 3, 4, 5, 6, 8, 10,
	12, 14, 16, 18, 20, 22, 23, 24, 369, 370,
	372, 373, 374, 376, 377, 379, 381, 383, 385, 386,
	388, 390, 392, 393, 394, 395, 396, 398, 400, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 458,
	460, 0, 935, 937, 939, 941, 0, 26, 27, 0,
	0, 191, 193, 195, 0, 219, 221, 223, 224, 226,
	-2, 0, 321, 322, 324, 326, -2, -2, 0, 0,
	447, 449, 0, 0, 0, 469, 470, 0, 1025, -2,
	463, 465, 467, 532, 534, 536, 538, 540, 542, 544,
	545, 547, 549, 551, 553, 555, 557, 559, 560, 562,
	564, 566, 568, 570, 572, 574, 576, 578, 580, 582,
	-2, -2, -2, 0, -2, -2, -2, 953, 30, 32,
	34, 36, 38, 40, 42, 62, 275, 276, 278, 280,
	282, 285, 286, 288, 1073, 328, 330, 332, 334, 336,
	0, -2, 1085, 0, 0, 44, 45, 46, 47, 48,
	49, 50, 51, 69, 70, 71, 72, 73, 74, 75,
	76, 55, 57, 58, 64, 65, 67, 53, 0, 0,
	1049, 1051, 1053, 1055, -2, 0, 0, 7, 9, 11,
	13, 15, 17, 19, 21, 371, 375, 378, 380, 382,
	384, 387, 389, 391, 397, 399, 401, 831, 1689, 1703,
	1704, 1705, 1708, 1709, 1710, 1711, 1712, 1713, 2054, 2135,
	2136, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740,
	1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750,
	1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760,
	1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770,
	1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780,
	1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790,
	1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810,
	1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820,
	1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830,
	1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840,
	1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850,
	1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860,
	1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870,
	1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879, 1880,
	1881, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1890,
	1891, 1892, 1893, 1894, 1895, 1896, 1897, 1898, 1899, 1900,
	1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1910,
	1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920,
	1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930,
	1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940,
	1941, 1942, 1943, 1944, 1945, 1946, 1947, 1948, 1949, 1950,
	1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960,
	1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1969, 1970,
	1971, 1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980,
	1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990,
	1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
	2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
	2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020,
	2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030,
	2031, 2032, 2033, 2034, 2035, 2036, 0, 425, 423, 1683,
	426, 1886, 428, 430, 315, 316, 317, 318, 319, 320,
	0, 440, 434, 439, 441, 443, 444, 445, 446, 420,
	418, 0, 440, 1735, 438, 933, 934, 928, 929, 1920,
	963, 459, -2, -2, -2, 2023, -2, 491, -2, 498,
	2026, 1922, 503, 0, 505, -2, 508, 936, 938, 940,
	0, 0, 0, 0, 28, 29, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 155, -2, -2, -2, -2,
	0, 0, 1772, 1652, 1705, 1655, 1650, 192, 194, 196,
	197, 0, 0, 0, 0, 0, 0, 220, 222, 225,
	227, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	252, 0, 0, 0, 0, 0, 0, 0, 0, 884,
	0, 0, 0, 0, 0, 0, 0, 0, 736, 737,
	0, 0, 742, 879, 880, 903, 0, 0, 0, 0,
	323, 325, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	327, 0, 0, 0, -2, 0, 0, 0, 253, 361,
	362, 0, 1074, 1074, 0, 0, 0, 0, 172, 163,
	0, 0, 725, 448, 450, 0, 158, 0, 0, 932,
	0, 174, 0, 0, 464, 466, 468, 533, 535, 537,
	539, 541, 543, 546, 548, 550, 552, 554, 556, 558,
	561, 563, 565, 567, 569, 571, 573, 575, 577, 579,
	581, 583, 588, 0, 0, 0, 0, -2, -2, 0,
	0, -2, -2, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, -2, -2, -2, 0, 0, 0, -2,
	-2, 0, 0, 0, 0, 591, 593, 594, 595, 0,
	643, 660, 0, 870, 1075, 965, 943, 956, 965, 945,
	946, 947, 948, 949, 954, 955, 958, 0, 950, 951,
	952, 31, 33, 35, 37, 39, 41, 43, 277, 279,
	281, 283, 287, 289, -2, 1047, 1048, 329, 331, 333,
	335, 337, 451, 0, 453, 0, 592, 1029, 1037, 0,
	-2, 0, 1079, 1079, 1079, 0, 0, 1048, 1046, 0,
	456, 457, 512, 513, 1310, 0, 0, 0, 0, 0,
	1550, 1394, 0, 514, -2, 1425, 1427, 2002, 2023, 1549,
	1429, 1430, 1431, 1432, 1433, 0, 0, 1436, 0, 1438,
	1439, 1440, 1441, 0, 1443, 0, 1447, 1448, 1449, 0,
	2007, 1629, 1701, -2, 1215, 1216, 1217, 1218, 1219, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, 1697, 0, 1516,
	1463, -2, 1722, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, 1781, -2, -2, -2, -2,
	-2, -2, -2, 1271, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, 2037, 1467, 1468, 1469, 1470, 1471, 1472,
	1473, 1474, 1475, 0, 1991, 2008, 2009, 2014, 2016, 2010,
	1999, 1486, -2, 2038, 2039, 2040, 2041, 2042, 2043, 2044,
	2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 1272, -2,
	2003, 2004, 2019, 2020, 2025, 2030, 2031, 2006, 2015, -2,
	-2, 1065, 1894, 1068, 831, 1066, 1050, 1052, 0, 1054,
	0, 0, 0, 1059, 1082, 1080, 0, 1116, 1063, 1064,
	1074, 1134, 1157, 0, 1139, 0, 1157, 1183, 0, 1144,
	1915, 1464, 1465, 0, 1705, 1702, -2, 0, 0, 0,
	0, 0, 0, 421, 0, 427, 429, 0, 0, 0,
	0, 0, 0, 0, 0, 962, 461, 462, 0, 486,
	0, 490, 1998, -2, 1740, 1935, -2, 494, 966, 970,
	971, 972, 973, 0, 0, 0, 0, 0, 500, 0,
	0, 487, 488, 506, 509, 0, 584, 585, 586, 587,
	52, 0, 2008, 1183, 54, 0, 1673, 1727, 1728, 1729,
	1730, 1731, 2037, 2053, 2055, 2056, 2057, 2058, 2059, 2060,
	2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070,
	2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080,
	2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090,
	2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099, 2100,
	2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109, 2110,
	2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2119, 2120,
	2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130,
	2131, 2132, 2133, 2134, 56, 0, 2008, 59, 0, 2008,
	0, -2, 63, 0, 2008, 175, 176, 1718, 1719, 1723,
	1724, 1725, 1726, 66, 0, 1679, 68, 0, 1676, 77,
	0, 2008, 0, 1649, -2, 0, 0, 717, 1646, 1651,
	718, 1656, 0, 198, 199, 200, 201, 202, 2008, 204,
	205, 0, 207, 208, 2008, 210, 211, 0, 213, 228,
	229, 0, 231, 0, 2008, 0, 0, 0, 237, -2,
	254, 0, 251, 0, 241, 242, 244, 245, 246, 247,
	248, 0, 0, 0, 885, 293, 291, 1684, 0, -2,
	2008, 873, 876, 2008, 878, 890, 1687, 0, -2, 0,
	1072, 2008, 980, 738, 739, 740, 741, 0, 312, 0,
	993, 0, 995, 0, 1015, 1189, 1134, 255, 256, 257,
	258, 259, 2008, 0, 0, 0, 264, 0, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 151, 2008, 340,
	359, 151, 2008, 343, 151, 2008, 346, 0, 349, 901,
	151, 2008, 352, 353, 2008, 355, 177, 356, 2008, 358,
	0, -2, 414, 1691, -2, 364, 0, 365, 0, -2,
	0, 189, 0, 0, 723, 724, 0, 930, 931, 0,
	0, 471, 0, 0, 589, 590, 0, 0, 600, 601,
	602, 603, 1923, 1892, 1797, 607, 0, 610, -2, 0,
	0, 0, 614, 0, 619, 620, 621, 0, 722, 623,
	0, 0, 625, 0, 629, 0, 632, 0, 634, 0,
	636, -2, -2, -2, 647, -2, 0, 651, 0, 653,
	0, 0, 0, 0, 668, 669, 0, 674, 0, 677,
	678, 679, 0, 681, 682, 683, 684, 0, 686, 687,
	-2, -2, 691, 693, 0, 700, 0, 704, 0, 708,
	0, 596, 597, 151, 1187, 942, -2, 944, 0, 960,
	1032, -2, 0, 452, 0, 455, 1043, 0, 1039, 0,
	1041, 0, 1030, 1035, 1094, 1095, 0, 0, 0, 0,
	1077, 1078, 0, 0, 0, 1027, 1028, 0, 0, 0,
	0, 1555, 1556, 1557, 1558, 1559, 1560, 1563, 1564, 1561,
	1562, 1565, 1566, 0, 0, 0, 0, 0, 1567, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1568, 1569, 1570, 0, 0, 1572, 0, 1574, 0, 0,
	0, 0, 0, 0, 1373, 1375, 1637, 0, 0, 1571,
	1315, 1316, 1317, 1352, 1353, 0, 0, 1426, 1634, 1633,
	1428, 0, 1586, 0, 1435, 0, 1307, 1442, 1670, -2,
	0, 1550, 1581, 0, 0, 1450, 1451, 1452, 0, 0,
	1586, 0, 0, 1628, 0, 1518, 0, 1251, 0, 1252,
	1253, 0, 1254, 1255, 1268, 1281, 0, 0, 0, 0,
	1285, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1273, 0, 0,
	0, 1609, -2, 0, 0, 0, 0, 0, 1067, 0,
	0, 1120, 1638, 1642, 1643, 1120, 1120, 0, 0, 1587,
	1180, 1180, 0, 0, 1176, 1176, 1176, 1174, 1151, 0,
	402, 404, 406, 408, 409, 410, 412, 1157, 0, 1167,
	0, 1157, 1157, 0, -2, 1139, 0, 0, 1167, 1184,
	1185, 0, 0, 0, 0, 0, 0, 1706, 0, 0,
	0, 1693, 0, 0, 0, 432, 442, 1074, 0, 1589,
	1205, 1208, 1209, 1210, 1211, 1214, 1220, 1221, 1222, 1223,
	1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233,
	1234, 1235, 1236, -2, 1269, 1271, 1292, 1258, 1259, 1260,
	1261, 1262, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
	1248, 1249, 1250, 1264, 0, 1239, 1239, 1239, 1256, 1257,
	1280, 1291, 1283, 1291, 1287, 1206, 1207, 1274, 1275, 1276,
	1277, 0, 436, 0, 0, 0, 0, -2, 496, 501,
	502, 0, 0, 968, 0, 974, 523, 524, 525, 976,
	977, 0, 499, 526, 527, 528, 529, 530, 531, 0,
	1658, 1659, 1660, 1661, 1664, 1665, 0, 0, 497, 516,
	504, 0, 510, 78, 925, 117, 0, 925, 925, 0,
	0, 138, 0, 0, 0, 0, 0, 0, 102, 113,
	90, 91, 0, 0, 0, 0, 60, 853, 0, 856,
	0, 0, 0, 0, 0, 0, 0, 868, 0, 0,
	0, 0, 101, 0, 96, 80, 0, 0, 0, 103,
	115, 0, 142, 144, 0, 0, 1170, 159, 0, 716,
	0, 0, 1706, 1654, 0, 0, 0, 0, 230, 232,
	0, 234, 235, 236, 0, 884, 0, 243, 240, 284,
	804, 2008, 852, 2008, 850, 1688, 0, 0, 0, 310,
	305, 0, 307, 871, 0, 1071, 0, 0, 0, 0,
	891, 1715, 896, 902, 982, 0, 314, 0, 996, 0,
	0, 1190, 0, 1192, 0, 261, 262, 263, 0, 338,
	0, 149, 150, 0, 341, 0, 344, 0, 151, 2008,
	1644, 350, 0, 0, 0, 0, 1074, 0, 0, 0,
	0, 165, 0, 0, 0, 0, 0, 0, 189, 161,
	189, 189, 1170, 473, 1170, 475, 0, 0, 604, 605,
	606, 608, 609, 611, 612, -2, -2, 701, 671, 0,
	0, 0, 670, 622, 0, 710, 1911, 720, 624, 1772,
	627, 1772, 630, 1772, 633, 635, 638, 663, 646, 650,
	0, 0, 0, 655, 0, 657, 0, 659, 671, 672,
	675, 680, 685, 0, 0, 0, 0, 0, 0, 0,
	869, 0, 959, 1033, 1035, 454, 1036, 0, 1045, 1038,
	0, 1042, 1031, 1092, 1093, 1098, 1099, 0, 1109, 1110,
	1102, 0, -2, 0, 0, 1105, 1106, 1060, 1061, 1062,
	1086, 1087, 912, 0, 2135, 1311, 1200, 1312, 1313, 1672,
	0, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326,
	1327, -2, -2, -2, -2, -2, -2, -2, -2, 1336,
	1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346,
	-2, -2, -2, 1350, 1351, -2, 1573, 1575, 0, 1637,
	0, -2, 0, -2, -2, -2, -2, 1370, 0, 1372,
	1377, 1379, 1381, 0, 0, 0, 0, 1636, 1391, 1620,
	1621, 0, 0, 1552, 1553, 1554, 1376, 0, 1395, 1635,
	1632, 0, 0, 1585, 1085, 1454, 0, 0, 0, 0,
	1461, 0, 1671, 1306, 1293, 1294, 1295, 1296, 1297, 1298,
	1308, 1446, 1583, 0, 1582, 0, 0, 0, 1593, 0,
	1627, 1623, 0, 1694, 1700, 1526, 0, 0, 0, 0,
	1668, 0, 0, 0, 0, 0, 0, 0, 1487, 1488,
	1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1498, 0, 1596,
	-2, -2, -2, -2, -2, -2, -2, 0, 1500, 0,
	1502, 1587, 1606, 0, 0, 1396, 0, 0, 0, 1550,
	0, 1505, 1587, 1614, 0, 0, 0, 0, 0, 1587,
	0, 1619, 0, 1512, 0, 1514, 1069, 0, 0, 1195,
	0, 0, 0, 1641, 1195, 1195, 0, 1115, 0, 0,
	1177, 1178, 1179, 0, 0, 1180, 0, 1171, 1175, 1172,
	1173, 0, 0, 1157, 403, 405, 407, 411, 413, 1167,
	1131, 0, 0, 1674, 1137, 1166, 0, 831, 1156, 1167,
	1167, 0, -2, 1141, 0, 0, 1085, -2, 190, 830,
	0, 0, 0, 0, 422, 424, 0, 0, 416, 0,
	419, 0, 1196, 1199, 0, 1212, 0, 0, -2, 0,
	0, 0, 0, 0, 489, 0, 967, 975, 0, 520,
	0, 522, 0, 1662, 1666, 1663, 1667, 0, 511, 0,
	0, 0, 0, 924, 121, 2008, 0, 153, 0, 0,
	797, 1680, 0, 0, 0, 0, 1786, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 92,
	0, 0, 0, 0, 0, 0, 0, 854, 855, 857,
	863, 865, 0, 859, 1669, 0, 0, 860, 0, 862,
	864, 866, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 93, 0, 0, 0, 0, 1648, 180,
	1169, 0, 1647, 1657, 0, 203, 206, 209, 212, 0,
	238, 0, 0, 745, 728, 0, 848, 851, 0, 831,
	883, 1686, 0, 292, 189, 0, 0, 306, 0, 0,
	0, 0, 0, 0, 889, 0, 2008, 1675, 1714, 1715,
	984, 990, 0, 1195, 0, 1013, 998, 0, 0, 0,
	1013, 1017, 1018, 1020, 1021, 0, 0, 1191, 0, 265,
	360, 151, 151, 151, 347, 0, 0, 151, 178, 354,
	357, 363, 415, 1074, 1074, 189, 187, 1871, 185, 182,
	184, 0, 0, 0, 746, 748, 749, 750, 751, 0,
	1715, 0, 1827, 1715, 0, 1001, 1003, 0, 156, 189,
	0, 0, 304, 472, 477, 598, 0, 640, 665, 613,
	615, 616, 617, 0, 721, 719, 626, 628, 631, 649,
	652, 654, 0, 0, 0, 667, 0, 0, 0, 0,
	0, 0, 0, 705, 706, 707, 709, 1188, 1034, 1044,
	1040, 0, 0, 1104, -2, -2, 1103, 1107, 1108, -2,
	-2, -2, -2, 0, 1089, 910, 911, 0, 0, 0,
	0, -2, -2, 0, 0, 0, 1392, 0, -2, 1371,
	1374, 1378, 1380, 1382, 0, 0, 0, 0, 0, 0,
	1576, 0, 1578, 1393, 1630, 1633, 1548, 0, 0, 1084,
	1085, 1085, 0, 1460, 0, 0, 0, 0, 0, 0,
	0, 1584, 0, 1591, 1592, 0, 1453, 0, 1624, 0,
	0, 0, 1462, 0, 0, 0, 1263, 1237, 0, 1291,
	1289, 1290, 1284, 1291, 1288, 0, 0, 0, 0, 0,
	1481, 0, 0, 0, 1485, 1497, 0, 1499, 1501, 0,
	0, 1503, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1399, 1400, 1401, 1504, 1612,
	1613, 0, 0, 0, 0, 0, 0, 1510, 0, 1618,
	1511, 1513, 1074, 1117, 1112, 1194, 0, 1639, 1170, 1119,
	1121, 1640, 1677, 1112, 1112, 0, 1588, 0, 0, 1161,
	0, 0, 0, 1163, 0, 1152, 0, 1154, 1167, 1136,
	0, 0, 1129, 0, 1125, 1126, 1127, 1128, 831, 1165,
	1138, 1142, 1694, 0, 1186, 0, 1146, 1149, 0, 0,
	1707, 214, 217, 218, 215, 216, 431, 0, 0, 1590,
	0, 1201, 0, 0, 0, 0, 0, 435, 0, 485,
	-2, 518, 519, 521, 0, 517, 118, 925, 0, 0,
	916, 0, 123, 2008, 132, 0, 774, 0, 1678, 0,
	0, 0, 0, 0, 927, 0, 2008, 151, 2008, 151,
	134, 137, 0, 141, 139, 0, 0, 765, 79, 925,
	82, 86, 94, 0, 0, 0, 100, 0, 0, 0,
	918, 0, 858, 861, 867, 61, 0, 920, 914, 0,
	913, 143, 84, 88, 95, 0, 922, 81, 0, 189,
	0, 160, 1653, 0, 0, 0, 0, 0, 744, 815,
	0, 0, 0, 0, 0, 0, 298, 294, 0, 303,
	309, 308, 874, -2, 877, 886, 0, 888, 0, 0,
	0, 2008, 986, 990, 0, 989, 1072, 1085, 313, 991,
	1013, 0, 0, 0, 1000, 997, 994, 1195, 0, 0,
	0, 0, 0, 260, 339, 342, 345, 1645, 151, 351,
	366, 367, 164, 0, 0, 0, 0, 0, 189, 0,
	0, 0, 0, 0, 1715, 1715, 0, 1682, 0, 0,
	0, 0, 157, 162, 0, 474, 0, 0, 0, 656,
	658, 671, 694, 695, 760, 0, 760, 0, 0, 0,
	1101, 1088, 912, 0, 1314, 1355, 0, 0, -2, 0,
	0, 1359, 0, 0, 0, -2, 0, 0, 0, 1577,
	1579, 0, 1632, 1455, 0, 0, 0, 1459, 1437, 1299,
	1300, 1301, 1302, 1303, 1304, 1305, 0, 1444, 1445, 1551,
	1594, 1622, 1626, 0, 1695, 1699, 1524, 1525, 1529, 1685,
	0, 0, 0, 1282, 1286, 1466, 0, 0, 0, 0,
	0, 0, 0, 1595, 1605, 1607, 1397, 1398, 1402, 1403,
	1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, -2, -2,
	-2, 1415, 1416, 1417, -2, -2, -2, 0, 0, 0,
	1608, 1610, 1611, 1615, 1616, 0, 1507, 1508, 1509, 1617,
	0, 1114, 0, 1193, 1118, 0, 1114, 1114, 1081, 1159,
	0, 0, 1182, 0, 1134, 1153, 0, 1143, 1132, 0,
	1133, 0, 1164, 0, 1140, 1145, 0, 1148, 0, 1455,
	-2, 433, 417, 0, 0, 1203, 1213, 0, 1266, 1270,
	437, 1168, 0, 0, 0, 0, 152, 772, 796, 0,
	0, 0, 905, 912, 0, 0, 802, 125, 0, 0,
	0, 133, 0, 130, 0, 136, 140, 0, 0, 0,
	0, 0, 97, 98, 99, 0, 104, 0, 105, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 233, 882,
	239, 754, 803, 0, 805, 0, 729, 0, 804, 852,
	0, 290, 0, 297, 0, 872, 887, 900, 0, 0,
	0, 988, 990, 0, 981, 982, 1097, 992, 1011, -2,
	1010, 0, 1085, 1019, 1016, 1022, 1023, 0, 348, 186,
	0, 181, 183, 0, 167, 0, 0, 747, 752, 0,
	0, 0, 0, 0, 1002, 1004, 0, 173, 0, 599,
	618, 666, 696, 759, 0, 0, 698, 0, 0, 1100,
	1090, 912, 1357, 1361, 0, 0, 0, 1363, -2, 0,
	1385, -2, -2, 1580, 1631, 1434, 1085, 1456, 1458, 1309,
	1625, 0, 1531, 1528, 0, 1515, 1238, 1476, 1477, 0,
	0, 1480, 1482, 1483, 1484, 1604, 0, 0, 0, 0,
	1506, 1070, 1520, 0, 0, 1122, 1520, 1520, 1160, 0,
	1162, 1157, 1155, 1130, 1123, 0, 1695, 1147, 0, 0,
	1197, 1202, 0, 1265, 119, 120, 122, 0, 773, 0,
	776, 0, 0, 0, 0, 783, 784, 0, 0, 0,
	0, 0, 819, 829, 0, 907, 0, 0, 0, 127,
	146, 0, 0, 926, 0, 151, 151, 0, 0, 917,
	0, 0, 0, 0, 107, 0, 0, 919, 921, 915,
	0, 0, 923, 179, 762, 0, 815, 807, 808, 809,
	0, 814, 816, 0, 0, 733, 730, 745, 728, 849,
	881, 0, 295, 0, 0, 0, 0, 0, 978, 990,
	0, 983, 984, 1013, 1096, 0, 0, 0, 999, 1097,
	0, 188, 189, 0, 0, 0, 0, 0, 0, 0,
	189, 476, 478, 0, 0, 484, 758, 0, 0, 0,
	0, 1091, 1365, -2, -2, 1386, 0, 1696, 1698, 1085,
	0, 1517, 0, 0, -2, 0, 0, 0, 1056, 0,
	1113, 1111, 1057, 1058, 1181, 1167, 0, 1150, 0, 1204,
	124, 0, 777, 778, 1681, 780, 0, 782, 785, 0,
	787, 1717, 0, 791, 798, 820, 0, 754, 0, 825,
	826, 827, 906, 800, 0, 126, 128, 145, 909, 129,
	135, 0, 0, 83, 0, 0, 1766, 110, 108, 106,
	85, 0, 728, 761, 0, 806, 0, 817, 818, 731,
	0, 0, 0, 296, 299, 0, 302, 0, 899, 0,
	0, 0, 0, 985, 986, 311, 0, 0, 0, 1013,
	1024, 166, 0, 0, 829, 0, 0, 795, 0, 171,
	0, 480, 0, 482, 0, 697, 699, 0, 0, 1457,
	1535, 0, 1478, 1479, -2, 0, 1423, 1519, 1521, 0,
	1135, 1124, 1198, 775, 779, 0, 0, 835, 0, 0,
	0, 823, 824, 762, 0, 0, 148, 0, 0, 0,
	0, 0, 0, 0, 726, 0, 0, 734, 0, 754,
	0, 300, 301, 0, 900, 0, 0, 987, 988, 0,
	1006, 1007, 1009, 1014, 0, 0, 754, 829, 794, 0,
	479, 0, 0, 702, 703, 0, 0, 0, 0, 1530,
	1424, 0, 0, 0, 786, 840, 0, 0, 0, 821,
	822, 819, 0, 831, 131, 0, 908, 0, 766, 0,
	0, 769, 0, 0, 111, 1766, 109, 0, 0, 0,
	811, 813, 735, 762, 733, 829, 0, 829, 0, 979,
	0, 1008, 189, 189, 762, 754, 189, 481, 483, 1527,
	1547, 1536, -2, 1971, 1769, 0, 1547, 1547, 1522, 1523,
	0, 788, 836, 837, 0, 832, 833, 834, 1716, 789,
	790, 799, 828, 835, 147, 763, 0, 0, 764, 0,
	0, 114, 0, 116, 0, 810, 0, 728, 732, 754,
	0, 754, 0, 1195, 168, 169, 792, 762, 170, 1532,
	0, 0, 1538, 1539, 1540, 1541, 1542, 1533, 1534, 781,
	838, 0, 839, 0, 0, 0, 840, 767, 0, 770,
	0, 112, 0, 812, 727, 762, 0, 762, 0, 1005,
	793, 0, 1544, 1545, 0, 0, 841, 0, 844, 845,
	0, 842, 819, 0, 0, 757, 897, 829, 897, 829,
	1543, 1546, 1537, 843, 846, 847, 801, 0, 0, 753,
	755, 756, 892, 0, 754, 894, 754, 762, 0, 898,
	762, 762, 768, 0, 897, 897, 0, 893, 895, 0,
	762, 771,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 452, 3, 458, 453, 3,
	463, 464, 456, 454, 468, 455, 465, 457, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 471, 3,
	444, 446, 445, 449, 467, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 461, 3, 462, 459, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 469, 451, 470, 447,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 440, 57783, 441, 57784, 442,
	57785, 443, 57786, 448, 57787, 450, 57788, 460, 57789, 466,
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1089
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.stmt())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1094
		{
			return helpWith(sqllex, "")
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1098
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1099
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1100
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1101
		{
			return helpWith(sqllex, "GRANT")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1102
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1103
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1104
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1105
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1110
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 28:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1119
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 29:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1120
		{
			return helpWith(sqllex, "ALTER")
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1123
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1124
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 35:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1125
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 37:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1126
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 39:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1127
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 41:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1128
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 43:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1129
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1182
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 54:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1208
		{
			return helpWith(sqllex, "ALTER PARTITION")
		}
	case 56:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1219
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1234
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 60:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1238
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[3].union.unresolvedObjectName(), Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1242
		{
			sqlVAL.union.val = &tree.AlterSequence{Name: sqlDollar[5].union.unresolvedObjectName(), Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1253
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 66:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1265
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 68:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1284
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1316
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1320
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[3].union.unresolvedObjectName(), IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1324
		{
			sqlVAL.union.val = &tree.AlterTable{Table: sqlDollar[5].union.unresolvedObjectName(), IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1330
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.tableIndexName(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1334
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.tableIndexName(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1340
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   tree.Expr(nil),
			}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1349
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Split{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
				ExpireExpr:   sqlDollar[9].union.expr(),
			}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1360
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: tree.Expr(nil)}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1364
		{
			sqlVAL.union.val = &tree.Split{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), ExpireExpr: sqlDollar[9].union.expr()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1370
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[6].union.slct(),
			}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1378
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Unsplit{
				TableOrIndex: tree.TableIndexName{Table: name},
				All:          true,
			}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1388
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct()}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1392
		{
			sqlVAL.union.val = &tree.Unsplit{TableOrIndex: sqlDollar[3].union.tableIndexName(), All: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1402
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex: tree.TableIndexName{Table: name},
				Rows:         sqlDollar[5].union.slct(),
			}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1413
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[5].union.slct()}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1420
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Relocate{
				TableOrIndex:  tree.TableIndexName{Table: name},
				Rows:          sqlDollar[6].union.slct(),
				RelocateLease: true,
			}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1432
		{

			sqlVAL.union.val = &tree.Relocate{TableOrIndex: sqlDollar[3].union.tableIndexName(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1439
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1447
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1452
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1456
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1461
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1467
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 102:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1475
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 103:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1486
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableIndexName(),
			}
			sqlVAL.union.val = s
		}
	case 104:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1496
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 105:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1506
		{
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 106:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1515
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			s := sqlDollar[9].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			s.AllIndexes = true
			sqlVAL.union.val = s
		}
	case 107:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1526
		{
			err := errors.New("index name should not be specified in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION ... OF INDEX")
			return setErr(sqllex, err)
		}
	case 108:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1532
		{
			err := errors.New("index wildcard unsupported in ALTER PARTITION ... OF TABLE")
			err = errors.WithHint(err, "try ALTER PARTITION <partition> OF INDEX <tablename>@*")
			return setErr(sqllex, err)
		}
	case 109:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1540
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), "."))}}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1544
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1548
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 112:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1552
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), "."))})
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1558
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1563
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Scatter{
				TableOrIndex: tree.TableIndexName{Table: name},
				From:         sqlDollar[7].union.exprs(),
				To:           sqlDollar[11].union.exprs(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1574
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName()}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1578
		{
			sqlVAL.union.val = &tree.Scatter{TableOrIndex: sqlDollar[3].union.tableIndexName(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1584
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1588
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 119:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1595
		{
			sqlVAL.union.val = &tree.AlterTableRenameColumn{Column: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1600
		{
			sqlVAL.union.val = &tree.AlterTableRenameConstraint{Constraint: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[5].str)}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1605
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1610
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1615
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1620
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 125:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1625
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 126:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1630
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1635
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 128:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1640
		{
			sqlVAL.union.val = &tree.AlterTableSetNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1645
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1654
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:1666
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1676
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1683
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "alter constraint")
		}
	case 134:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1686
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1693
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1702
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1711
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1716
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1723
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 140:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1731
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 141:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1732
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1736
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 143:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1740
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1746
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1754
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1758
		{
			sqlVAL.union.val = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1764
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1768
		{
			sqlVAL.union.val = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1775
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 150:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1779
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1783
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1789
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 153:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:1793
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 154:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1819
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.partitionedBackup(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 155:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1822
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 156:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:1845
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 157:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1849
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.partitionedBackups(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 158:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1852
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 159:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1856
		{
			sqlVAL.union.val = tree.PartitionedBackup{sqlDollar[1].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1860
		{
			sqlVAL.union.val = tree.PartitionedBackup(sqlDollar[2].union.exprs())
		}
	case 161:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1866
		{
			sqlVAL.union.val = []tree.PartitionedBackup{sqlDollar[1].union.partitionedBackup()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.partitionedBackups(), sqlDollar[3].union.partitionedBackup())
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1876
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 164:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:1913
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:1918
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 166:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1922
		{

			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 167:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1928
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 168:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1933
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 169:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1938
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:1943
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: sqlDollar[5].union.nameList(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 171:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:1948
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Import{Table: &name, Into: true, IntoCols: nil, FileFormat: sqlDollar[4].str, Files: sqlDollar[7].union.exprs(), Options: sqlDollar[9].union.kvOptions()}
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1952
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 173:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:1968
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:1971
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1975
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1979
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:1987
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1991
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:1997
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2001
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2007
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2011
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2015
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2019
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2025
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2029
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2035
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 188:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2039
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 189:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2043
		{
			sqlVAL.union.val = nil
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2049
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2062
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2063
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2064
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 197:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2065
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2075
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2083
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2085
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2088
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2098
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 203:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2107
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2115
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2117
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 206:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2121
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2124
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2134
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2143
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2151
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2153
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 212:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2157
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2160
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2164
		{
			sqlVAL.union.val = &tree.CommentOnDatabase{Name: tree.Name(sqlDollar[4].str), Comment: sqlDollar[6].union.strPtr()}
		}
	case 215:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2168
		{
			sqlVAL.union.val = &tree.CommentOnTable{Table: sqlDollar[4].union.unresolvedObjectName(), Comment: sqlDollar[6].union.strPtr()}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2172
		{
			varName, err := sqlDollar[4].union.unresolvedName().NormalizeVarName()
			if err != nil {
				return setErr(sqllex, err)
			}

			columnItem, ok := varName.(*tree.ColumnItem)
			if !ok {
				sqllex.Error(fmt.Sprintf("invalid column name: %q", tree.ErrString(sqlDollar[4].union.unresolvedName())))
				return 1
			}

			sqlVAL.union.val = &tree.CommentOnColumn{ColumnItem: columnItem, Comment: sqlDollar[6].union.strPtr()}
		}
	case 217:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2189
		{
			t := sqlDollar[1].str
			sqlVAL.union.val = &t
		}
	case 218:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2194
		{
			var str *string
			sqlVAL.union.val = str
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2206
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2207
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2209
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2210
		{
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2211
		{
			return helpWith(sqllex, "CREATE")
		}
	case 228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2214
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 229:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2215
		{
			return unimplemented(sqllex, "create cast")
		}
	case 230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2216
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2217
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2218
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 233:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2219
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 234:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2220
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 235:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2221
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2222
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2223
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2224
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 239:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2225
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2226
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2227
		{
			return unimplemented(sqllex, "create operator")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2228
		{
			return unimplemented(sqllex, "create publication")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2229
		{
			return unimplemented(sqllex, "create rule")
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2230
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2231
		{
			return unimplemented(sqllex, "create server")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2232
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2233
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2234
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2237
		{
		}
	case 250:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2238
		{
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2241
		{
		}
	case 252:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2242
		{
		}
	case 253:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2245
		{
		}
	case 254:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2246
		{
		}
	case 255:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2249
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 256:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2250
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2251
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 258:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2252
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2253
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 260:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2254
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 261:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2255
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2256
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2257
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 264:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2258
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2259
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 266:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2260
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2261
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2262
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2263
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2264
		{
			return unimplemented(sqllex, "drop server")
		}
	case 271:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2265
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2266
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2267
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2268
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 277:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2272
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2273
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2274
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2275
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2277
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 285:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2278
		{
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2279
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2280
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2290
		{
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[4].union.nameList(),
				Table:       sqlDollar[6].union.tblExpr(),
				Options:     *sqlDollar[7].union.createStatsOptions(),
			}
		}
	case 291:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2298
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 292:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2302
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 293:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2306
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2312
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 295:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2316
		{

			sqlVAL.union.val = &tree.TableRef{
				TableID: sqlDollar[2].union.int64(),
			}
		}
	case 296:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2325
		{

			sqlVAL.union.val = sqlDollar[3].union.createStatsOptions()
		}
	case 297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2332
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 298:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2338
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{}
		}
	case 299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2344
		{
			sqlVAL.union.val = sqlDollar[1].union.createStatsOptions()
		}
	case 300:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2348
		{
			a := sqlDollar[1].union.createStatsOptions()
			b := sqlDollar[2].union.createStatsOptions()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2359
		{

			value, _ := constant.Float64Val(sqlDollar[2].union.numVal().AsConstantValue())
			if value < 0.0 || value >= 1.0 {
				sqllex.Error("THROTTLING fraction must be between 0 and 1")
				return 1
			}
			sqlVAL.union.val = &tree.CreateStatsOptions{
				Throttling: value,
			}
		}
	case 302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2371
		{
			sqlVAL.union.val = &tree.CreateStatsOptions{
				AsOf: sqlDollar[1].union.asOfClause(),
			}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2379
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2387
		{

			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				Options: sqlDollar[5].union.kvOptions(),
			}
		}
	case 305:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2397
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2401
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2407
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()}
		}
	case 308:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2411
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedObjectName().ToUnresolvedName())
		}
	case 309:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2418
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 310:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2422
		{

			sqlVAL.union.val = nil
		}
	case 311:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:2436
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[6].union.expr()),
				OrderBy:   sqlDollar[7].union.orderBy(),
				Limit:     sqlDollar[8].union.limit(),
				Returning: sqlDollar[9].union.retClause(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2446
		{
			return helpWith(sqllex, "DELETE")
		}
	case 313:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2449
		{
			return unimplementedWithIssueDetail(sqllex, 40963, "delete using")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2450
		{
		}
	case 315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2458
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2461
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2462
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 318:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2463
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 319:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2464
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2465
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2474
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2475
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 326:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2476
		{
		}
	case 327:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2477
		{
			return helpWith(sqllex, "DROP")
		}
	case 329:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2480
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 331:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2481
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2482
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 335:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2483
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2484
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 338:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2492
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 339:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2496
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2499
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 341:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2507
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 342:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2511
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2514
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 344:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2522
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 345:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2526
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2529
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 347:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2537
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[4].union.newTableIndexNames(),
				IfExists:     false,
				DropBehavior: sqlDollar[5].union.dropBehavior(),
			}
		}
	case 348:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2545
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[6].union.newTableIndexNames(),
				IfExists:     true,
				DropBehavior: sqlDollar[7].union.dropBehavior(),
			}
		}
	case 349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2552
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2560
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 351:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2568
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 352:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2575
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 353:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2583
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 354:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2587
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 355:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2590
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 356:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2598
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 357:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2602
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2605
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 359:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2609
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2614
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 361:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2637
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2640
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 363:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2642
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2646
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2650
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", "ANALYZE"}, Statement: sqlDollar[3].union.stmt()}
		}
	case 366:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2654
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 367:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2658
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), "ANALYZE"), Statement: sqlDollar[6].union.stmt()}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2665
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2669
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2672
		{
			return helpWith(sqllex, "DELETE")
		}
	case 378:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2674
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2675
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 382:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2676
		{
			return helpWith(sqllex, "INSERT")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2677
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 387:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2679
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2680
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 391:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2681
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 393:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2684
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 397:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2689
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2690
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2691
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2696
		{
			return helpWith(sqllex, "DELETE")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2697
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2698
		{
			return helpWith(sqllex, "INSERT")
		}
	case 408:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2700
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2704
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2705
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2709
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2713
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2723
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 417:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2731
		{

			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: &tree.CannedOptPlan{Plan: sqlDollar[7].str},
			}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2739
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2743
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 420:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2747
		{
			sqlVAL.union.val = []*types.T(nil)
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2757
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 422:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2764
		{

			sqlVAL.union.val = &tree.Execute{
				Name:        tree.Name(sqlDollar[2].str),
				Params:      sqlDollar[3].union.exprs(),
				DiscardRows: true,
			}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2772
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2776
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 425:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:2780
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2790
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2794
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2798
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2802
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2805
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 431:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2825
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 432:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2829
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 433:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2833
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 434:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2836
		{
			return helpWith(sqllex, "GRANT")
		}
	case 435:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:2856
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 436:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2860
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 437:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:2864
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2867
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2872
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2876
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = privList
		}
	case 441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2886
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2890
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2904
		{
			return helpWith(sqllex, "RESET")
		}
	case 450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2905
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2913
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2917
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2920
		{
			return helpWith(sqllex, "RESET")
		}
	case 454:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2928
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2931
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 456:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2942
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 457:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2945
		{
			return helpWith(sqllex, "USE")
		}
	case 459:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2949
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 460:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:2950
		{
		}
	case 461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2951
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 462:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2952
		{
			return unimplementedWithIssue(sqllex, 32562)
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2956
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 466:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2957
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 468:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:2958
		{
			return helpWith(sqllex, "USE")
		}
	case 471:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:2974
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 472:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:2989
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 473:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:2992
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 474:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3010
		{
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   sqlDollar[4].union.unresolvedObjectName(),
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 475:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3018
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3022
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 477:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3026
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 478:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3032
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 479:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3036
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3042
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3046
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3050
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 483:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3054
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3058
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 485:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3069
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 486:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3072
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3082
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3098
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3102
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 492:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3107
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3124
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3127
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3129
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 496:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3132
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3136
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 499:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3155
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3162
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 501:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3167
		{

			sqlVAL.union.val = &tree.SetSessionAuthorizationDefault{}
		}
	case 502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3172
		{
			return unimplementedWithIssue(sqllex, 40283)
		}
	case 504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3177
		{
			return unimplemented(sqllex, "set from current")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3178
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3186
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3191
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3198
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3202
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 510:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3208
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 511:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3212
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 513:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3219
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 516:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3240
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 517:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3244
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 518:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3250
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3254
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3258
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3262
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 522:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3266
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 523:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3272
		{
			sqlVAL.union.val = tree.Low
		}
	case 524:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3276
		{
			sqlVAL.union.val = tree.Normal
		}
	case 525:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3280
		{
			sqlVAL.union.val = tree.High
		}
	case 526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3291
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3295
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3299
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 530:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3304
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 531:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3308
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 533:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3321
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3322
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3323
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3324
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3325
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 543:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3326
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3328
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3329
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3330
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3331
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3332
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3333
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3334
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 561:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3336
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 563:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3337
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 565:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3338
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 567:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3339
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 569:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3340
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 571:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3341
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3342
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3343
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 577:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3344
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3345
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3346
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3348
		{
			return helpWith(sqllex, "SHOW")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3352
		{

			return purposelyUnimplemented(sqllex, "reindex table", "CockroachDB does not require reindexing.")
		}
	case 585:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3357
		{

			return purposelyUnimplemented(sqllex, "reindex index", "CockroachDB does not require reindexing.")
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3362
		{

			return purposelyUnimplemented(sqllex, "reindex database", "CockroachDB does not require reindexing.")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3367
		{

			return purposelyUnimplemented(sqllex, "reindex system", "CockroachDB does not require reindexing.")
		}
	case 588:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3377
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 589:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3378
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3379
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 594:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3390
		{
			sqlVAL.str = "client_encoding"
		}
	case 596:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3393
		{
			sqlVAL.str = "timezone"
		}
	case 597:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3394
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 598:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3408
		{
			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 599:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3412
		{

			sqlVAL.union.val = &tree.ShowTableStats{Table: sqlDollar[7].union.unresolvedObjectName(), UsingJSON: true}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3416
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3427
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3435
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3443
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3450
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details:              tree.BackupDefaultDetails,
				ShouldIncludeSchemas: true,
				Path:                 sqlDollar[4].union.expr(),
			}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3458
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3466
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3473
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 608:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3483
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3487
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3490
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 611:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3492
		{
			sqlVAL.union.val = &tree.ShowAllClusterSettings{}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3495
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 613:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3503
		{
			sqlVAL.union.val = &tree.ShowColumns{Table: sqlDollar[4].union.unresolvedObjectName(), WithComment: sqlDollar[5].union.bool()}
		}
	case 614:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3506
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3514
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3518
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsDB: true, Database: tree.Name(sqlDollar[5].str)}
		}
	case 617:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3522
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsIndex: true, Index: sqlDollar[5].union.tableIndexName()}
		}
	case 618:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3526
		{
			sqlVAL.union.val = &tree.ShowPartitions{IsTable: true, Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3529
		{
			return helpWith(sqllex, "SHOW PARTITIONS")
		}
	case 620:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3537
		{
			sqlVAL.union.val = &tree.ShowDatabases{WithComment: sqlDollar[3].union.bool()}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3540
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 622:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3553
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3561
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 624:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3569
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3572
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 626:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3574
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3578
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 628:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3582
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3585
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 630:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3587
		{
			sqlVAL.union.val = &tree.ShowIndexes{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3591
		{
			sqlVAL.union.val = &tree.ShowDatabaseIndexes{Database: tree.Name(sqlDollar[5].str)}
		}
	case 632:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3594
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 633:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3602
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3605
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 635:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3607
		{
			sqlVAL.union.val = &tree.ShowConstraints{Table: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3610
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 637:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3618
		{
			sqlVAL.union.val = &tree.ShowQueries{All: false, Cluster: sqlDollar[2].union.bool()}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3621
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 639:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3623
		{
			sqlVAL.union.val = &tree.ShowQueries{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 640:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3626
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 641:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3630
		{
			sqlVAL.union.val = true
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3632
		{
			sqlVAL.union.val = true
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3634
		{
			sqlVAL.union.val = false
		}
	case 644:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3644
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: true}
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3648
		{
			sqlVAL.union.val = &tree.ShowJobs{Automatic: false}
		}
	case 646:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3651
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3652
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3654
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[3].union.slct()}
		}
	case 649:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3658
		{
			sqlVAL.union.val = &tree.ShowJobs{Jobs: sqlDollar[5].union.slct(), Block: true}
		}
	case 650:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3661
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 651:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3663
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
			}
		}
	case 652:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3671
		{
			sqlVAL.union.val = &tree.ShowJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				Block: true,
			}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3679
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 654:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3688
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 655:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3691
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 656:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3693
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 657:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3696
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 658:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3698
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 659:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3702
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 660:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:3705
		{
			sqlVAL.union.val = true
		}
	case 661:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3706
		{
			sqlVAL.union.val = false
		}
	case 662:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3714
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: sqlDollar[2].union.bool()}
		}
	case 663:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3717
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 664:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3719
		{
			sqlVAL.union.val = &tree.ShowSessions{All: true, Cluster: sqlDollar[3].union.bool()}
		}
	case 665:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3722
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 666:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3730
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			},
				WithComment: sqlDollar[7].union.bool()}
		}
	case 667:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3740
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			},
				WithComment: sqlDollar[5].union.bool()}
		}
	case 668:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3750
		{
			sqlVAL.union.val = &tree.ShowTables{WithComment: sqlDollar[3].union.bool()}
		}
	case 669:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3753
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 670:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3756
		{
			sqlVAL.union.val = true
		}
	case 671:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3757
		{
			sqlVAL.union.val = false
		}
	case 672:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3764
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3768
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 674:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3771
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 675:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3778
		{
			sqlVAL.union.val = &tree.ShowSequences{Database: tree.Name(sqlDollar[4].str)}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3782
		{
			sqlVAL.union.val = &tree.ShowSequences{}
		}
	case 677:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3785
		{
			return helpWith(sqllex, "SHOW SEQUENCES")
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3792
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 679:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3796
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 680:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3804
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3809
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3814
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3818
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 684:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3826
		{
			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[3].union.unresolvedObjectName()}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3830
		{

			sqlVAL.union.val = &tree.ShowCreate{Name: sqlDollar[4].union.unresolvedObjectName()}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3834
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 690:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3847
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3850
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 692:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3858
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3861
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 694:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3865
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:3869
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3873
		{
			name := sqlDollar[6].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 697:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3881
		{
			name := sqlDollar[9].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableIndexName{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 698:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:3889
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[7].str),
			}}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:3896
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[9].union.tableIndexName(),
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3903
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:3907
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3918
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: tree.TableIndexName{Table: name},
			}
		}
	case 703:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:3926
		{
			sqlVAL.union.val = &tree.ShowRangeForRow{
				Row:          sqlDollar[9].union.exprs(),
				TableOrIndex: sqlDollar[5].union.tableIndexName(),
			}
		}
	case 704:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3932
		{
			return helpWith(sqllex, "SHOW RANGE")
		}
	case 705:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3941
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: tree.TableIndexName{Table: name}}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3946
		{
			sqlVAL.union.val = &tree.ShowRanges{TableOrIndex: sqlDollar[5].union.tableIndexName()}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3950
		{
			sqlVAL.union.val = &tree.ShowRanges{DatabaseName: tree.Name(sqlDollar[5].str)}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:3953
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 709:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:3957
		{

			sqlVAL.union.val = &tree.ShowFingerprints{Table: sqlDollar[5].union.unresolvedObjectName()}
		}
	case 710:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:3964
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 711:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:3969
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 712:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4089
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 713:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4093
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 714:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4097
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 715:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4136
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4140
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 717:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4145
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 718:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4149
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 719:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4158
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4165
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 722:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4169
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 723:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4181
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 724:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4190
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4193
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 726:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:4229
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  sqlDollar[8].union.interleave(),
				Defs:        sqlDollar[6].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[9].union.partitionBy(),
			}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
//line sql-gen.y:4241
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  sqlDollar[11].union.interleave(),
				Defs:        sqlDollar[9].union.tblDefs(),
				AsSource:    nil,
				PartitionBy: sqlDollar[12].union.partitionBy(),
			}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4254
		{
		}
	case 729:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4255
		{
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4256
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 731:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4260
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: false,
				Interleave:  nil,
				Defs:        sqlDollar[5].union.tblDefs(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 732:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
//line sql-gen.y:4271
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateTable{
				Table:       name,
				IfNotExists: true,
				Interleave:  nil,
				Defs:        sqlDollar[8].union.tblDefs(),
				AsSource:    sqlDollar[11].union.slct(),
			}
		}
	case 733:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4283
		{
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4284
		{
		}
	case 735:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4285
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4299
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 737:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4300
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 738:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4301
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 739:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4302
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 740:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4303
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 741:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4304
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 742:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4305
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4306
		{
		}
	case 745:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4311
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 746:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4317
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 747:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4321
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 748:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4327
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 751:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4333
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4336
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 753:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4340
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4349
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 755:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4356
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 756:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4361
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 757:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4366
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 758:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4372
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 760:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4379
		{
			sqlVAL.str = ""
		}
	case 762:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4386
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 763:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4392
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4399
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4406
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 766:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4412
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4416
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 768:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4422
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4432
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 770:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4436
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 771:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4442
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 772:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4456
		{
			typ := sqlDollar[2].union.colType()
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), typ, isSerialType(typ), sqlDollar[3].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = tableDef
		}
	case 773:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4467
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 774:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4471
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 775:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4477
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4481
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 777:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4485
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 778:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4489
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 779:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4493
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 780:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4497
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 781:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4501
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 782:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4519
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 783:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4523
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4527
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4531
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4535
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4539
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 788:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4543
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
				Match:   sqlDollar[4].union.compositeKeyMatchMethod(),
			}
		}
	case 789:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4553
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 790:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4557
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 791:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4561
		{
			sqllex.Error("use AS ( <expr> ) STORED")
			return 1
		}
	case 792:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4568
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 793:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
//line sql-gen.y:4578
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 794:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:4590
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4600
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 796:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4612
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 797:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4617
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 798:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4623
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 799:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4629
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 800:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4640
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 801:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:4650
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Match:    sqlDollar[9].union.compositeKeyMatchMethod(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 802:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4661
		{
			return unimplementedWithIssueDetail(sqllex, 46657, "add constraint exclude using")
		}
	case 803:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4668
		{
			sqlVAL.union.val = sqlDollar[2].union.val
		}
	case 804:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4672
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 805:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4678
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), nil, false, sqlDollar[2].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef
			sqlVAL.union.val = tree.TableDefs{colToTableDef}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4688
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[3].str), nil, false, sqlDollar[4].union.colQuals())
			if err != nil {
				return setErr(sqllex, err)
			}

			var colToTableDef tree.TableDef = tableDef

			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), colToTableDef)
		}
	case 807:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4699
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 808:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4703
		{
			var constraintToTableDef tree.TableDef = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), constraintToTableDef)
		}
	case 809:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4710
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 810:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4716
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 811:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4727
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4731
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 813:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4737
		{
			sqlVAL.union.val = tree.IndexElem{Column: tree.Name(sqlDollar[1].str)}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4743
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 815:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4747
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 816:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4753
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4757
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 818:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4763
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 819:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4768
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4769
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 821:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4770
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 822:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4771
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4772
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 824:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4773
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 828:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4791
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 829:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4795
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 830:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4801
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 831:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4805
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 832:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4825
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4829
		{
			sqlVAL.union.val = tree.MatchFull
		}
	case 834:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4833
		{
			return unimplementedWithIssueDetail(sqllex, 20305, "match partial")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4837
		{
			sqlVAL.union.val = tree.MatchSimple
		}
	case 836:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4846
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 837:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4850
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4854
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4858
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4862
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 841:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4868
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 842:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4874
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4882
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4886
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4890
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 846:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4894
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4898
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 848:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:4917
		{
			name := sqlDollar[4].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 849:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:4922
		{
			name := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 850:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4926
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 852:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4930
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 853:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4933
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 854:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4934
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4937
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().SQLString())
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4938
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 857:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4940
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4941
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 859:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4942
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 860:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4945
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 861:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4947
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 862:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4949
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 863:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4951
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4952
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4954
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4955
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4957
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 868:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:4959
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 869:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4967
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 870:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:4970
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 871:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:4978
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:4982
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4985
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 874:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:4989
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 875:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:4993
		{
			sqlVAL.union.val = nil
		}
	case 876:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5003
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 877:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5007
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 878:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5010
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 879:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5015
		{
		}
	case 880:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5016
		{
		}
	case 881:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5024
		{
			name := sqlDollar[5].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 882:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5032
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 883:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5033
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 884:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5036
		{
		}
	case 885:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5037
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5043
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 887:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5045
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 888:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5047
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 889:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5049
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 890:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5051
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 891:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5053
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 892:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5069
		{
			table := sqlDollar[7].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[10].union.idxElems(),
				Storing:     sqlDollar[12].union.nameList(),
				Interleave:  sqlDollar[13].union.interleave(),
				PartitionBy: sqlDollar[14].union.partitionBy(),
				Inverted:    sqlDollar[8].union.bool(),
			}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5083
		{
			table := sqlDollar[10].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[13].union.idxElems(),
				Storing:     sqlDollar[15].union.nameList(),
				Interleave:  sqlDollar[16].union.interleave(),
				PartitionBy: sqlDollar[17].union.partitionBy(),
				Inverted:    sqlDollar[11].union.bool(),
			}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-15 : sqlpt+1]
//line sql-gen.y:5098
		{
			table := sqlDollar[8].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[6].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[10].union.idxElems(),
				Storing:     sqlDollar[12].union.nameList(),
				Interleave:  sqlDollar[13].union.interleave(),
				PartitionBy: sqlDollar[14].union.partitionBy(),
			}
		}
	case 895:
		sqlDollar = sqlS[sqlpt-18 : sqlpt+1]
//line sql-gen.y:5112
		{
			table := sqlDollar[11].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[9].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[13].union.idxElems(),
				Storing:     sqlDollar[15].union.nameList(),
				Interleave:  sqlDollar[16].union.interleave(),
				PartitionBy: sqlDollar[17].union.partitionBy(),
			}
		}
	case 896:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5126
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 897:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5129
		{
		}
	case 898:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5130
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 899:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5134
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 900:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5149
		{
			sqlVAL.union.val = false
		}
	case 901:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5155
		{

			return purposelyUnimplemented(
				sqllex,
				"concurrently",
				"CockroachDB performs this operation concurrently - CONCURRENTLY is not required.",
			)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5164
		{
			sqlVAL.union.val = false
		}
	case 903:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5170
		{
			sqlVAL.union.val = true
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5174
		{
			sqlVAL.union.val = false
		}
	case 905:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5180
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5184
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5193
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 908:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5204
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 909:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5205
		{
			sqlVAL.str = ""
		}
	case 910:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5209
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 911:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5213
		{
			sqlVAL.union.val = tree.Descending
		}
	case 912:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5217
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 913:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5223
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5230
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 915:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5234
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 916:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5240
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5246
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5254
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5260
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5268
		{
			name := sqlDollar[3].union.unresolvedObjectName()
			newName := sqlDollar[6].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5274
		{
			name := sqlDollar[5].union.unresolvedObjectName()
			newName := sqlDollar[8].union.unresolvedObjectName()
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5282
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5286
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableIndexName(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5291
		{
		}
	case 925:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5292
		{
		}
	case 926:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5295
		{
		}
	case 927:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5296
		{
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5304
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
		}
	case 929:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5307
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 930:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5317
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 931:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5326
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5329
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 933:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5337
		{
			sqlVAL.union.val = &tree.Savepoint{Name: tree.Name(sqlDollar[2].str)}
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5340
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5344
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5345
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 940:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5346
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5362
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 943:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5365
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 944:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5367
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5370
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5380
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5383
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5385
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5388
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 950:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5392
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5397
		{
		}
	case 952:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5398
		{
		}
	case 953:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5399
		{
		}
	case 954:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5407
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: tree.Name(sqlDollar[2].str)}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 955:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5414
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 956:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5417
		{
		}
	case 957:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5418
		{
		}
	case 958:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5422
		{
			sqlVAL.str = ""
		}
	case 959:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5426
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 960:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5430
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 961:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5434
		{
			sqlVAL.str = ""
		}
	case 962:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5440
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 963:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5444
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5450
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5454
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5460
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 967:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5464
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5477
		{
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5479
		{
		}
	case 970:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5483
		{

			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5488
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5492
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 973:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5496
		{
			sqlVAL.union.val = tree.TransactionModes{AsOf: sqlDollar[1].union.asOfClause()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5502
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 975:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5508
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5514
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5518
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 978:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5528
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 979:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
//line sql-gen.y:5538
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 980:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5548
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 981:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5552
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 982:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5556
		{
			sqlVAL.str = ""
		}
	case 983:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5562
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 984:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5566
		{
			sqlVAL.str = ""
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5572
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 986:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5576
		{
			sqlVAL.str = ""
		}
	case 987:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5582
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 988:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5586
		{
			sqlVAL.str = ""
		}
	case 989:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5591
		{
		}
	case 990:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5592
		{
		}
	case 991:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5604
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 992:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:5611
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 993:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5618
		{
			return helpWith(sqllex, "INSERT")
		}
	case 994:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:5629
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5636
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 996:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5640
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &name
		}
	case 997:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5649
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 998:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5656
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5660
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5664
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5670
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5674
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5694
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5698
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5702
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5708
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5711
		{
			return unimplementedWithIssue(sqllex, 32557)
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5712
		{
			return unimplementedWithIssue(sqllex, 28161)
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5714
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5720
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5725
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5729
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
//line sql-gen.y:5746
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				From:      sqlDollar[6].union.tblExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5758
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5761
		{
			sqlVAL.union.val = sqlDollar[2].union.tblExprs()
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5764
		{
			sqlVAL.union.val = tree.TableExprs{}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5770
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5774
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5787
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5790
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5794
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5837
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5843
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5847
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5862
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), ForLocked: sqlDollar[2].union.forLocked()}
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5866
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5870
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5874
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), ForLocked: sqlDollar[3].union.forLocked()}
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5878
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), ForLocked: sqlDollar[4].union.forLocked()}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:5882
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit(), ForLocked: sqlDollar[5].union.forLocked()}
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5887
		{
			sqlVAL.union.val = tree.ForLocked{}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5889
		{
			sqlVAL.union.val = tree.ForLocked{Strength: sqlDollar[1].union.lockingStrength(), Targets: sqlDollar[2].union.tableNames()}
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5894
		{
			sqlVAL.union.val = tree.TableNames{}
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5895
		{
			sqlVAL.union.val = sqlDollar[2].union.tableNames()
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5898
		{
			sqlVAL.union.val = tree.ForUpdate
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:5899
		{
			sqlVAL.union.val = tree.ForNoKeyUpdate
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5900
		{
			sqlVAL.union.val = tree.ForShare
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:5901
		{
			sqlVAL.union.val = tree.ForKeyShare
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:5904
		{
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5906
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:5907
		{
			return unimplementedWithIssue(sqllex, 40476)
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5912
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 1050:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5947
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5948
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:5949
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5971
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5984
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:5998
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6010
		{
			return helpWith(sqllex, "SELECT")
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6014
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6023
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6032
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6047
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6054
		{
			return helpWith(sqllex, "TABLE")
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6066
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6070
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6074
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6078
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6082
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6088
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6096
		{
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6097
		{
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6101
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6105
		{
			sqlVAL.union.val = nil
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6110
		{
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6111
		{
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6115
		{
			sqlVAL.union.val = true
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6119
		{
			sqlVAL.union.val = false
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6123
		{
			sqlVAL.union.val = false
		}
	case 1080:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6129
		{
			sqlVAL.union.val = true
		}
	case 1081:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6135
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 1082:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6140
		{
		}
	case 1083:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6141
		{
		}
	case 1084:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6145
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 1085:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6149
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6155
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6161
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 1088:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6165
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 1089:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6171
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 1090:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6175
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 1091:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6180
		{
			name := sqlDollar[2].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6195
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6204
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
				sqlVAL.union.val.(*tree.Limit).LimitAll = sqlDollar[2].union.limit().LimitAll
			}
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6216
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6220
		{
			sqlVAL.union.val = &tree.Limit{LimitAll: true}
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6224
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6238
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6242
		{
			sqlVAL.union.val = &tree.Limit{
				Count: tree.NewNumVal(constant.MakeInt64(1), "", false),
			}
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6250
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6257
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6279
		{
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6280
		{
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6283
		{
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6284
		{
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6301
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6305
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6311
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6315
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6334
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6337
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6339
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6351
		{
			sqlVAL.union.val = tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6354
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6356
		{
			sqlVAL.union.val = tree.From{}
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6362
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6366
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6372
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6376
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6381
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Ascending}
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6386
		{

			sqlVAL.union.val = &tree.IndexFlags{Direction: tree.Descending}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6392
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6397
		{

			sqlVAL.union.val = &tree.IndexFlags{IgnoreForeignKeys: true}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6404
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6409
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = a
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6420
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6424
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6428
		{
			flags := sqlDollar[3].union.indexFlags()
			if err := flags.Check(); err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = flags
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6436
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:6467
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6481
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6491
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6499
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[2].union.selectStmt()},
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6508
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6512
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6516
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[2].union.bool(),

				As: sqlDollar[3].union.aliasClause(),
			}
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6527
		{
			f := sqlDollar[2].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       f,
				Ordinality: sqlDollar[3].union.bool(),
				Lateral:    true,
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6551
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6557
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6561
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6567
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6569
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6573
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1149:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6579
		{
		}
	case 1150:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6581
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6584
		{
			sqlVAL.union.val = nil
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6585
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6586
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6590
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6594
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6600
		{
			sqlVAL.union.val = true
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6604
		{
			sqlVAL.union.val = false
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6624
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6628
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: tree.AstCross, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Hint: sqlDollar[3].str}
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6632
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: sqlDollar[6].union.joinCond(), Hint: sqlDollar[3].str}
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6636
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:6640
		{
			sqlVAL.union.val = &tree.JoinTableExpr{JoinType: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[6].union.tblExpr(), Cond: tree.NaturalJoinCond{}, Hint: sqlDollar[4].str}
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6644
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6650
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6654
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6661
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6667
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6674
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6680
		{
			sqlVAL.str = tree.AstFull
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6684
		{
			sqlVAL.str = tree.AstLeft
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6688
		{
			sqlVAL.str = tree.AstRight
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6692
		{
			sqlVAL.str = tree.AstInner
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6698
		{
		}
	case 1176:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6699
		{
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6720
		{
			sqlVAL.str = tree.AstHash
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6724
		{
			sqlVAL.str = tree.AstMerge
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6728
		{
			sqlVAL.str = tree.AstLookup
		}
	case 1180:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6732
		{
			sqlVAL.str = ""
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6745
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6749
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6754
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6755
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName()
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6756
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedObjectName()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6757
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedObjectName()
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6761
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6766
		{
			name := sqlDollar[3].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6780
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6784
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6790
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6798
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6808
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6815
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6827
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					return setErr(sqllex, err)
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6840
		{

			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:6848
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6849
		{
			var err error
			sqlVAL.union.val, err = arrayOf(sqlDollar[1].union.colType(), nil)
			if err != nil {
				return setErr(sqllex, err)
			}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6859
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6866
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6867
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:6869
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:6877
		{
			return unimplementedWithIssue(sqllex, 32552)
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:6878
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:6889
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:6891
		{
			prec, err := sqlDollar[3].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			if prec == 6 {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			} else {
				return unimplementedWithIssue(sqllex, 32564)
			}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6919
		{
			sqlVAL.union.val = types.Jsonb
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6923
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6927
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6931
		{
			sqlVAL.union.val = types.Bytes
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6935
		{
			sqlVAL.union.val = types.String
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6939
		{
			sqlVAL.union.val = types.Name
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6943
		{
			switch sqllex.(*lexer).nakedIntType.Width() {
			case 32:
				sqlVAL.union.val = &serial4Type
			default:
				sqlVAL.union.val = &serial8Type
			}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6952
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6956
		{
			sqlVAL.union.val = &serial2Type
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6960
		{
			sqlVAL.union.val = &serial4Type
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6964
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6968
		{
			sqlVAL.union.val = &serial8Type
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6972
		{
			sqlVAL.union.val = types.Uuid
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6976
		{
			sqlVAL.union.val = types.INet
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6980
		{
			sqlVAL.union.val = types.Oid
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6984
		{
			sqlVAL.union.val = types.OidVector
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6988
		{
			sqlVAL.union.val = types.Int2Vector
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:6992
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = types.MakeQChar(0)
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = types.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7023
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), 0)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7031
		{
			dec, err := newDecimal(sqlDollar[2].union.int32(), sqlDollar[4].union.int32())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = dec
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7039
		{
			sqlVAL.union.val = nil
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7046
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7050
		{
			sqlVAL.union.val = sqllex.(*lexer).nakedIntType
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7054
		{
			sqlVAL.union.val = types.Int2
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7058
		{
			sqlVAL.union.val = types.Int2
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7062
		{
			sqlVAL.union.val = types.Int4
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7066
		{
			sqlVAL.union.val = types.Int
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7070
		{
			sqlVAL.union.val = types.Int
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7074
		{
			sqlVAL.union.val = types.Int
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7078
		{
			sqlVAL.union.val = types.Float4
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7082
		{
			sqlVAL.union.val = types.Float4
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7086
		{
			sqlVAL.union.val = types.Float
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7090
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7094
		{
			sqlVAL.union.val = types.Float
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7098
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7106
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7114
		{
			typ := sqlDollar[2].union.colType()
			if typ == nil {
				typ = types.Decimal
			}
			sqlVAL.union.val = typ
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7122
		{
			sqlVAL.union.val = types.Bool
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7126
		{
			sqlVAL.union.val = types.Bool
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7133
		{
			sqlVAL.union.val = types.RegProc
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7137
		{
			sqlVAL.union.val = types.RegProcedure
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7141
		{
			sqlVAL.union.val = types.RegClass
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7145
		{
			sqlVAL.union.val = types.RegType
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7149
		{
			sqlVAL.union.val = types.RegNamespace
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7155
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			typ, err := newFloat(prec)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = typ
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7168
		{
			sqlVAL.union.val = types.Float
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7174
		{
			bit, err := newBitType(sqlDollar[4].union.int32(), sqlDollar[2].union.bool())
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1266:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7180
		{
			bit, err := newBitType(sqlDollar[3].union.int32(), true)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = bit
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7188
		{
			sqlVAL.union.val = types.MakeBit(1)
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7192
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7196
		{
			sqlVAL.union.val = types.VarBit
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7202
		{
			colTyp := *sqlDollar[1].union.colType()
			n := sqlDollar[3].union.int32()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", colTyp.SQLString()))
				return 1
			}
			sqlVAL.union.val = types.MakeScalar(types.StringFamily, colTyp.Oid(), colTyp.Precision(), n, colTyp.Locale())
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7214
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7220
		{
			sqlVAL.union.val = types.MakeChar(1)
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7224
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7228
		{
			sqlVAL.union.val = types.VarChar
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7232
		{
			sqlVAL.union.val = types.String
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7241
		{
			sqlVAL.union.val = true
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7242
		{
			sqlVAL.union.val = false
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7247
		{
			sqlVAL.union.val = types.Date
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7251
		{
			if sqlDollar[2].union.bool() {
				return unimplementedWithIssueDetail(sqllex, 26097, "type")
			}
			sqlVAL.union.val = types.Time
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7256
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32565)
			}
			sqlVAL.union.val = types.MakeTime(prec)
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7263
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7264
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type with precision")
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7266
		{
			if sqlDollar[2].union.bool() {
				sqlVAL.union.val = types.TimestampTZ
			} else {
				sqlVAL.union.val = types.Timestamp
			}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7274
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			if sqlDollar[5].union.bool() {
				sqlVAL.union.val = types.MakeTimestampTZ(prec)
			} else {
				sqlVAL.union.val = types.MakeTimestamp(prec)
			}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7286
		{
			sqlVAL.union.val = types.TimestampTZ
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7290
		{
			prec := sqlDollar[3].union.int32()
			if prec != 6 {
				return unimplementedWithIssue(sqllex, 32098)
			}
			sqlVAL.union.val = types.MakeTimestampTZ(prec)
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7299
		{
			sqlVAL.union.val = true
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7300
		{
			sqlVAL.union.val = false
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7301
		{
			sqlVAL.union.val = false
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7305
		{
			sqlVAL.union.val = types.Interval
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7311
		{
			sqlVAL.union.val = tree.Year
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7315
		{
			sqlVAL.union.val = tree.Month
		}
	case 1295:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7319
		{
			sqlVAL.union.val = tree.Day
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7323
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1297:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7327
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7331
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7337
		{
			sqlVAL.union.val = tree.Month
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7341
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7345
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7349
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7353
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7357
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7361
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:7368
		{
			sqlVAL.union.val = nil
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7374
		{
			sqlVAL.union.val = tree.Second
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7377
		{
			return unimplementedWithIssueDetail(sqllex, 32564, "interval second")
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7401
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7405
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7409
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7413
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("timezone"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7424
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7429
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1317:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7433
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7437
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7441
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7445
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7449
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7453
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7457
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7461
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7465
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7469
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7473
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7477
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7481
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7485
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7489
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7493
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7497
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7501
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7505
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7509
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7513
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7517
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7521
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7525
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7529
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7533
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7537
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7541
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7545
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Overlaps, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7549
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7553
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7557
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7561
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7565
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7569
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7573
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7577
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7581
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7585
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1356:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7589
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7593
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7597
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7601
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7605
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7609
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7613
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7617
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7621
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7625
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7629
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7633
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7637
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7641
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7645
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7649
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7653
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7657
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7661
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7665
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7668
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7670
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7674
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7678
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7682
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7686
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7690
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7694
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7698
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7702
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7710
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7714
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7718
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7722
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7726
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7730
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:7734
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7751
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7756
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7768
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.CastShort}
		}
	case 1398:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7772
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7776
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7780
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7784
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7788
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7792
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7796
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7800
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7804
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7808
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7812
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7816
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7820
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7824
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7828
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7832
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7836
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1415:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7840
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7844
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7848
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7852
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7856
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:7860
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7864
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7868
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7872
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:7876
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7890
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7898
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7934
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7938
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7942
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7946
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7950
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:7955
		{
			return unimplemented(sqllex, sqlDollar[1].union.unresolvedName().String()+"(...) SCONST")
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7957
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1436:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7961
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7964
		{
			return unimplementedWithIssue(sqllex, 32564)
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7966
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7970
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7974
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7978
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:7982
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:7991
		{
			p := sqlDollar[1].union.placeholder()
			sqllex.(*lexer).UpdateNumPlaceholders(p)
			sqlVAL.union.val = p
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:7998
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8002
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8006
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8011
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8015
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1450:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8019
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8023
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8027
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8030
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8034
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8038
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs(), OrderBy: sqlDollar[4].union.orderBy()}
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8041
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8042
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8044
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs(), OrderBy: sqlDollar[5].union.orderBy()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8050
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8054
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8057
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1462:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8068
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8075
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1464:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8084
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8085
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1466:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8090
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("pg_collation_for"), Exprs: tree.Exprs{sqlDollar[4].union.expr()}}
		}
	case 1467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8094
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8098
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8104
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8108
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8112
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8116
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8122
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8126
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8130
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8134
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.CastExplicit}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8138
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8142
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
//line sql-gen.y:8146
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8150
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8154
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8158
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8162
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8166
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8170
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8177
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8180
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8182
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8185
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8187
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8190
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1493:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8192
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8195
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8197
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8200
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1497:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8202
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8205
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8207
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8210
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8212
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8215
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8217
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8221
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8224
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8225
		{
			return unimplemented(sqllex, "treat")
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8227
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8231
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8235
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8239
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8243
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8246
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8248
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8251
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1515:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8256
		{
			return unimplemented(sqllex, "within group")
		}
	case 1516:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8257
		{
		}
	case 1517:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8261
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8265
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8272
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8276
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8282
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8286
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8292
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8300
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8304
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8308
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql-gen.y:8315
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1529:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8335
		{
			sqlVAL.str = ""
		}
	case 1530:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8341
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1531:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8345
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1532:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8351
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.RANGE,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1533:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8359
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.ROWS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8367
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:      tree.GROUPS,
				Bounds:    sqlDollar[2].union.windowFrameBounds(),
				Exclusion: sqlDollar[3].union.windowFrameExclusion(),
			}
		}
	case 1535:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8375
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1536:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8381
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1537:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8394
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1538:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8422
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1539:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8426
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1540:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8430
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1541:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8434
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1542:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8441
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8450
		{
			sqlVAL.union.val = tree.ExcludeCurrentRow
		}
	case 1544:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8454
		{
			sqlVAL.union.val = tree.ExcludeGroup
		}
	case 1545:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8458
		{
			sqlVAL.union.val = tree.ExcludeTies
		}
	case 1546:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8462
		{

			sqlVAL.union.val = tree.NoExclusion
		}
	case 1547:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8467
		{
			sqlVAL.union.val = tree.NoExclusion
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8480
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1549:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8484
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8491
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8503
		{
			sqlVAL.union.val = tree.Any
		}
	case 1553:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8507
		{
			sqlVAL.union.val = tree.Some
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8511
		{
			sqlVAL.union.val = tree.All
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8516
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8517
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8518
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1558:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8519
		{
			sqlVAL.union.val = tree.Div
		}
	case 1559:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8520
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1560:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8521
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8522
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8523
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8524
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1564:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8525
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1565:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8526
		{
			sqlVAL.union.val = tree.LT
		}
	case 1566:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8527
		{
			sqlVAL.union.val = tree.GT
		}
	case 1567:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8528
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1568:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8529
		{
			sqlVAL.union.val = tree.LE
		}
	case 1569:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8530
		{
			sqlVAL.union.val = tree.GE
		}
	case 1570:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8531
		{
			sqlVAL.union.val = tree.NE
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8535
		{
			sqlVAL.union.val = tree.Like
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8536
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8537
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1575:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8538
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8561
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8565
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1578:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8571
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1579:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8575
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1580:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8579
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1581:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8590
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1582:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8594
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1583:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8600
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1584:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8604
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1586:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8611
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1587:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8617
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8621
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1589:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8627
		{
			sqlVAL.union.val = []*types.T{sqlDollar[1].union.colType()}
		}
	case 1590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8631
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8637
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8641
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1593:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8647
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1594:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8651
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8657
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1596:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8661
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1604:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8683
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1605:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8687
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1606:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8691
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1607:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8697
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8704
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1609:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8708
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1610:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8725
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1611:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8729
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1612:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8733
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1613:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8737
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1614:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8741
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1615:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8747
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8753
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1617:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8759
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1618:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8763
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8767
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8773
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1622:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8785
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1623:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8792
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8796
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1625:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql-gen.y:8802
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1626:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8808
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1627:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8812
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1629:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8819
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8825
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1631:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8829
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1633:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8836
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1634:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8842
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8846
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1636:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8851
		{
		}
	case 1637:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:8852
		{
		}
	case 1638:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8856
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1639:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8860
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1640:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8866
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1641:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:8875
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8879
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8883
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1644:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8891
		{
			sqlVAL.union.val = tree.TableIndexNames{sqlDollar[1].union.newTableIndexName()}
		}
	case 1645:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8895
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableIndexNames(), sqlDollar[3].union.newTableIndexName())
		}
	case 1646:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8901
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1647:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8905
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1648:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8924
		{
			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1649:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8932
		{

			name := sqlDollar[1].union.unresolvedObjectName().ToTableName()
			indexName := tree.UnrestrictedName(name.TableName)
			name.TableName = ""
			sqlVAL.union.val = tree.TableIndexName{
				Table: name,
				Index: indexName,
			}
		}
	case 1650:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8955
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8964
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedObjectName().ToUnresolvedName()
		}
	case 1653:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:8968
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1654:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8972
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1655:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8976
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1656:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:8982
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1657:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:8986
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1662:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9001
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1663:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9005
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1666:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9017
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1667:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql-gen.y:9021
		{
			n := sqlDollar[2].union.numVal()
			n.SetNegative()
			sqlVAL.union.val = n
		}
	case 1668:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9030
		{
			val, err := sqlDollar[1].union.numVal().AsInt32()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1669:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9041
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1670:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9050
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = val
		}
	case 1671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9058
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = d
		}
	case 1692:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9155
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1694:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9162
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9166
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1696:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9170
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1698:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql-gen.y:9184
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1699:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9188
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1700:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9192
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1701:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9205
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1705:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql-gen.y:9223
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(1, [3]string{sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1706:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9236
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(2, [3]string{sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1707:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql-gen.y:9243
		{
			aIdx := sqllex.(*lexer).NewAnnotation()
			res, err := tree.NewUnresolvedObjectName(3, [3]string{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}, aIdx)
			if err != nil {
				return setErr(sqllex, err)
			}
			sqlVAL.union.val = res
		}
	case 1715:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9268
		{
			sqlVAL.str = ""
		}
	case 1716:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql-gen.y:9274
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql-gen.y:9278
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
